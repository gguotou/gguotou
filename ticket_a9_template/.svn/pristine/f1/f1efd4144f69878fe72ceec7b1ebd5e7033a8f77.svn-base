#include "form.h"
Form::Form(QWidget *parent) :
    QWidget(parent),
    ui(new Ui::Form)
{
    qs = new QSettings(QS_FILEPATH, QSettings::IniFormat);
    qguoren = new QSettings(QGUOREN_FILEPATH, QSettings::IniFormat);
    qpassnum = new QSettings(QPASSNUM_FILEPATH, QSettings::IniFormat);

    ui->setupUi(this);
#if PROTOCOLVER == NEWPROTOCOL
    codec = QTextCodec::codecForName("UTF-8");
#else
    codec = QTextCodec::codecForName("GBK");
#endif
    SqlTableInit();
    TagMapInit();

    DetectFaceinit();
#if FACEMODE
    FaceDetectInit();//baiduface
#endif
    UiLanguageSwitch();

    AesInit();
    SoundInit();
    TicketInit();
    CanBusInit();
    GateInit();
    FingerInit();
    //VideoInit();
    BarcodeInit();
    RfidInit();
    LedInit();

    UdpInit();
    TcpInit();
    TcpServerInit();
    FtpInit();

    UiInit();
    VideoInit();
    LogFileInit();
}
Form::~Form()
{
    delete ui;
}
//baiduface============================
void Form::FaceTimerOut()
{
    TicketDebug(QString("+++++FaceTimerOut+++++picApplyingMode:%1").arg(picApplyingMode));
    faceTimer->stop();
    FaceTimerOutflag=1;
    sendtofaceflag = 0;

    if(FaceDeviceErrFlag)
    {
        TicketDebug(QString("FaceDeviceErrFlag:%1").arg(FaceDeviceErrFlag));
        return ;
    }
    if(picApplyingMode == 0x03)
    {
        UiTicketstatusDisplay(facerecordedtimeout);
    }
    if(picApplyingMode == 0x04)
    {
        UiTicketstatusDisplay(facematchtimeout);
    }
}
void Form::FaceProcess()
{
#if FACEMODE
    if(sendtofaceflag)
        return;
    if(FaceInNum > 0 && picApplyingMode == 0x03 )
    {
        UiTicketstatusDisplay(pleaseinputface);
        FaceErrTimes=0;
        TicketTimerRe();
    }
    if(FaceMatchNum > 0 && picApplyingMode == 0x04 )
    {
        UiTicketstatusDisplay(pleasematchface);
        FaceErrTimes=0;
        TicketTimerRe();
    }
#endif
}
void Form::sendtoface(quint8 result)//录入-0x01  比对-0x00 id人证-0x08  ic人证-0x09
{
    if(FaceDeviceErrFlag)
    {
        TicketDebug("Face Device Err!");
        return ;
    }
    sendtofaceflag = 1;

#if FACEMODE == BAIDUFACE
        if(peridmatchflag == 0)
        {
            QString ticketOrdertemp;
            if(result== 0x00)//比对-0x00
            {
                if(FaceMatchNum > 1)
                {
                    ticketOrdertemp=ticketOrder;
                    //ticketOrder需要处理
                    int pos=ticketOrdertemp.indexOf(tr("ticketId"));

                    if(pos >= 0)
                    {
                        if(ticketStyle == 0x02)
                            pos=ticketOrdertemp.indexOf(tr("_BC"),pos);
                        else if(ticketStyle == 0x03 || ticketStyle == 0xb1)
                            pos=ticketOrdertemp.indexOf(tr("_IC"),pos);
                        else if(ticketStyle == 0x04)
                            pos=ticketOrdertemp.indexOf(tr("_ID"),pos);
                        else
                            pos=ticketOrdertemp.indexOf(tr("_BC"),pos);

                        if(pos >= 0)
                            ticketOrdertemp = ticketOrdertemp.insert(pos+3,QString::number(FaceMatchNum));

                    }
                    pos=ticketOrdertemp.indexOf(tr("visitorId"));

                    if(pos >= 0)
                    {
                        if(ticketStyle == 0x02)
                            pos=ticketOrdertemp.indexOf(tr("_BC"),pos);
                        else if(ticketStyle == 0x03 || ticketStyle == 0xb1)
                            pos=ticketOrdertemp.indexOf(tr("_IC"),pos);
                        else if(ticketStyle == 0x04)
                            pos=ticketOrdertemp.indexOf(tr("_ID"),pos);
                        else
                            pos=ticketOrdertemp.indexOf(tr("_BC"),pos);

                        if(pos >= 0)
                            ticketOrdertemp = ticketOrdertemp.insert(pos+3,QString::number(FaceMatchNum));
                    }

                    pos=ticketOrdertemp.indexOf(tr("orderId"));

                    if(pos >= 0)
                    {
                        if(ticketStyle == 0x02)
                            pos=ticketOrdertemp.indexOf(tr("_BC"),pos);
                        else if(ticketStyle == 0x03 || ticketStyle == 0xb1)
                            pos=ticketOrdertemp.indexOf(tr("_IC"),pos);
                        else if(ticketStyle == 0x04)
                            pos=ticketOrdertemp.indexOf(tr("_ID"),pos);
                        else
                            pos=ticketOrdertemp.indexOf(tr("_BC"),pos);

                        if(pos >= 0)
                            ticketOrdertemp = ticketOrdertemp.insert(pos+3,QString::number(FaceMatchNum));
                        ticketOrderBase64 = ticketOrdertemp.toUtf8().toBase64();
                        TicketDebug("ticketOrder:"+ticketOrdertemp);

                    }
                }
                else
                {
                    ticketOrderBase64 = ticketOrder.toUtf8().toBase64();
                    TicketDebug("ticketOrder:"+ticketOrder);

                }
            }
            else//录入-0x01
            {
                if(FaceInNum > 1)
                {
                    ticketOrdertemp=ticketOrder;
                    //ticketOrder需要处理
                    int pos=ticketOrdertemp.indexOf(tr("ticketId"));

                    if(pos >= 0)
                    {
                        if(ticketStyle == 0x02)
                            pos=ticketOrdertemp.indexOf(tr("_BC"),pos);
                        else if(ticketStyle == 0x03 || ticketStyle == 0xb1)
                            pos=ticketOrdertemp.indexOf(tr("_IC"),pos);
                        else if(ticketStyle == 0x04)
                            pos=ticketOrdertemp.indexOf(tr("_ID"),pos);
                        else
                            pos=ticketOrdertemp.indexOf(tr("_BC"),pos);

                        if(pos >= 0)
                            ticketOrdertemp = ticketOrdertemp.insert(pos+3,QString::number(FaceInNum));

                    }
                    pos=ticketOrdertemp.indexOf(tr("visitorId"));

                    if(pos >= 0)
                    {
                        if(ticketStyle == 0x02)
                            pos=ticketOrdertemp.indexOf(tr("_BC"),pos);
                        else if(ticketStyle == 0x03 || ticketStyle == 0xb1)
                            pos=ticketOrdertemp.indexOf(tr("_IC"),pos);
                        else if(ticketStyle == 0x04)
                            pos=ticketOrdertemp.indexOf(tr("_ID"),pos);
                        else
                            pos=ticketOrdertemp.indexOf(tr("_BC"),pos);

                        if(pos >= 0)
                            ticketOrdertemp = ticketOrdertemp.insert(pos+3,QString::number(FaceInNum));
                    }

                    pos=ticketOrdertemp.indexOf(tr("orderId"));

                    if(pos >= 0)
                    {
                        if(ticketStyle == 0x02)
                            pos=ticketOrdertemp.indexOf(tr("_BC"),pos);
                        else if(ticketStyle == 0x03 || ticketStyle == 0xb1)
                            pos=ticketOrdertemp.indexOf(tr("_IC"),pos);
                        else if(ticketStyle == 0x04)
                            pos=ticketOrdertemp.indexOf(tr("_ID"),pos);
                        else
                            pos=ticketOrdertemp.indexOf(tr("_BC"),pos);

                        if(pos >= 0)
                            ticketOrdertemp = ticketOrdertemp.insert(pos+3,QString::number(FaceInNum));
                        ticketOrderBase64 = ticketOrdertemp.toUtf8().toBase64();
                        TicketDebug("ticketOrder:"+ticketOrdertemp);

                    }
                }
                else
                {
                    ticketOrderBase64 = ticketOrder.toUtf8().toBase64();
                    TicketDebug("ticketOrder:"+ticketOrder);

                }
            }

            UserEvent *ue = new UserEvent(CR::FACE,this);
            ue->type = 0x06;
            ue->result  =  result;//
            ue->ticketOrderBase64 = ticketOrderBase64;
            qApp->postEvent(faceDetect,ue);
        }
        else
        {
            QByteArray msg;

            msg[0] = idCard.length()/256;
            msg[msg.length()] = idCard.length()%256;
            msg += idCard;
            msg[msg.length()] = idName.length()/256;
            msg[msg.length()] = idName.length()%256;
            msg += idName;
            msg[msg.length()] = idPic.length()/256;
            msg[msg.length()] = idPic.length()%256;
            msg += idPic;
            faceDetect->facedata = msg;

            UserEvent *ue = new UserEvent(CR::FACE,this);
            ue->type = 0x06;
            ue->result = 0x08;//id人证-0x08
            ue->ticketOrderBase64 = msg;
            qApp->postEvent(faceDetect,ue);
        }
#else
#if FACEMODE == TENCENTFACE
            QByteArray msg;
            msg = idCard;
            msg += 0x7c;
            msg += idName;
            msg += 0x7c;
            msg += idPic;
            faceDetect->facedata = msg;
            UserEvent *ue = new UserEvent(CR::FACE,this);
            ue->type = 0x06;
            ue->result  =  result;//
            ue->ticketOrderBase64 = msg;
            qApp->postEvent(faceDetect,ue);
#else
#if FACEMODE == ARCFACE
            QByteArray msg;
            msg = idCard;
            msg += 0x7c;
            msg += idName;
            msg += 0x7c;
            msg += idPic;
            faceDetect->facedata = msg;
            UserEvent *ue = new UserEvent(CR::FACE,this);
            ue->type = 0x06;
            ue->result  =  result;//
            ue->ticketOrderBase64 = msg;
            qApp->postEvent(faceDetect,ue);
#endif
#endif
#endif
}
void Form::SendToFaceConfirm(quint8 result,bool f)//比对成功0x00，比对失败0x01， 发确认
{
    if(peridmatchflag)//人证比对 不发确认
        return ;
    UserEvent *ue = new UserEvent(CR::FACECONFIRM,this);
    ue->type  =  0x02;//
    ue->result = result;
    //ue->ticketid =//检票标识先不传，写死00000000
    if(f)
    {
        ue->ticketlen = ticketNoLen;
        ue->ticketnum = ticketNoNum;
        ue->ticketno = ticketNo;
    }
    else
    {
        ue->ticketlen = ticketArray.at(0).length();
        ue->ticketnum = 1;
        ue->ticketno = ticketArray.at(0);
        ticketArray.clear();
    }
    qApp->postEvent(faceDetect,ue);

    if(result == 0x00)
        TicketDebug("------FACECONFIRM   success------");
    else
        TicketDebug("------FACECONFIRM   fail------");
}
void Form::SendToFaceConfirm2(quint8 result)//录入成功0x00，录入失败0x01， 发确认
{
    UserEvent *ue = new UserEvent(CR::FACECONFIRM2,this);
    ue->type  =  0x02;//
    ue->result = result;
    //ue->ticketid =//检票标识先不传，写死00000000
    ue->ticketlen = ticketNoLen;
    ue->ticketnum = ticketNoNum;
    ue->ticketno  = ticketNo;
    qApp->postEvent(faceDetect,ue);
    if(result == 0x00)
        TicketDebug("------FACECONFIRM2   success------");
    else
        TicketDebug("------FACECONFIRM2   fail------");
}
void Form::FaceDetectInit()
{
    faceDetect = new FaceDetect(this);
    connect(faceDetect,SIGNAL(TicketDebug(QString)),this,SLOT(TicketDebug(QString)));
    faceDetect->start();
    FaceInNum=0;//录入人脸数
    FaceMatchNum=0;//比对人脸数
    FaceTicket_Err = 0;//人脸成功，票错误标记
    FaceErrTimes = 0;//人脸错误次数
    FaceDeviceErrFlag = 1;//默认人脸错误
    faceenable = 1;//人脸默认使能
    ticketArray.clear();//票集清空
    sendtofaceflag = 0;//
    peridmatchflag = 0;//人证比对标记  0-普通比对   1-人证比对

    faceTimer = new QTimer(this);
    connect(faceTimer,SIGNAL(timeout()),this,SLOT(FaceTimerOut()));
    FaceTimerOutflag=0;
}
void Form::DetectFaceinit()
{
    // Storage for the rectangles detected
    cascadeFile = haarXML;
    cascade = (CvHaarClassifierCascade *) cvLoad(cascadeFile.toUtf8());
    m_FaceCount = 0;
    storage = cvCreateMemStorage(0);
    detectFlag = 0;
    okflag = 0;
}
//QImage 转 IplImage
IplImage* Form::QImageToIplImage(const QImage * qImage)
{
    int nChannel=0;
    if(qImage->format()==QImage::Format_RGB888)nChannel=3;
    if(qImage->format()==QImage::Format_ARGB32)nChannel=4;
    if( nChannel==0 )return false;
    IplImage *iplImg=cvCreateImageHeader( cvSize(qImage->width(), qImage->height()) , 8, nChannel );
    iplImg->imageData=(char*)qImage->bits();
    if(nChannel==3)
        cvConvertImage(iplImg,iplImg,CV_CVTIMG_SWAP_RB);
    return iplImg;
}
//IplImage 转 QImage
QImage Form::IplImageToQImage(IplImage *iplImg)
{
    QImage img;
    int nChannel=iplImg->nChannels;
    if(nChannel==3)
    {
        cvConvertImage(iplImg,iplImg,CV_CVTIMG_SWAP_RB);
        img = QImage((const unsigned char*)iplImg->imageData,iplImg->width,iplImg->height,QImage::Format_RGB888);
    }
    else if(nChannel==4||nChannel==1)
    {
        img = QImage((const unsigned char*)iplImg->imageData,iplImg->width,iplImg->height,QImage::Format_ARGB32);
    }
    return img;
}
//人脸检测函数
void Form::DetectAndDraw(IplImage *img)
{
    static CvScalar colors[] =
    {
        {{0,0,255}},
        {{0,128,255}},
        {{0,255,255}},
        {{0,255,0}},
        {{255,128,0}},
        {{255,255,0}},
        {{255,0,0}},
        {{255,0,255}}
    };

    double scale = 2.0;
    IplImage* gray = cvCreateImage( cvSize(img->width,img->height), 8, 1 );
    IplImage* small_img = cvCreateImage( cvSize( cvRound (img->width/scale),
                cvRound (img->height/scale)), 8, 1 );
    int i;

    cvCvtColor( img, gray, CV_BGR2GRAY );
    cvResize( gray, small_img, CV_INTER_LINEAR );
    cvEqualizeHist( small_img, small_img );
    cvClearMemStorage( storage );

    if( cascade )
    {
        double t = (double)cvGetTickCount();
        CvSeq* faces = cvHaarDetectObjects( small_img, cascade, storage,
                        1.2, 2, 0, cvSize(30, 30) );
        t = (double)cvGetTickCount() - t;
        //printf( "detection time = %gms\n", t/((double)cvGetTickFrequency()*1000.) );

        for( i = 0; i < (faces ? faces->total : 0); i++ )
        {
            CvRect* r = (CvRect*)cvGetSeqElem( faces, i );

            CvPoint rectP1, rectP2;
            rectP1.x = cvRound(r->x * scale);
            rectP1.y = cvRound(r->y * scale);
            rectP2.x = cvRound((r->x + r->width) * scale);
            rectP2.y = cvRound((r->y + r->height) * scale);
            cvRectangle(img, rectP1, rectP2, colors[i%8], 2, 8, 0);
            //printf( "img->width=%d, img->height=%d\n", img->width, img->height);
            printf( "r->width=%d, r->height=%d, rectP1.x=%d, rectP1.y=%d, rectP2.x=%d, rectP2.y=%d\n", r->width, r->height, rectP1.x, rectP1.y, rectP2.x, rectP2.y);

            P1.x = (rectP1.x > 20) ?  (rectP1.x - 20) : 0;
            P1.y = (rectP1.y > 30) ?  (rectP1.y - 30) : 0;
            P2.x = ((rectP2.x + 20) > img->width) ?  img->width : (rectP2.x + 20);
            P2.y = ((rectP2.y + 50) > img->height) ?  img->height : (rectP2.y + 50);
            printf( "r->width=%d, r->height=%d, P1.x=%d, P1.y=%d, P2.x=%d, P2.y=%d\n", r->width, r->height, P1.x, P1.y, P2.x, P2.y);
            okflag = 1;
        }
        m_FaceCount = faces->total;
    }

    cvReleaseImage( &gray );
    cvReleaseImage( &small_img );
}

//qt-------------------------------------------------------------------------------------
bool Form::event(QEvent *event)
{
    if(event->type() == QEvent::User)
    {
        UserEvent * ue = static_cast<UserEvent *>(event);
        switch(ue->userType)
        {
            case CR::ConnectOK:
            {
                tcpResponseTimer->stop();
                if((!systemStartFlag) && ipDisFlag)
                {
                    systemStartFlag = 1;
                    UiChange(standby);
                }
                if(0)
                {
                    TcpSendCmd(tcpSendCmdHead,tcpSendCmdType,tcpSendByteArray);
                }
                else
                {
                    QByteArray sendbuf;
#if SNR_ENABLE
#if PROTOCOLVER == NEWPROTOCOL
                    sendbuf = PackTLVEntity(MBSN, udpThread->xlh);//主板序列号
#else
                    sendbuf = udpThread->xlh;
#endif
                    TcpSendCmd(0xa9,0x00,sendbuf);
#else
#if PROTOCOLVER == NEWPROTOCOL
                    sendbuf = PackTLVEntity(SCN, P22_PartNoGuid);//景点号
#else
                    sendbuf.resize(0);
#endif
                    TcpSendCmd(0xa1,0x00,sendbuf);
#endif
                }
                break;
            }
            case CR::TcpReadMsg:
            {
                TcpReadCmd(ue->byteArray);
                break;
            }
            case CR::SendtoMessage:
            {
                TicketDebug("tcp send err!");
                break;
            }
            case CR::TcpError:
            {
                tcpResponseTimer->stop();
                if(netLinkState)
                {
                    UiTicketstatusDisplay(serverconnectionerror);
                    tcpConnectFlag = 0;
                    backupServerFlag = !backupServerFlag;
                    tcpConnectTimer->start(500);
                }
                break;
            }
            case CR::TcpDisconnect:
            {
                tcpResponseTimer->stop();
                if(netLinkState)
                {
                    tcpConnectFlag = 0;
                    backupServerFlag = !backupServerFlag;
                    tcpConnectTimer->start(500);
                }
                break;
            }
            case CR::Netlinkup:
            {
                netLinkState = 1;
                UiPeripheralState(net, linkok);
                //UiChange(standby);
                if(socketLinkState)
                    TcpDisConnect();
                else
                {
                    TcpConnect();

                    if(Ftp_Enable)
                    {
                        UserEvent *ue = new UserEvent(CR::ftpconnect,this);
                        ftp->hostip = Ftp_ServerIp;
                        ftp->ftpport = Ftp_Port;
                        qApp->postEvent(ftp,ue);
                    }
                }
                break;
            }
            case CR::NetlinkDown:
            {
                netLinkState = 0;
                UiPeripheralState(net, linkerr);
                UiTicketstatusDisplay(networkblocked);
                tcpConnectFlag = 0;
                tcpConnectTimer->stop();
                tcpRecTimer->stop();
                break;
            }

            case CR::UdpSave:
            {
                p22PartNoGuidLen = ue->p22PartNoGuidLen;
                UdpSaveQs(ue->byteArray);
                break;
            }
            case CR::ftpconnect:
            {
                QString str = UiGetCheckTicketMsg();
                if(!((str.indexOf(tr("ftp"))>=0)||(str.indexOf(tr("Ftp"))>=0)))//只有在str显示没有ftp相关信息时才执行
                {
                    ftpgatelabel = str;
                    ftpgatelabelcolor = msgcolor;
                }
                switch(ue->ftpstate)
                {
                    case FTPOK:
                        UiTicketstatusDisplay(ftpconnectok);
                        FTPflag=1;
                        break;
                    case FTPSTOP:
                        UiTicketstatusDisplay(ftpstopcheckticket);
                        FTPflag=0;
                        break;
                    case CONNECTTOHOSTERR:
                    case LOGINERR:
                    case SETTRANSFERMODEERR:
                    case CDERR:
                    case MKDIRERR:
                        UiTicketstatusDisplay(opentheftpserver);
                        FTPflag=1;
                        break;
                    case PUTERR:
                    {
                        UiTicketstatusDisplay(ftpputerror);
                        FTPflag=1;
                        break;
                    }
                    case GETERR:
                    {
                        UiTicketstatusDisplay(ftpgeterror);
                        FTPflag=1;
                        break;
                    }
                    case PICDAT:
                    {
                        QImage picImage;
                        picImage.loadFromData(ue->byteArray);
                        picImage.save(ue->msg);
                        TicketDebug("Pic Save " + ue->msg);
                        break;
                    }

                    default:break;
                }
                ftpdisoffTimer->start(5000);
                break;
            }
            case CR::BarCode:
            {
                BarCodeRead(ue->byteArray);
                break;
            }
            case CR::RfidTicket:
            {
                RfidRead(ue->byteArray,ue->flag,ue->type);
                break;
            }
            case CR::FingerFeature:
            {
                //TicketDebug("form receive serialfinage FingerFeature");
                FingerFeatureBack(ue->flag);
                break;
            }
            case CR::FingerTemplate:
            {
                //TicketDebug("form receive serialfinage FingerTemplate");
                UiPeripheralState(finger, linkok);
                FingerTemplateBack(ue->flag,ue->byteArray);
                break;
            }
            case CR::USBFingerFeature:
            {
                //TicketDebug("form receive serialfinage FingerFeature");
                USBFingerFeatureBack(ue->flag);
                break;
            }
            case CR::USBFingerTemplate:
            {
                UiPeripheralState(finger, linkok);
                //TicketDebug("form receive serialfinage FingerTemplate");
                USBFingerTemplateBack(ue->flag,ue->byteArray);
                break;
            }
            case CR::FingerTimerout:
            {
                //TicketDebug("form receive serialfinage FingerTimerout");
                UiPeripheralState(finger, linkerr);
#if FINGEROPENMODE
                if(Pb1_FingerDevType == 0x01)
                {
                    fingerStep = 0x03;
                    USBFingerTemplate_direct();
                }
                else
                    FingerTemplate(fingerchangkai);
#else
                UiTicketstatusDisplay(fingerprintdevicenotdetected);
#endif
                break;
            }
            case CR::FeedBack://三辊闸反馈
            {
                //TicketDebug("feedback recevie");
                PerBack();
                break;
            }
            case CR::PowerOff:
            {
                VDDTimer = new QTimer(this);
                connect(VDDTimer,SIGNAL(timeout()),this,SLOT(VDDTimerOut()));
                VDDTimer->start(5000);
                ResetTtyusb();
                break;
            }
            case CR::PowerOn:
            {
                VDDTimer->stop();
                fileGpio->initusb();
                QFile file0("/dev/ttyUSB0");
                QFile file1("/dev/ttyUSB1");
                QFile file2("/dev/ttyUSB2");
                QFile file3("/dev/ttyUSB3");
                if(!file0.exists() || !file1.exists() || !file2.exists() || !file3.exists())
                {
                    qDebug()<<"-------------"<<file0.exists()<<file1.exists()<<file2.exists()<<file3.exists();
                    TicketDebug("----------------/dev/ttyUSB0/1/2/3 not exist!-------------");
                    QProcess::execute("reboot");
                }
                else
                {
                    bool ok;
                    TicketDebug("PowerOn ecevie");
                    if(qs->value("Pb0_FingerEnable",1).toInt(&ok) == 0x01)
                    {
                        FingerInit();
                    }
                    if(qs->value("P90_BarcodeEnable",0).toInt(&ok) == 0x01)
                    {
                        BarcodeInit();
                    }
                    if(qs->value("P70_RfidEnable",0).toInt(&ok) == 0x01)
                    {
                        RfidInit();
                    }
                    if(P06_GateType == 0x02 || P06_GateType == 0x03)
                    {

                        swingGate = new SwingGate(this);
                        connect(swingGate,SIGNAL(TicketDebug(QString)),this,SLOT(TicketDebug(QString)));
                        swingGate->start();
                    }

                #if HARDWAREVER != SDE_GA503_1_0
                    LedInit();
                #endif

                #if FACEMODE
                     FaceDetectInit();
                #endif
                }
                break;
            }
            case CR::SwingGate://摆闸，翼闸反馈
            {
                SwingGateBack(ue->byteArray);
                break;
            }

            case CR::PicFormClose:
            {
                TicketDebug("picform close");
                break;
            }

            case CR::TcpClientlog:
            {
                 //tcpServerDebugFlag = 1;
                 break;
            }
            case CR::TcpClientLeave:
            {
                //tcpServerDebugFlag = 0;
                break;
            }
            case CR::TcpServerMsg:
            {
                //TcpServerReadCmd(ue->byteArray);
                break;
            }

            case CR::WebSocketServerToController:
            {
                if(!temphumEnableFlag)
                    break;

                QString strbuf;
                int ret;
                bool ok;

                strbuf = ue->msg;
                TicketDebug("WebSocketServerToController read:" + strbuf);

                ret = strbuf.indexOf("readth");
                if(ret != -1)
                {
                    QByteArray sendbuf;
                    sendbuf[0] = humH;
                    sendbuf[1] = humL;
                    sendbuf[2] = tempH;
                    sendbuf[3] = tempL;
                    sendbuf[4] = humThreshold;
                    sendbuf[5] = tempThreshold;
                    sendbuf[6] = relay1;
                    sendbuf[7] = relay2;
                    UserEvent *ue = new UserEvent(CR::WebSocketServerToWebSocketClient,this);
                    ue->byteArray = sendbuf;
                    qApp->postEvent(websocketserver,ue);
                }
                else
                {
                    ret = strbuf.indexOf("writeth");
                    if(ret != -1)
                    {
                        tempThresholdBuf = BgComm::GetSpecificStr(strbuf, "&", 1).toInt(&ok);
                        humThresholdBuf = BgComm::GetSpecificStr(strbuf, "&", 3).toInt(&ok);
                        setTempHumThreshold = 1;
                        TempHumReadTimerOut();
                    }
                }
                break;
            }
            case CR::ControllerToWebSocketServer:
            {
                if(!temphumEnableFlag)
                    break;

                websocketTimer->stop();
                QByteArray buf = ue->byteArray;

                switch((quint8)buf.data()[0])
                {
                    case 0xfb:
                    {
                        switch((quint8)buf.data()[2])
                        {
                            //0     1       2       3       4       5       6       7
                            //0xfb  0x07    0xc0    para1   para2   para3   para4   CheckSum
                            /*
                            para1:湿度值(高八位)
                            para2:湿度值(低八位)
                            para3:温度值(高八位)
                            para4:温度值(低八位)
                            */
                            case 0xc0:
                            {
                                quint16 hum;
                                quint16 temp;

                                humH = (quint8)buf.data()[3];
                                humL = (quint8)buf.data()[4];
                                hum = humH*256+humL;
                                tempH = (quint8)buf.data()[5];
                                tempL = (quint8)buf.data()[6];
                                temp = tempH*256+tempL;

                                if(humH != 0xff)
                                {
                                    humH = (quint8)(hum/10);
                                    humL = (quint8)(hum%10);
                                    if(humH > 99)//数据出错
                                    {
                                        humH = 0xfd;
                                    }
                                }
                                if(tempH != 0xff)
                                {
                                    if(tempH >= 128)
                                    {
                                        tempH = (quint8)(((tempH-128)*256+tempL)/10)+128;
                                    }
                                    else
                                        tempH = (quint8)(temp/10);
                                    tempL = (quint8)(temp%10);

                                    if((tempH>=128) && (((tempH-128)*10+tempL)>400))//数据出错
                                    {
                                        tempH = 0xfd;
                                    }
                                    if((tempH<128)&&((tempH*10+tempL)>800))//数据出错
                                    {
                                        tempH = 0xfd;
                                    }
                                }

                                QByteArray sendbuf;
                                sendbuf[0] = 0xfb;
                                sendbuf[1] = 0x00;
                                sendbuf[2] = 0xc1;
                                sendbuf[3] = 0x00;
                                sendbuf[4] = 0x00;
                                sendbuf[1] = sendbuf.length(); //计算命令的长度
                                sendbuf[5] = BgComm::SUMVerify(sendbuf)&0x7f;
                                UserEvent *ue = new UserEvent(CR::CanWriteBuf,this);
                                ue->canid = CAN_ID_TEMPHUM_CONTROLLER;
                                ue->byteArray = sendbuf;
                                qApp->postEvent(canBusThread,ue);
                                websocketTimer->start(2000);
                                break;
                            }
                            //0     1       2       3       4       5       6       7
                            //0xfb  0x07    0xc1    para1   para2   para3   para4   CheckSum
                            /*
                            para1:湿度阈值
                            para2:温度阈值
                            para3:继电器1状态（温湿度加热器）
                            para4:继电器2状态（闸机通风风扇）
                            */
                            case 0xc1:
                            {
                                humThreshold = (quint8)buf.data()[3];
                                tempThreshold = (quint8)buf.data()[4];
                                relay1 = (quint8)buf.data()[5];
                                relay2 = (quint8)buf.data()[6];

                                tempHumReadTimer->start(3000);
                                break;
                            }
                            //0     1       2       3       4       5
                            //0xfb  0x05    0xc2    0x00    0x00    CheckSum
                            case 0xc2:
                            {
                                TicketDebug("ControllerToWebSocketServer read:"+BgComm::ByteArrayToString(buf, 16, true));
                                if(((quint8)buf.data()[3]==0x00)&&((quint8)buf.data()[4]==0x00))
                                {
                                    QByteArray sendbuf;
                                    sendbuf[0] = 0x00;
                                    sendbuf[1] = 0x00;
                                    sendbuf[2] = 0x00;
                                    sendbuf[3] = 0x00;
                                    sendbuf[4] = humThresholdBuf;
                                    sendbuf[5] = tempThresholdBuf;
                                    sendbuf[6] = 0x00;
                                    sendbuf[7] = 0x00;
                                    UserEvent *ue = new UserEvent(CR::WebSocketServerToWebSocketClient,this);
                                    ue->byteArray = sendbuf;
                                    qApp->postEvent(websocketserver,ue);
                                    setTempHumThreshold = 0;
                                }
                                if(((quint8)buf.data()[3]==0xff)||((quint8)buf.data()[4]==0xff))
                                {
                                    TicketDebug("WebSocketServerToController set error!");

                                    QByteArray sendbuf;
                                    sendbuf[0] = 0xfc;
                                    sendbuf[1] = 0x00;
                                    sendbuf[2] = 0xfc;
                                    sendbuf[3] = 0x00;
                                    sendbuf[4] = 0x00;
                                    sendbuf[5] = 0x00;
                                    sendbuf[6] = 0x00;
                                    sendbuf[7] = 0x00;
                                    UserEvent *ue = new UserEvent(CR::WebSocketServerToWebSocketClient,this);
                                    ue->byteArray = sendbuf;
                                    qApp->postEvent(websocketserver,ue);
                                }

                                tempHumReadTimer->start(3000);
                                break;
                            }
                            default:break;
                        }
                        break;
                    }
                    default:break;
                }
                break;
            }
            case CR::FACE:
            {
                switch(ue->type)
                {
                    case 0x01://比对结果
                    {
                        if(!faceenable)
                        {
                            TicketDebug("face disable");
                            break;
                        }
                        if(FaceTimerOutflag)
                        {
                            FaceTimerOutflag=0;//标志位清零1    1-人脸返回数据超时清零 2-回到待机状态清零
                            TicketDebug("FaceTimerout  FACE data invaild");
                            break;
                        }
                        faceTimer->stop();
                        sendtofaceflag=0;

                        if(checkTicketState == 1 && picApplyingMode == 0x03)//防止在录的过程中，有人比对成功
                        {
                            UiTicketstatusDisplay(pleasewait);
                            break;
                        }
                        if(!tcpConnectFlag)
                        {
                            UiTicketstatusDisplay(checknetwork);
                            break;
                        }


                        ticketInfostr = ue->ticketInfostr;
                        if(ue->ticketnore.length())//有值说明是人脸比对返回的，没有说明是人脸处理第二条结果
                        {
                            ticketArray = ue->ticketnore.split(0x3B);//;
                        }
                        for(int k=0;k<ticketArray.count();k++)
                            emit TicketDebug(QString("ticketArray[%1]:").arg(k)+QString(ticketArray.at(k)));
                        ticketData = ticketArray.at(0);
                        QString str=ticketData;

                        if(str.indexOf("_IC")>=0)
                        {
                            ticketData = ticketData.mid(str.lastIndexOf("_")+1,str.length()-str.lastIndexOf("_")-1);
                            ticketStyle=0x03;
                            emit TicketDebug(QString("IC:")+(QString)ticketData);
                        }
                        else if(str.indexOf("_BC")>=0)
                        {
                            ticketData = ticketData.mid(str.lastIndexOf("_")+1,str.length()-str.lastIndexOf("_")-1);
                            ticketStyle=0x02;
                            emit  TicketDebug(QString("BC:")+(QString)ticketData);
                        }
                        else if(str.indexOf("_ID")>=0)
                        {
                            ticketData = ticketData.mid(str.lastIndexOf("_")+1,str.length()-str.lastIndexOf("_")-1);
                            ticketStyle=0x04;
                            emit TicketDebug(QString("ID:")+(QString)ticketData);
                        }
                        else
                        {
                            ticketStyle=0x04;
                            emit TicketDebug(QString("ID:")+(QString)ticketData);
                        }


                        switch(ue->result)
                        {
                            case 0x00:
                            {
                                if(picApplyingMode != 0x04)//不是刷票触发,即直接比对
                                {
                                    FaceMatchNum=0;
                                    ticketSource = 0x03;//票来源   0x01:线下订单，0x02：线上订单 ，0x03：其他-比如人脸
                                    TicketFlagValue(1);
                                    switch(ticketStyle)
                                    {
                                        case 0x02:
                                        {
                                            barCodeData = ticketData;
                                            prepare_ipdata_barticket();
                                            break;
                                        }
    //                                        case 0xb1://二维码年卡
    //                                        {
    //                                            serialNumber = ticketData;
    //                                            userNumber.clear();
    //                                            prepare_ipdata_icticket();
    //                                        }
                                        case 0x03://ic
                                        {
                                            serialNumber = BgComm::StringToHex(ticketData);
                                            userNumber.clear();
                                            prepare_ipdata_icticket();
                                            break;
                                        }
                                        case 0x04://id
                                        {
                                            idCard = ticketData;
                                            prepare_ipdata_idticket();
                                            break;
                                        }
                                        default:
                                        {
                                            FaceTicket_Err = 0x03;
                                            UiTicketstatusDisplay(facematchfailure);//针对闸机录的照片，失效
                                            break;
                                        }
                                    }

                                }
                                else
                                {
                                    //以下为刷票比对成功
    #if MODE_1TON == 0
                                    if(ticketStyle == 0x02)//注意条码是否有校验位
                                    {
                                        if(ticketData != barCodeData )
                                        {
                                            TicketDebug("bardata is not match");
                                            UiTicketstatusDisplay(faceticketnotmatch);
                                        }
                                        else
                                        {
                                            UiTicketstatusDisplay(facematchsuccessfully);
                                        }
                                    }
                                    else if(ticketStyle == 0x03)
                                    {
                                        if(BgComm::StringToHex(ticketData) != serialNumber )
                                        {
                                            TicketDebug("icdata is not match");
                                            UiTicketstatusDisplay(faceticketnotmatch);
                                        }
                                        else
                                        {
                                            UiTicketstatusDisplay(facematchsuccessfully);
                                        }
                                    }
                                    else if(ticketStyle == 0x04)
                                    {
                                        if(ticketData != idCard )
                                        {
                                            TicketDebug("iddata is not match");
                                            UiTicketstatusDisplay(faceticketnotmatch);
                                        }
                                        else
                                        {
                                            UiTicketstatusDisplay(facematchsuccessfully);
                                        }
                                    }
                                    else
                                    {
                                         TicketDebug("unknown ticketstyle");
                                    }
    #else
                                    //确认检票以刷的票为准，确认刷的票
                                    if(ticketStyle == 0x02)//注意条码是否有校验位
                                    {
                                        if(ticketData != barCodeData )
                                        {
                                            TicketDebug("bardata is not match");
                                        }
                                    }
                                    else if(ticketStyle == 0x03)
                                    {
                                        if(ticketData.mid(0,4) != serialNumber )
                                        {
                                            TicketDebug("icdata is not match");
                                        }
                                    }
                                    else if(ticketStyle == 0x04)
                                    {
                                        if(ticketData != idCard )
                                        {
                                            TicketDebug("iddata is not match");
                                        }
                                    }
                                    else
                                    {
                                         TicketDebug("unknown ticketstyle");
                                    }
                                    UiTicketstatusDisplay(facematchsuccessfully);
    #endif

                                }
                                break;

                            }
                            case 0x01://比对超时
                            {
                                UiTicketstatusDisplay(facematchtimeout);
                                break;
                            }
                            case 0x02://识别中请保持
                            {
                                UiTicketstatusDisplay(pleasematchface);
                                break;
                            }
                            case 0x03://比对失败
                            {
                                if(picApplyingMode == 0x04)//刷票触发报比对失败,直接比对不响应
                                    UiTicketstatusDisplay(facematchfailure);
                                break;
                            }
                            default://其他提示，不播放语音
                            {
                                UiCheckTicketMsg(Qt::red, ticketInfostr);
                                gateTimer->stop();
                                gateTimer->start(2000);
                                TicketFlagValue(0);
                                break;
                            }
                        }
                        break;
                    }
                    case 0x07://注册结果-----刷票注册
                    {
                        if(!faceenable)
                        {
                            TicketDebug("face disable");
                            break;
                        }
                        if(FaceTimerOutflag)
                        {
                            FaceTimerOutflag=0;//标志位清零1    1-人脸返回数据超时清零 2-回到待机状态清零
                            TicketDebug("FaceTimerout  FACE data invaild");
                            break;
                        }
                        faceTimer->stop();
                        sendtofaceflag = 0;

                        ticketInfostr =  ue->ticketInfostr;

                        switch(ue->result)
                        {
                            case 1000://注册成功
                            {
                                UiTicketstatusDisplay(facerecordedsuccessfully);
                                break;
                            }
                            case 3422://票号已注册----当成成功
                            {
                                UiTicketstatusDisplay(facerecordedalready);
                                break;
                            }
    /*
                            case 3422://票号已注册--失败/已登记
                            {

                                if(ticketStyle == 0x02)
                                    ticketNo = barCodeData;
                                else if(ticketStyle == 0x03 || ticketStyle == 0xb1)
                                    ticketNo = serialNumber;
                                else if(ticketStyle == 0x04)
                                    ticketNo = idCard;
                                else
                                    ticketNo = barCodeData;
                                ticketNoLen = ticketNo.length();
                                ticketNoNum = 1;

                                UiCheckTicketMsg(Qt::red, ticketInfostr);

                                UserEvent *ue = new UserEvent(CR::FACECONFIRM2,this);

                                ue->type  =  0x02;//
                                ue->result = 0x00;//success
                                //ue->ticketid =//检票标识先不传，写死00000000
                                ue->ticketlen = ticketNoLen;
                                ue->ticketnum = ticketNoNum;
                                ue->ticketno  = ticketNo;

                                qApp->postEvent(faceDetect,ue);
                                TicketDebug(QString("------FACECONFIRM   fail------"));


                                TicketFlagValue(0);
                                gateTimer->stop();
                                gateTimer->start(2000);
                                PlayWav(195,800);

                                break;
                            }
    */
                            case 6001:// 6001 登记超时
                            {
                                UiTicketstatusDisplay(facerecordedtimeout);
                                break;
                            }
                            case 6002:// 6002 登记失败
                            {
                                UiTicketstatusDisplay(facerecordedfailure);
                                break;
                            }
                            default://其他-只显示，没语音
                            {
                                UiCheckTicketMsg(Qt::red, ticketInfostr);
                                gateTimer->stop();
                                gateTimer->start(2000);
                                TicketFlagValue(0);

                                break;
                            }
                        }

                        break;
                    }
                    case 0XFF://设备异常
                    {
                        if(!faceenable)
                        {
                            TicketDebug("face disable");
                            break;
                        }
                        UiTicketstatusDisplay(facedeviceerr);
                        break;
                    }
                    case 0XFE://设备ok
                    {
                        if(!faceenable)
                        {
                            TicketDebug("face disable");
                            break;
                        }
                        UiTicketstatusDisplay(facedeviceok);
                        break;
                    }
                }
                break;
            }
            case CR::TencentFace://腾讯高铁人证比对
            {
                if(FaceTimerOutflag)
                {
                    FaceTimerOutflag=0;//标志位清零1    1-人脸返回数据超时清零 2-回到待机状态清零
                    TicketDebug("FaceTimerout  face data invaild");
                    break;
                }
                faceTimer->stop();
                ticketStyle = ue->type;
                ticketData = ue->byteArray;
                ticketStyle = 0x0a;//kaoqin-2  ceshi-0a
                if(ue->result == 0x00)
                {
                    UiTicketstatusDisplay(facematchsuccessfully);
                }
                else if(ue->result == 0x09)
                {
                    UiTicketstatusDisplay(facematchtimeout);
                }
                else
                {
                    FaceTicket_Err = ue->result;
                    UiTicketstatusDisplay(facematchfailure);
                }
                break;
            }
            case CR::ArcFace:
            {
                if(FaceTimerOutflag)
                {
                    FaceTimerOutflag=0;//标志位清零1    1-人脸返回数据超时清零 2-回到待机状态清零
                    TicketDebug("FaceTimerout  face data invaild");
                    break;
                }
                faceTimer->stop();
                ticketStyle = ue->type;//4
                //ticketStyle = 0x02;//kaoqin 02  ARC 0a
                ticketData = ue->byteArray;
                if(picApplyingMode == 0x04)//刷票人证比对
                {
                    if(ue->result == 0x00)
                    {
                         UiTicketstatusDisplay(facematchsuccessfully);
                    }
                    else if(ue->result == 0x09)
                    {
                         UiTicketstatusDisplay(facematchtimeout);
                    }
                    else
                    {
                        FaceTicket_Err = ue->result;
                        UiTicketstatusDisplay(facematchfailure);
                    }
                }
                else//直接比对
                {
                    //ticketStyle = 0x0a;//arctest 0a   kaoqin 02
                    ticketSource = 0x03;
                    switch(ticketStyle)
                    {
                        case 0x02:
                        {
                            barCodeData = ticketData;
                            prepare_ipdata_barticket();
                            break;
                        }
                        case 0x03://ic
                        {
                            serialNumber = BgComm::StringToHex(ticketData);
                            userNumber.clear();
                            prepare_ipdata_icticket();
                            break;
                        }
                        case 0x04://id
                        {
                            idCard = ticketData;
                            prepare_ipdata_idticket();
                            break;
                        }
                        default:
                        {
                            break;
                        }
                    }
                }
                break;;
            }
            case CR::BaiduFace:
            {
                if(FaceTimerOutflag)
                {
                    FaceTimerOutflag=0;//标志位清零1    1-人脸返回数据超时清零 2-回到待机状态清零
                    TicketDebug("FaceTimerout  face data invaild");
                    break;
                }
                faceTimer->stop();
                ticketStyle = ue->type;//4
                ticketData = ue->byteArray;
                FaceMatchNum = 0;
                if(ue->result == 0x00)
                {
                    UiTicketstatusDisplay(facematchsuccessfully);
                }
                else if(ue->result == 0x09)
                {
                    UiTicketstatusDisplay(facematchtimeout);
                }
                else
                {
                    FaceTicket_Err = ue->result;
                    UiTicketstatusDisplay(facematchfailure);
                }
                break;
            }
            default:
                break;
        }
    }
    else
        return QWidget::event(event);
    return true;
}
void Form::paintEvent(QPaintEvent *)
{
#if ARM_LINUX
    if(camerRunFlag)
    {
        videoDevice->getframe(pp);
        frame->loadFromData((uchar *)pp,/*len*/640 * 480 * 3 * sizeof(char));

        QPixmap pix;
        pix = QPixmap::fromImage(*frame,Qt::AutoColor);
        pix = pix.scaled(380,285,Qt::KeepAspectRatio);
        ui->label_ccddebug->setPixmap(pix);
    }

    if(detectFlag)
    {
        for(quint8 i=0; i<3; i++)
            videoDevice->getframe(pp);
        frame->loadFromData((uchar *)pp,/*len*/640 * 480 * 3 * sizeof(char));

        //QImage转IplImage
        IplImage* src = QImageToIplImage(frame);
        if (!src)
        {
            printf("img error!");
            return;
        }

        //压缩图像大小，提升人脸检测的速度
        double sizeScale = imgSizeScaleSmall;
        CvSize img_cvsize;
        img_cvsize.width = src->width * sizeScale;
        img_cvsize.height = src->height * sizeScale;
        IplImage* dst = cvCreateImage(img_cvsize, src->depth, src->nChannels);
        cvResize(src, dst, CV_INTER_LINEAR);

        DetectAndDraw(dst);   //实现人脸检测

        //恢复原图像大小，但图像分辨率有所下降，图像较原始图像模糊
        //（亦可用原始图像直接显示，但ARM处理资源有限，不建议耗费太多资源，除此之外暂时还没想到更好的处理方式）
        sizeScale = imgSizeScaleBig;
        img_cvsize.width = dst->width * sizeScale;
        img_cvsize.height = dst->height * sizeScale;
        IplImage* img = cvCreateImage(img_cvsize, dst->depth, dst->nChannels);
        cvResize(dst, img, CV_INTER_LINEAR);

        //IplImage转QImage
        QImage qimage = IplImageToQImage(img);

        pixPic = QPixmap::fromImage(qimage);
        pixPic = pixPic.scaled(380,285,Qt::KeepAspectRatio);
        UiPicDisplay(picdis);

        if(okflag)
        {
            videoTimer->stop();
            videoTimer->start(300);

            detectFlag = 0;
            okflag = 0;
            QImage qframe = *frame;
            pixPic = QPixmap::fromImage(qframe.rgbSwapped(),Qt::AutoColor);
            //qDebug("pixPic.width() = %d,pixPic.height() = %d",pixPic.width(),pixPic.height());
            //qDebug("%d %d %d %d %d",imgSizeScaleBig,(P1.x)*imgSizeScaleBig, P1.y*imgSizeScaleBig, (P2.x-P1.x)*imgSizeScaleBig, (P2.y-P1.y)*imgSizeScaleBig);
            pixPic = pixPic.copy(P1.x*imgSizeScaleBig, P1.y*imgSizeScaleBig, (P2.x-P1.x)*imgSizeScaleBig, (P2.y-P1.y)*imgSizeScaleBig);
            pixPic = pixPic.scaled(180,240,Qt::KeepAspectRatio);
            UiPicDisplay(picdis);

            pixPic.save(PGPIX_JPG_FILEPATH);
            prepare_ipdata_sendjpg();
        }

        cvReleaseImage(&src);//释放图片内存
        cvReleaseImage(&dst);
        cvReleaseImage(&img);
    }

#endif
    QPainter painter(this);
    //painter.drawPixmap(0,0,topbackgroundPix);
    //painter.drawPixmap(0,80,backgroundPix);
    //painter.drawPixmap(0,uiHeiht-60,bottombackgroundPix);
    //int width = ui->frame_vermsg->width();
    //painter.drawPixmap(width,uiHeiht-60,thbackgroundPix);
    painter.drawPixmap(0,0,backgroundPix);


    if(setStyleSheetTopBottom == 0)
    {
        setStyleSheetTopBottom = 1;
        UiLabelLightDarkColorJudge(ui->label_partnofield, 0, ui->frame_top->y(), "label_partnofield");
        UiLabelLightDarkColorJudge(ui->label_partno, 0, ui->frame_top->y(), "label_partno");
        UiLabelLightDarkColorJudge(ui->label_gatenofield, 0, ui->frame_top->y(), "label_gatenofield");
        UiLabelLightDarkColorJudge(ui->label_gateno, 0, ui->frame_top->y(), "label_gateno");
        UiLabelLightDarkColorJudge(ui->label_wellcome, ui->frame_welcome->x(), ui->frame_top->y(), "label_wellcome");
        UiLabelLightDarkColorJudge(ui->label_systime, ui->frame_systime->x(), ui->frame_top->y(), "label_systime");
        UiLabelLightDarkColorJudge(ui->label_ipfield, 0, ui->frame_bottom->y(), "label_ipfield");
        UiLabelLightDarkColorJudge(ui->label_ip, 0, ui->frame_bottom->y(), "label_ip");
        UiLabelLightDarkColorJudge(ui->label_verfield, 0, ui->frame_bottom->y(), "label_verfield");
        UiLabelLightDarkColorJudge(ui->label_ver, 0, ui->frame_bottom->y(), "label_ver");
        UiLabelLightDarkColorJudge(ui->label_todaypernumfield, 0, ui->frame_bottom->y(), "label_todaypernumfield");
        UiLabelLightDarkColorJudge(ui->label_todaypernum, 0, ui->frame_bottom->y(), "label_todaypernum");
        UiLabelLightDarkColorJudge(ui->label_parkpernumfield, 0, ui->frame_bottom->y(), "label_parkpernumfield");
        UiLabelLightDarkColorJudge(ui->label_parkpernum, 0, ui->frame_bottom->y(), "label_parkpernum");
        UiLabelLightDarkColorJudge(ui->label_temperature, ui->frame_temphum->x(), ui->frame_bottom->y(), "label_temperature");
        UiLabelLightDarkColorJudge(ui->label_humidity, ui->frame_temphum->x(), ui->frame_bottom->y(), "label_humidity");
        UiLabelLightDarkColorJudge(ui->label_fan, ui->frame_temphum->x(), ui->frame_bottom->y(), "label_fan");
        UiLabelLightDarkColorJudge(ui->label_heat, ui->frame_temphum->x(), ui->frame_bottom->y(), "label_heat");
        UiLabelLightDarkColorJudge(ui->label_barcode, ui->frame_barcodeanddev->x(), ui->frame_bottom->y(), "label_barcode");
    }

    if(ifSt == standby)
    {
        if(setStyleSheetStandby == 0)
        {
            setStyleSheetStandby = 1;
            UiLabelLightDarkColorJudge(ui->label_currenttime, 0, ui->frame_standby->y(), "label_currenttime");
            UiLabelLightDarkColorJudge(ui->label_currentdate, 0, ui->frame_standby->y(), "label_currentdate");
        }
    }
    //用于产生秒脉冲信号
    int second = QTime::currentTime().second();
    if(second == secondbuf)
        return;
    secondbuf = second;
    UiTimeUpdate(second);

    UiTempHumIconUpdate(second);
    UiTempHumUpdate(tempH, tempL, humH, humL);
}
QColor Form::UihueJudge(QImage image, bool lightOrDarkColor)
{
    //色调的总和
    int sum_hue = 0;
    //色差的阈值
    int threshold = 30;

    int h,w,hue;

    //计算色调总和
    for (h = 0; h < image.height(); h++)
    {
        for (w = 0; w < image.width(); w++)
        {
            hue = QColor(image.pixel(w,h)).toHsv().hue();
            sum_hue += hue;
        }
    }
    //qDebug("-------------------sum_hue = %d",sum_hue);
    int avg_hue = sum_hue / (image.width() * image.height());
    //qDebug("-------------------avg_hue = %d",avg_hue);
    //色差大于阈值的颜色值
    QList<QColor> rgbs;
    QColor color;
    for (h = 0; h < image.height(); h++)
    {
        for (w = 0; w < image.width(); w++)
        {
            color = QColor(image.pixel(w,h));
            hue = color.toHsv().hue();
            //如果色差大于阈值，则加入列表
            if (qAbs(hue - avg_hue) > threshold)
            {
                rgbs.append(color);
            }
        }
    }

    //qDebug("rgbs.count() = %d",rgbs.count());

    if(rgbs.count() == 0)
    {
        if(lightOrDarkColor)
           return QColor(235, 235, 235);
        else
           return QColor(60, 60, 60);
    }

    int sum_r = 0, sum_g = 0, sum_b = 0;
    int i;
    for(i=0; i<rgbs.count(); i++)
    {
        sum_r += rgbs.at(i).red();
        sum_g += rgbs.at(i).green();
        sum_b += rgbs.at(i).blue();
    }
    return QColor(sum_r/rgbs.count(), sum_g/rgbs.count(), sum_b/rgbs.count());
}
bool Form::UiBackGroundImageLightDarkColorJudge(QImage *image)
{
    bool lightOrDarkColor;
    QImage backgroundImageCalc = *image;
    backgroundImageCalc = backgroundImageCalc.scaled(uiWidth/10, uiHeiht/10, Qt::IgnoreAspectRatio);;
    int lightColorNum = 0;
    int i,j,num;
    for (i = 0; i < backgroundImageCalc.width(); ++i)
    {
        for(j = 0; j < backgroundImageCalc.height(); ++j)
        {
            num = ((backgroundImageCalc.pixel(i,j)&0x00ff0000)>>16) + ((backgroundImageCalc.pixel(i,j)&0x0000ff00)>>8) + (backgroundImageCalc.pixel(i,j)&0x000000ff);
            if(num > 382)
                lightColorNum++;
        }
    }
    if(lightColorNum > (backgroundImageCalc.width()*backgroundImageCalc.height())/2)
    {
        //qDebug()<<"------------------lightColorNum";
        lightOrDarkColor = 1;
    }
    else
    {
        //qDebug()<<"------------------darkColorNum";
        lightOrDarkColor = 0;
    }

    QVector<QRgb> rgbVector = image->colorTable();
    QRgb rgb2;
    for (i = 0; i < rgbVector.size(); ++i)
    {
        if(rgbVector.at(i) == QColor(255,255,255).rgba())
        {
            if(lightOrDarkColor)
                rgb2 = QColor(54,54,77).rgba();
            else
                rgb2 = QColor(220,220,220).rgba();//替换的颜色可以是透明的，比如QColor(0,255,0，0)。
            image->setColor(i,rgb2);
        }
    }
    return lightOrDarkColor;
}
void Form::UiLabelLightDarkColorJudge(QLabel *label, int offsetX, int offsetY, QString str)
{
    //qDebug()<<"----------------------------------"+str;

    //qDebug("offsetX=%d,offsetY=%d",offsetX,offsetY);

    int labelx = label->x() + offsetX;
    int labely = label->y() + offsetY;

    //qDebug("labelx=%d,labely=%d",labelx,labely);
    //qDebug("label->width()=%d,label->height()=%d",label->width(),label->height());

    int lightColorNum = 0;
    //qDebug("labelx+label->width() = %d",labelx+label->width());
    //qDebug("labely+label->height() = %d",labely+label->height());

    //qDebug("backgroundImage.width() = %d,backgroundImage.height() = %d",backgroundImage.width(),backgroundImage.height());

    //QImage image = backgroundImage.copy(labelx,labely,label->width(),label->height());

    //image.save(QString("/usr/sendinfo/%1.jpg").arg(str));
    int i,j,num;
    for ( i = labelx; (i < (labelx+label->width()))&&(i < backgroundImage.width()); ++i)
    {
        for( j = labely; (j < (labely+label->height()))&&(j < backgroundImage.height()); ++j)
        {
            num = ((backgroundImage.pixel(i,j)&0x00ff0000)>>16) + ((backgroundImage.pixel(i,j)&0x0000ff00)>>8) + (backgroundImage.pixel(i,j)&0x000000ff);
            if(num > 382)
                lightColorNum++;
        }
    }
    //qDebug("lightColorNum = %d",lightColorNum);
    QRgb rgb2;
    if(lightColorNum > (label->width()*label->height())/2)
    {
        //qDebug()<<"===============lightColorNum";
        label->setStyleSheet("color:rgb(0,0,0);background-color: rgba(230,230,230,0);");
        QVector<QRgb> rgbVector = backgroundImage.colorTable();

        for (int i = 0; i < rgbVector.size(); ++i)
        {
            if(rgbVector.at(i) == QColor(0,0,0).rgba())
            {
                rgb2 = QColor(54,54,77).rgba();//替换的颜色可以是透明的，比如QColor(0,255,0，0)。
                backgroundImage.setColor(i,rgb2);
            }
        }
    }
    else
    {
        //qDebug()<<"================darkColorNum";
        label->setStyleSheet("color:rgb(255,255,255);background-color: rgba(230,230,230,0);");
        QVector<QRgb> rgbVector = backgroundImage.colorTable();
        for ( i = 0; i < rgbVector.size(); ++i)
        {
            if(rgbVector.at(i) == QColor(255,255,255).rgba())
            {
                rgb2 = QColor(220,220,220).rgba();//替换的颜色可以是透明的，比如QColor(0,255,0，0)。
                backgroundImage.setColor(i,rgb2);
            }
        }
    }
    //qDebug()<<"+++++++++++++++++++++++++++++++++++"+str;
}
void Form::UiLanguageSwitch()
{
    bool ok;

    language = qs->value("Language",1).toInt(&ok);
    if(!ok)
    {
        language = 1;
    }
    switch(language)
    {
        case 1:
            appTranslator.load ("/opt/language/Cn.qm");
            break;
        case 2:
            appTranslator.load ("/opt/language/En.qm");
            break;
        case 3:
            appTranslator.load ("/opt/language/Fr.qm");
            break;
        default:
            language = 1;
            appTranslator.load ("/opt/language/Cn.qm");
            break;
    }
    QApplication::instance()->installTranslator(&appTranslator);

    font.setFamily("Ubuntu");
    font.setBold(false);
    switch(language)
    {
        case 1:fontScale = 1.0;break;
        case 2:fontScale = 1.5;break;
        case 3:fontScale = 1.5;break;
        default:fontScale = 1.0;break;
    }
}
void Form::UiInit()
{
    bool ok;

    P04_DisplayType = qs->value("P04_DisplayType",1).toInt(&ok);
    if(!ok)
    {
        P04_DisplayType = 4;
    }
    switch(P04_DisplayType)
    {
        case 0x01:
        case 0x02:
        case 0x03:
            uiWidth = 640;
            uiHeiht = 480;
            break;
        case 0x04:
            uiWidth = 800;
            uiHeiht = 480;
            break;
        default:
            uiWidth = 800;
            uiHeiht = 480;
            break;
    }
    ui->frame_top->resize(uiWidth,80);
    ui->frame_check->resize(uiWidth,uiHeiht-140);
    ui->frame_netccd->resize(uiWidth,uiHeiht-140);
    ui->frame_standby->resize(uiWidth,uiHeiht-140);
    ui->frame_bottom->resize(uiWidth,60);

    backgroundImage.load(BGPIX_FILEPATH);
    backgroundImage = backgroundImage.scaled(uiWidth, uiHeiht, Qt::IgnoreAspectRatio);

    bool lightOrDarkColor = UiBackGroundImageLightDarkColorJudge(&backgroundImage);

    QColor hueColor =  UihueJudge(backgroundImage, lightOrDarkColor);
    //qDebug("red= %d",hueColor.red());
    //qDebug("green = %d",hueColor.green());
    //qDebug("blue = %d",hueColor.blue());
    ui->frame_top->setStyleSheet(QString("background-color: rgba(%1,%2,%3,30%)").arg(hueColor.red()).arg(hueColor.green()).arg(hueColor.blue()));
    ui->frame_bottom->setStyleSheet(QString("background-color: rgba(%1,%2,%3,30%)").arg(hueColor.red()).arg(hueColor.green()).arg(hueColor.blue()));
    setStyleSheetTopBottom = 0;
    setStyleSheetStandby = 0;

    //backgroundImage.save("/usr/sendinfo/test.jpg");
    //QPixmap full = QPixmap::grabWindow(QApplication::desktop()->winId());
    //full.save("/usr/sendinfo/test.jpg","jpg");
    backgroundPix = QPixmap::fromImage(backgroundImage);

    ui->label_hostipfield->setText(tr("本机IP："));
    ui->label_serveripfield->setText(tr("服务器地址："));
    ui->label_serverportfield->setText(tr("服务器端口："));
    ui->label_ftpipfield->setText(tr("FTP地址："));
    ui->label_ftpportfield->setText(tr("FTP端口："));
    ui->label_gatewayfield->setText(tr("网关："));
    ui->label_macfield->setText(tr("MAC："));
    ui->label_netmsg->setText(tr("检查网络参数"));

    ui->label_partnofield->setText(tr("景点："));
    ui->label_gatenofield->setText(tr("通道："));

    QString str;
    if(P05_GateMode==0x03)
    {
        str = tr("欢迎再次光临");
        ui->label_wellcome->setText(str);
    }
    else
    {
        str = tr("欢迎光临");
        ui->label_wellcome->setText(str);
    }
    int labelSize;
    labelSize = ui->frame_top->width()-ui->frame_scenic->width()-ui->frame_systime->width();
    labelSize = int(fontScale*labelSize/str.length());
    font.setPixelSize((labelSize > 70) ?  70 : labelSize);
    ui->label_wellcome->setFont(font);

    UiTimeUpdate(0);

    ui->label_ticketnofield->setText(tr("票号"));
    ui->label_tickettypefield->setText(tr("票型"));
    ui->label_tickettimefield->setText(tr("时间"));
    ui->label_ticketpernumfield->setText(tr("已检数"));
    ui->label_ticketinform->setText(tr("剩0"));
    ui->label_fingermsg->setText(tr("指纹数据"));
    ui->label_picmsg->setText(tr("照片数据"));

    UiVerIpUpdate();
    ui->label_ipfield->setText(tr("IP："));
    ui->label_verfield->setText(tr("版本："));
    ui->label_todaypernumfield->setText(tr("当日人数："));
    ui->label_parkpernumfield->setText(tr("反向通行人数："));//在园人数 反向通行人数
#if PARKPERNUMCLOSE
    ui->label_parkpernumfield->setText(tr("在园人数:"));
    ui->label_parkpernumfield->hide();
    ui->label_parkpernum->hide();
#else

    if(P05_GateMode == 0x03 || P05_GateMode == 0x02 )
    {
        ui->label_parkpernumfield->show();
        ui->label_parkpernum->show();
    }
    else
    {
        ui->label_parkpernumfield->hide();
        ui->label_parkpernum->hide();
    }
#endif


    ui->label_fan->setText(tr("风扇"));
    ui->label_heat->setText(tr("加热"));
    UiTempHumState(use);

    UiPeripheralState(all, use);

    HsSaveTicketNum(0, 0xff);

    picDisFlag = 0;
    fingerDisFlag = 0;
    movieFlag = 0;

    checkingMovie = new QMovie;
    checkingMovie->setFileName("/opt/icon/checking.gif");
    fingerMovie = new QMovie;
    fingerMovie->setFileName("/opt/icon/fingercheck.gif");
    checkokMovie = new QMovie;
    checkokMovie->setFileName("/opt/icon/checkok.gif");
    faceMovie = new QMovie;
    faceMovie->setFileName("/opt/icon/facescan.gif");
}
void Form::UiPartAndGateUpdate(QByteArray t)
{
    quint8 i;
    for(i=0;i<t.size();i++)
    {
        if((quint8)t.data()[i] != 0x00)
        {
            break;
        }
    }
    QString str = codec->toUnicode(t.mid(i,t.size()-i));
#if PROTOCOLVER == NEWPROTOCOL
    if(str.size() == 0)
        ui->label_partno->setText(BgComm::ByteArrayToString(P22_PartNoGuid));
    else
        ui->label_partno->setText(str);
#else
    ui->label_partno->setText(QString("%1").arg(P22_PartNo));
#endif
    ui->label_gateno->setText(QString("%1").arg(P23_GateNo));

    int labelSize;
    labelSize = ui->label_partno->width();
    labelSize = int(fontScale*labelSize/str.length());
    font.setPixelSize((labelSize > 16) ?  16 : labelSize);
    ui->label_partno->setFont(font);
}
void Form::UiTimeUpdate(int second)
{
    QString weekstr;
    weekstr = QDate::currentDate().toString("ddd");
    QString week = "Mon,Tue,Wed,Thu,Fri,Sat,Sun";
    switch(week.indexOf(weekstr))
    {
        case 0:weekstr = tr("星期一");break;
        case 4:weekstr = tr("星期二");break;
        case 8:weekstr = tr("星期三");break;
        case 12:weekstr = tr("星期四");break;
        case 16:weekstr = tr("星期五");break;
        case 20:weekstr = tr("星期六");break;
        case 24:weekstr = tr("星期日");break;
        default:break;
    }
    //系统显示时间
    QString time;
    time = QDate::currentDate().toString("yyyy-MM-dd\n");
    time += weekstr;
    time += QTime::currentTime().toString(" hh:mm:ss");
    ui->label_systime->setText(time);
    if(ifSt == standby)
    {
        //待机显示时间
        time = QTime::currentTime().toString("hh:mm");
        if((second % 2) == 0)
            time[2] = ' ';
        ui->label_currenttime->setText(time);
        time = weekstr;
        time += QDate::currentDate().toString("\nyyyy-MM-dd");
        ui->label_currentdate->setText(time);
    }
}
void Form::UiVerIpUpdate()
{
    ui->label_ip->setText(P40_HostIp);
    if(P02_DebugEnable)
    {
        ui->label_verfield->setText(tr("版本："));
        ui->label_ver->setText(APP_VERSION_CODE);
    }
    else
    {
        ui->label_verfield->setText(tr("服务器："));
        ui->label_ver->setText(serverIp);
    }
}
void Form::UiPeripheralState(EquipmentType et, EquipmentStatus es)
{
    QImage *image = new QImage;
    if(image == NULL)
    {
        TicketDebug("image is NULL!");
        return;
    }
    switch(et)
    {
        case net:
        {
            switch(es)
            {
                case init:
                    if(!image->load("/opt/icon/linkerr.png"))
                    {
                        TicketDebug("load /opt/icon/linkerr.png fail!");
                        delete image;
                        return;
                    }
                    ui->label_neticon->setPixmap(QPixmap::fromImage(*image));
                    break;
                case linkok:
                    if(!image->load("/opt/icon/linkok.png"))
                    {
                        TicketDebug("load /opt/icon/linkok.png fail!");
                        delete image;
                        return;
                    }
                    ui->label_neticon->setPixmap(QPixmap::fromImage(*image));
                    break;
                case linkerr:
                    if(!image->load("/opt/icon/linkerr.png"))
                    {
                        TicketDebug("load /opt/icon/linkerr.png fail!");
                        delete image;
                        return;
                    }
                    ui->label_neticon->setPixmap(QPixmap::fromImage(*image));
                    break;
                case notuse:
                    ui->label_neticon->hide();
                    break;
                default:break;
            }
            break;
        }
        case finger:
        {
            switch(es)
            {
                case init:
                    if(!image->load("/opt/icon/fingererr.png"))
                    {
                        TicketDebug("load /opt/icon/fingererr.png fail!");
                        delete image;
                        return;
                    }
                    ui->label_fingericon->setPixmap(QPixmap::fromImage(*image));
                    break;
                case linkok:
                    if(!image->load("/opt/icon/fingerok.png"))
                    {
                        TicketDebug("load /opt/icon/fingerok.png fail!");
                        delete image;
                        return;
                    }
                    ui->label_fingericon->setPixmap(QPixmap::fromImage(*image));
                    break;
                case linkerr:
                    if(!image->load("/opt/icon/fingererr.png"))
                    {
                        TicketDebug("load /opt/icon/fingererr.png fail!");
                        delete image;
                        return;
                    }
                    ui->label_fingericon->setPixmap(QPixmap::fromImage(*image));
                    break;
                case notuse:
                    ui->label_fingericon->hide();
                    break;
                default:break;
            }
            break;
        }
        case gate:
        {
            switch(es)
            {
                case init:
                {
                    switch(P06_GateType)
                    {
                        case 0x01:
                        {
                            if(!image->load("/opt/icon/rollinggateerr.png"))
                            {
                                TicketDebug("load /opt/icon/rollinggateerr.png fail!");
                                delete image;
                                return;
                            }
                            break;
                        }
                        case 0x02:
                        {
                            if(!image->load("/opt/icon/swinggateerr.png"))
                            {
                                TicketDebug("load /opt/icon/swinggateerr.png fail!");
                                delete image;
                                return;
                            }
                            break;
                        }
                        case 0x03:
                        {
                            if(!image->load("/opt/icon/winggateerr.png"))
                            {
                                TicketDebug("load /opt/icon/winggateerr.png fail!");
                                delete image;
                                return;
                            }
                            break;
                        }
                        default:
                        {
                            if(!image->load("/opt/icon/rollinggateerr.png"))
                            {
                                TicketDebug("load /opt/icon/rollinggateerr.png fail!");
                                delete image;
                                return;
                            }
                            break;
                        }
                    }
                    ui->label_gateicon->setPixmap(QPixmap::fromImage(*image));
                    break;
                }
                case linkok:
                {
                    switch(P06_GateType)
                    {
                        case 0x01:
                        {
                            if(!image->load("/opt/icon/rollinggateok.png"))
                            {
                                TicketDebug("load /opt/icon/rollinggateok.png fail!");
                                delete image;
                                return;
                            }
                            break;
                        }
                        case 0x02:
                        {
                            if(!image->load("/opt/icon/swinggateok.png"))
                            {
                                TicketDebug("load /opt/icon/swinggateok.png fail!");
                                delete image;
                                return;
                            }
                            break;
                        }
                        case 0x03:
                        {
                            if(!image->load("/opt/icon/winggateok.png"))
                            {
                                TicketDebug("load /opt/icon/winggateok.png fail!");
                                delete image;
                                return;
                            }
                            break;
                        }
                        default:
                        {
                            if(!image->load("/opt/icon/rollinggateok.png"))
                            {
                                TicketDebug("load /opt/icon/rollinggateok.png fail!");
                                delete image;
                                return;
                            }
                            break;
                        }
                    }
                    ui->label_gateicon->setPixmap(QPixmap::fromImage(*image));
                    break;
                }
                case linkerr:
                {
                    switch(P06_GateType)
                    {
                        case 0x01:
                        {
                            if(!image->load("/opt/icon/rollinggateerr.png"))
                            {
                                TicketDebug("load /opt/icon/rollinggateerr.png fail!");
                                delete image;
                                return;
                            }
                            break;
                        }
                        case 0x02:
                        {
                            if(!image->load("/opt/icon/swinggateerr.png"))
                            {
                                TicketDebug("load /opt/icon/swinggateerr.png fail!");
                                delete image;
                                return;
                            }
                            break;
                        }
                        case 0x03:
                        {
                            if(!image->load("/opt/icon/winggateerr.png"))
                            {
                                TicketDebug("load /opt/icon/winggateerr.png fail!");
                                delete image;
                                return;
                            }
                            break;
                        }
                        default:
                        {
                            if(!image->load("/opt/icon/rollinggateerr.png"))
                            {
                                TicketDebug("load /opt/icon/rollinggateerr.png fail!");
                                delete image;
                                return;
                            }
                            break;
                        }
                    }
                    ui->label_gateicon->setPixmap(QPixmap::fromImage(*image));
                    break;
                }
                case notuse:
                    ui->label_gateicon->hide();
                    break;
                default:break;
            }
            break;
        }
        case rfid:
        {
            switch(es)
            {
                case init:
                    image->load("/opt/icon/idreaderr.png");
                    ui->label_rfidicon->setPixmap(QPixmap::fromImage(*image));
                    break;
                case linkok:
                    image->load("/opt/icon/idreadok.png");
                    ui->label_rfidicon->setPixmap(QPixmap::fromImage(*image));
                    break;
                case linkerr:
                    image->load("/opt/icon/idreaderr.png");
                    ui->label_rfidicon->setPixmap(QPixmap::fromImage(*image));
                    break;
                case notuse:
                    ui->label_rfidicon->hide();
                    break;
                default:break;
            }
            break;
        }
        case barcode:
        {
            switch(es)
            {
                case init:
                    if(!image->load("/opt/icon/barcodereaderr.png"))
                    {
                        TicketDebug("load /opt/icon/barcodereaderr.png fail!");
                        delete image;
                        return;
                    }
                    ui->label_barcodeicon->setPixmap(QPixmap::fromImage(*image));
                    break;
                case linkok:
                    if(!image->load("/opt/icon/barcodereadok.png"))
                    {
                        TicketDebug("load /opt/icon/barcodereadok.png fail!");
                        delete image;
                        return;
                    }
                    ui->label_barcodeicon->setPixmap(QPixmap::fromImage(*image));
                    break;
                case linkerr:
                    if(!image->load("/opt/icon/barcodereaderr.png"))
                    {
                        TicketDebug("load /opt/icon/barcodereaderr.png fail!");
                        delete image;
                        return;
                    }
                    ui->label_barcodeicon->setPixmap(QPixmap::fromImage(*image));
                    break;
                case notuse:
                    ui->label_barcodeicon->hide();
                    break;
                default:break;
            }
            break;
        }
        case all:
        {
            switch(es)
            {
                case use:
                    ui->frame_devstate->show();
                    break;
                case notuse:
                    ui->frame_devstate->hide();
                    break;
                default:break;
            }
            break;
        }
        default:break;
    }
    delete image;
}
void Form::UiTempHumIconUpdate(int second)
{
    if(!temphumEnableFlag)
        return;

    QImage *image = new QImage;
    if(image == NULL)
    {
        TicketDebug("image is NULL!");
        return;
    }

    if(relay2 == 1)
    {
        if(second%2)
        {
            if(!image->load("/opt/icon/fan1.png"))
            {
                TicketDebug("load /opt/icon/fan1.png fail!");
                delete image;
                return;
            }
        }
        else
        {
            if(!image->load("/opt/icon/fan2.png"))
            {
                TicketDebug("load /opt/icon/fan2.png fail!");
                delete image;
                return;
            }
        }
        ui->label_fanicon->setPixmap(QPixmap::fromImage(*image));
    }
    else
    {
        if(tempOverFlagBuf)
        {
            if(!image->load("/opt/icon/fan.png"))
            {
                TicketDebug("load /opt/icon/fan.png fail!");
                delete image;
                return;
            }
            ui->label_fanicon->setPixmap(QPixmap::fromImage(*image));
        }
    }
    tempOverFlagBuf = relay2;

    if(relay1 == 1)
    {
        if(second%2)
        {
            if(!image->load("/opt/icon/heat1.png"))
            {
                TicketDebug("load /opt/icon/heat1.png fail!");
                delete image;
                return;
            }
        }
        else
        {
            if(!image->load("/opt/icon/heat2.png"))
            {
                TicketDebug("load /opt/icon/heat2.png fail!");
                delete image;
                return;
            }
        }
        ui->label_heaticon->setPixmap(QPixmap::fromImage(*image));
    }
    else
    {
        if(humOverFlagBuf)
        {
            if(!image->load("/opt/icon/heat.png"))
            {
                TicketDebug("load /opt/icon/heat.png fail!");
                delete image;
                return;
            }
            ui->label_heaticon->setPixmap(QPixmap::fromImage(*image));
        }
    }
    humOverFlagBuf = relay1;

    delete image;
}
void Form::UiTempHumUpdate(int temph, int templ, int humh, int huml)
{
    if(!temphumEnableFlag)
        return;

    switch(temph)
    {
        case 0xff:ui->label_temperature->setText("xxx");break;
        case 0xfe:ui->label_temperature->setText("---");break;
        case 0xfd:ui->label_temperature->setText("eee");break;
        default:
        {
            if(temph & 0x80)
            {
                temph -= 0x80;
                ui->label_temperature->setText(QString("-%1.%2℃").arg(temph).arg(templ));
            }
            else
            {
                ui->label_temperature->setText(QString("%1.%2℃").arg(temph).arg(templ));
            }
            break;
        }
    }
    switch(humh)
    {
        case 0xff:ui->label_humidity->setText("xxx");break;
        case 0xfe:ui->label_humidity->setText("---");break;
        case 0xfd:ui->label_humidity->setText("eee");break;
        default:ui->label_humidity->setText(QString("%1.%2%").arg(humh).arg(huml));break;
    }
}
void Form::UiTempHumState(EquipmentStatus es)
{
    switch(es)
    {
        case use:
            ui->frame_temphum->show();
            temphumEnableFlag = 1;
            WebSocketServerInit();
            tempOverFlagBuf = 0;
            humOverFlagBuf = 0;
            tempHumReadTimer->start(3000);
            break;
        case notuse:
            ui->frame_temphum->hide();
            temphumEnableFlag = 0;
            break;
        default:break;
    }
}
void Form::UiChange(Interfacestatus Is)
{
    switch(Is)
    {
        case check:
        {
            ui->frame_netccd->hide();
            ui->frame_standby->hide();
            if(!picDisFlag)
                ui->frame_pic->hide();
            if(!fingerDisFlag)
                ui->frame_finger->hide();
            ui->frame_check->show();
            break;
        }
        case netmsg:
        {
            ui->label_hostip->setText(P40_HostIp);
            ui->label_serverip->setText(P50_ServerIp);
            ui->label_serverport->setNum(P54_ServerPort);
            ui->label_gateway->setText(P48_GetwayIp);
            ui->label_mac->setText(P30_Mac);

            ui->frame_netccd->show();
            ui->frame_standby->hide();
            ui->frame_check->hide();

            if(camerRunFlag)
                ui->frame_ccddebug->show();
            else
                ui->frame_ccddebug->hide();
            break;
        }
        case standby:
        {
            if(checkTicketState)//防止在检票过程中正好有人过闸机，导致显示界面异常
                return;
            if(movieFlag)
            {
                checkingMovie->stop();
                fingerMovie->stop();
                checkokMovie->stop();
                faceMovie->stop();
                movieFlag = 0;
            }

            fingerDisFlag = 0;
            if(picDisFlag)
                picDisTimer->start(P28_ImageDisGapTime*1000);
            if(passPerNum)//使得应用程序死机后，重新打开检票过人界面
            {
                ifSt = check;
                UiChange(check);
                UiPicDisplay(checkok);
                UiPassPerNumUpdate(passPerNum);
                return;
            }
            else
            {
                ui->frame_netccd->hide();
                ui->frame_standby->show();
                ui->label_ticketno->clear();
                ui->label_tickettype->clear();
                ui->label_tickettime->clear();
                ui->label_ticketpernum->clear();
                ui->label_ticketinform->clear();
                ui->frame_check->hide();
                ui->label_standbymsg->clear();
                ui->label_standbymsg->hide();
            }
            break;
        }
        default:break;
    }
    ifSt = Is;
    UiTimeUpdate(0);
}
void Form::UiCheckTicketMsg(QColor color, QString str)
{
    int labelSize;

    msgcolor = color;
    pa.setColor(QPalette::WindowText,color);
    switch(ifSt)
    {
        case check:
        {
            ui->label_ticketinform->setPalette(pa);
            ui->label_ticketinform->setText(str);

            labelSize = ui->label_ticketinform->width();
            labelSize = int(fontScale*labelSize/str.length());
            font.setPixelSize((labelSize > 80) ?  80 : labelSize);
            ui->label_ticketinform->setFont(font);
            break;
        }
        case netmsg:
        {
            ui->label_netmsg->setPalette(pa);
            ui->label_netmsg->setText(str);

            labelSize = ui->label_netmsg->width();
            labelSize = int(fontScale*labelSize/str.length());
            font.setPixelSize((labelSize > 70) ?  70 : labelSize);
            ui->label_netmsg->setFont(font);
            break;
        }
        case standby:
        {
            ui->label_standbymsg->setPalette(pa);
            ui->label_standbymsg->setText(str);
            ui->label_standbymsg->show();

            labelSize = ui->label_standbymsg->width();
            labelSize = int(fontScale*labelSize/str.length());
            font.setPixelSize((labelSize > 70) ?  70 : labelSize);
            ui->label_standbymsg->setFont(font);
            break;
        }
        default:break;
    }
}
QString Form::UiGetCheckTicketMsg()
{
    QString str;
    switch(ifSt)
    {
        case check:
            str = ui->label_ticketinform->text();
            break;
        case netmsg:
            str = ui->label_netmsg->text();
            break;
        case standby:
            str = ui->label_standbymsg->text();
            break;
        default:break;
    }
    return str;
}
void Form::UiFtpInit(bool enable)
{
    if(enable)
    {
        ui->label_ftpip->setText(Ftp_ServerIp);
        ui->label_ftpport->setText(QString::number(Ftp_Port));
        ui->label_ftpipfield->show();
        ui->label_ftpip->show();
        ui->label_ftpportfield->show();
        ui->label_ftpport->show();
    }
    else
    {
        ui->label_ftpipfield->hide();
        ui->label_ftpip->hide();
        ui->label_ftpportfield->hide();
        ui->label_ftpport->hide();
    }
}
void Form::UiInputBarcodeFromKey(QString str)
{
    ui->label_barcode->setText(str);
}
void Form::UiTicketPerNumUpdate(quint16 ticketPerNum)
{
    ui->label_ticketpernum->setNum(ticketPerNum);
}
void Form::UiPassPerNumUpdate(quint16 passPerNum)
{
    ftpgatelabelcolor = Qt::green;
    pa.setColor(QPalette::WindowText, Qt::green);
    ui->label_ticketinform->setPalette(pa);
    QString str = tr("剩")+QString::number(passPerNum);
    if(passPerNum)
        ui->label_ticketinform->setText(str);

    int labelSize = ui->label_ticketinform->width();
    labelSize = int(fontScale*labelSize/str.length());
    font.setPixelSize((labelSize > 80) ?  80 : labelSize);
    ui->label_ticketinform->setFont(font);
}
void Form::UiTodayPerNumUpdate(quint16 todayPerNum)
{
    ui->label_todaypernum->setNum(todayPerNum);
}
void Form::UiParkPerNumUpdate(quint16 parkPerNum)
{
    ui->label_parkpernum->setNum(parkPerNum);
}
void Form::UiTicketNumDispaly(TicketNoType disType, QString str)
{
    int labelSize;
    switch(disType)
    {
        case barcodetype:
            ui->label_ticketnofield->setText(tr("条码号"));
            ui->label_ticketno->setText(str);
            break;
        case ictype:
            ui->label_ticketnofield->setText(tr("卡号"));
            ui->label_ticketno->setText(str);
            break;
        case idtype:
            ui->label_ticketnofield->setText(tr("二代证"));
            ui->label_ticketno->setText(str.replace(10,4,"****"));
            break;
        default:break;
    }

    labelSize = ui->label_ticketinform->width()-ui->label_ticketnofield->width();
    labelSize = int(1.5*labelSize/str.length());
    font.setPixelSize((labelSize > 20) ?  20 : labelSize);
    ui->label_ticketno->setFont(font);
}
QString Form::UiNameQByteArrayToQstring(QByteArray array)
{
    quint8 i;

    for(i=0;i<array.size();i++)
    {
        if((quint8)array.data()[i] != 0x00)
        {
            break;
        }
    }
    return codec->toUnicode(array.mid(i,array.size()-i));
}
void Form::UiTicketTypeDisplay(QByteArray t)
{
    int labelSize;

    ticketTypeStr = UiNameQByteArrayToQstring(t);
    ui->label_tickettype->setText(ticketTypeStr);

    labelSize = ui->label_tickettype->width();
    labelSize = int(fontScale*labelSize/ticketTypeStr.length());
    if(labelSize < 15)
        labelSize = 15;
    font.setPixelSize((labelSize > 20) ? 20 : labelSize);
    ui->label_tickettype->setFont(font);
}
void Form::UiTicketTypeDisplayString(QString t)
{
    int labelSize;

    ticketTypeStr = t;
    ui->label_tickettype->setText(ticketTypeStr);

    labelSize = ui->label_tickettype->width();
    labelSize = int(fontScale*labelSize/ticketTypeStr.length());

    labelSize = 20;
    font.setPixelSize((labelSize > 20) ? 20 : labelSize);
    ui->label_tickettype->setFont(font);
}
void Form::UiTicketTimeDisplay(QByteArray time, TicketTime tt)
{
    QString str;
    switch(tt)
    {
        case ttUnused:
        {
            str.append(QString("%1").arg((uchar)time.at(0), 2, 16, (QChar)'0'));
            str.append(QString("%1-").arg((uchar)time.at(1), 2, 16, (QChar)'0'));
            str.append(QString("%1-").arg((uchar)time.at(2), 2, 16, (QChar)'0'));
            str.append(QString("%1 ").arg((uchar)time.at(3), 2, 16, (QChar)'0'));
            str.append(QString("%1:").arg((uchar)time.at(4), 2, 16, (QChar)'0'));
            str.append(QString("%1:").arg((uchar)time.at(5), 2, 16, (QChar)'0'));
            str.append(QString("%1").arg((uchar)time.at(6), 2, 16, (QChar)'0'));
            #if PROTOCOLVER == NEWPROTOCOL
            ui->label_tickettimefield->setText(tr("购票时间"));
            #else
            ui->label_tickettimefield->setText(tr("检票时间"));
            #endif
            ui->label_tickettime->setText(str);
            break;
        }
        case ttUsed:
        {
            str.append(QString("%1").arg((uchar)time.at(0), 2, 16, (QChar)'0'));
            str.append(QString("%1-").arg((uchar)time.at(1), 2, 16, (QChar)'0'));
            str.append(QString("%1-").arg((uchar)time.at(2), 2, 16, (QChar)'0'));
            str.append(QString("%1 ").arg((uchar)time.at(3), 2, 16, (QChar)'0'));
            str.append(QString("%1:").arg((uchar)time.at(4), 2, 16, (QChar)'0'));
            str.append(QString("%1:").arg((uchar)time.at(5), 2, 16, (QChar)'0'));
            str.append(QString("%1").arg((uchar)time.at(6), 2, 16, (QChar)'0'));
            ui->label_tickettimefield->setText(tr("使用时间"));
            ui->label_tickettime->setText(str);
            break;
        }
        case ttExpired:
        {
            str.append(QString("%1").arg((uchar)time.at(0), 2, 16, (QChar)'0'));
            str.append(QString("%1-").arg((uchar)time.at(1), 2, 16, (QChar)'0'));
            str.append(QString("%1-").arg((uchar)time.at(2), 2, 16, (QChar)'0'));
            str.append(QString("%1 ").arg((uchar)time.at(3), 2, 16, (QChar)'0'));
            ui->label_tickettimefield->setText(tr("失效期"));
            ui->label_tickettime->setText(str);
            break;
        }
        case ttNotactive:
        {
            str.append(QString("%1").arg((uchar)time.at(0), 2, 16, (QChar)'0'));
            str.append(QString("%1-").arg((uchar)time.at(1), 2, 16, (QChar)'0'));
            str.append(QString("%1-").arg((uchar)time.at(2), 2, 16, (QChar)'0'));
            str.append(QString("%1 ").arg((uchar)time.at(3), 2, 16, (QChar)'0'));
            ui->label_tickettimefield->setText(tr("生效期"));
            ui->label_tickettime->setText(str);
            break;
        }
        case ttRefunded:
        {
            str.append(QString("%1").arg((uchar)time.at(0), 2, 16, (QChar)'0'));
            str.append(QString("%1-").arg((uchar)time.at(1), 2, 16, (QChar)'0'));
            str.append(QString("%1-").arg((uchar)time.at(2), 2, 16, (QChar)'0'));
            str.append(QString("%1 ").arg((uchar)time.at(3), 2, 16, (QChar)'0'));
            str.append(QString("%1:").arg((uchar)time.at(4), 2, 16, (QChar)'0'));
            str.append(QString("%1:").arg((uchar)time.at(5), 2, 16, (QChar)'0'));
            str.append(QString("%1").arg((uchar)time.at(6), 2, 16, (QChar)'0'));
            ui->label_tickettimefield->setText(tr("退票时间"));
            ui->label_tickettime->setText(str);
            break;
        }
        case ttChangedticket:
        {
            str.append(QString("%1").arg((uchar)time.at(0), 2, 16, (QChar)'0'));
            str.append(QString("%1-").arg((uchar)time.at(1), 2, 16, (QChar)'0'));
            str.append(QString("%1-").arg((uchar)time.at(2), 2, 16, (QChar)'0'));
            str.append(QString("%1 ").arg((uchar)time.at(3), 2, 16, (QChar)'0'));
            str.append(QString("%1:").arg((uchar)time.at(4), 2, 16, (QChar)'0'));
            str.append(QString("%1:").arg((uchar)time.at(5), 2, 16, (QChar)'0'));
            str.append(QString("%1").arg((uchar)time.at(6), 2, 16, (QChar)'0'));
            ui->label_tickettimefield->setText(tr("换票时间"));
            ui->label_tickettime->setText(str);
            break;
        }
        case ttReportedloss:
        {
            str.append(QString("%1").arg((uchar)time.at(0), 2, 16, (QChar)'0'));
            str.append(QString("%1-").arg((uchar)time.at(1), 2, 16, (QChar)'0'));
            str.append(QString("%1-").arg((uchar)time.at(2), 2, 16, (QChar)'0'));
            str.append(QString("%1 ").arg((uchar)time.at(3), 2, 16, (QChar)'0'));
            str.append(QString("%1:").arg((uchar)time.at(4), 2, 16, (QChar)'0'));
            str.append(QString("%1:").arg((uchar)time.at(5), 2, 16, (QChar)'0'));
            str.append(QString("%1").arg((uchar)time.at(6), 2, 16, (QChar)'0'));
            ui->label_tickettimefield->setText(tr("挂失时间"));
            ui->label_tickettime->setText(str);
            break;
        }
        default:
        {
            ui->label_tickettimefield->setText(tr("时间"));
            ui->label_tickettime->setText(QDateTime::currentDateTime().toString("yyyy-MM-dd hh:mm:ss"));
            break;
        }
    }
}
void Form::UiPicDisplay(CheckStatus status)
{
    QImage *image = new QImage;

    if(image == NULL)
    {
        TicketDebug("image is NULL!");
        return;
    }
    if(movieFlag)
    {
        checkingMovie->stop();
        fingerMovie->stop();
        checkokMovie->stop();
        faceMovie->stop();
        movieFlag = 0;
    }

    switch(status)
    {
        case soq:
        {
            pa.setColor(QPalette::WindowText,Qt::black);
            ui->label_picmsg->setPalette(pa);
            ui->label_picmsg->setText(tr("正在查票..."));
            ui->label_picmsg->show();

            movieFlag = 1;
            ui->label_pic->setMovie(checkingMovie);
            checkingMovie->start();
            ui->frame_pic->show();
            picDisFlag = 0;

            ui->label_tickettype->clear();
            ui->label_tickettime->clear();
            ui->label_ticketpernum->clear();
            break;
        }
        case eoq:
        {
            ui->frame_pic->hide();
            ui->label_pic->clear();
            ui->label_picmsg->clear();
            ui->label_picmsg->hide();
            break;
        }
        case checkok:
        {
            if((!picDisFlag)&&(!fingerDisFlag))
            {
                pa.setColor(QPalette::WindowText,QColor (51, 174, 31, 255));
                ui->label_picmsg->setPalette(pa);
                ui->label_picmsg->setText(tr("允许通行"));
                ui->label_picmsg->show();
                ui->frame_finger->hide();

                movieFlag = 1;
                ui->label_pic->setMovie(checkokMovie);
                checkokMovie->start();
                ui->frame_pic->show();
            }
            break;
        }
        case checkerr:
        {
            pa.setColor(QPalette::WindowText,QColor (120, 146, 169, 255));
            ui->label_picmsg->setPalette(pa);
            ui->label_picmsg->setText(tr("禁止通行"));
            ui->label_picmsg->show();

            if(!image->load("/opt/icon/checkerr.png"))
            {
                TicketDebug("load /opt/icon/checkerr.png fail!");
                delete image;
                return;
            }
            ui->label_pic->setPixmap(QPixmap::fromImage(*image));
            ui->frame_pic->show();
            break;
        }
        case picdis:
        {
            picDisFlag = 1;
            pa.setColor(QPalette::WindowText,Qt::black);
            ui->label_picmsg->setPalette(pa);
            ui->label_picmsg->setText(tr("照片数据"));
            ui->label_picmsg->show();

            ui->label_pic->setPixmap(pixPic);
            ui->frame_pic->show();
            break;
        }
        case fingercheck:
        {
            if(!picDisFlag)
            {
                ui->frame_pic->hide();
                ui->label_pic->clear();
                ui->label_picmsg->clear();
                ui->label_picmsg->hide();
            }

            movieFlag = 1;
            ui->label_finger->setMovie(fingerMovie);
            fingerMovie->start();
            ui->frame_finger->show();
            break;
        }
        case fingerdis:
        {
            fingerDisFlag = 1;
            if(!image->load("/tmp/finger.bmp"))
            {
                TicketDebug("load /tmp/finger.bmp fail!");
                delete image;
                return;
            }
            ui->label_finger->setPixmap(QPixmap::fromImage(*image));
            ui->frame_finger->show();
            break;
        }
        case idpicdis:
        {
            picDisFlag = 1;

            if(!image->load("zp.bmp"))
            {
                TicketDebug("load zp.bmp fail!");
                delete image;
                return;
            }
            pa.setColor(QPalette::WindowText,Qt::black);
            ui->label_picmsg->setPalette(pa);
            ui->label_picmsg->setText(tr("照片数据"));
            ui->label_picmsg->show();

            pixPic = QPixmap::fromImage(*image);
            pixPic = pixPic.scaled(320,240,Qt::KeepAspectRatio);
            ui->label_pic->setPixmap(pixPic);
            ui->frame_pic->show();
            break;
        }
        case facescan:
        {
            ui->label_picmsg->clear();
            ui->label_picmsg->hide();
            movieFlag = 1;
            ui->label_pic->setMovie(faceMovie);
            faceMovie->start();
            ui->label_pic->show();
            break;
        }
        default:break;
    }

    delete image;
}
void Form::UiTicketstatusDisplay(Ticketstatus ts)
{
    gateTimer->stop();
    switch(ts)
    {
        case communicationerrorcrc:
        {
            UiCheckTicketMsg(Qt::red, tr("CRC通信错误！"));
            TicketDebug("ticketLabel : CRC communication error");
            TicketFlagValue(0);
            if((tcpHeadBackup==0xa0)||(tcpHeadBackup==0xa1))
            {
                tcpResponseTimer->start(5000);
            }
            else
            {
                gateTimer->stop();
                gateTimer->start(standbyTime);
            }
            break;
        }
        case communicationerrormd5:
        {
            UiCheckTicketMsg(Qt::red, tr("MD5通信错误！"));
            TicketDebug("ticketLabel : MD5 communication error");
            TicketFlagValue(0);
            if((tcpHeadBackup==0xa0)||(tcpHeadBackup==0xa1))
            {
                tcpResponseTimer->start(5000);
            }
            else
            {
                gateTimer->stop();
                gateTimer->start(standbyTime);
            }
            break;
        }
        case communicationerrorcid:
        {
            UiCheckTicketMsg(Qt::red, tr("CID通信错误！"));
            TicketDebug("ticketLabel : CID communication error");
            TicketFlagValue(0);
            if((tcpHeadBackup==0xa0)||(tcpHeadBackup==0xa1))
            {
                tcpResponseTimer->start(5000);
            }
            else
            {
                gateTimer->stop();
                gateTimer->start(standbyTime);
            }
            break;
        }
        case communicationerrorats:
        {
            UiCheckTicketMsg(Qt::red, tr("ATS通信错误！"));
            TicketDebug("ticketLabel : ATS communication error");
            TicketFlagValue(0);
            if((tcpHeadBackup==0xa0)||(tcpHeadBackup==0xa1))
            {
                tcpResponseTimer->start(5000);
            }
            else
            {
                gateTimer->stop();
                gateTimer->start(standbyTime);
            }
            break;
        }
        case communicationerrorprotocolnotsupport:
        {
            UiCheckTicketMsg(Qt::red, tr("Protocol通信错误！"));
            TicketDebug("ticketLabel : Protocol communication error");
            TicketFlagValue(0);
            if((tcpHeadBackup==0xa0)||(tcpHeadBackup==0xa1))
            {
                tcpResponseTimer->start(5000);
            }
            else
            {
                gateTimer->stop();
                gateTimer->start(standbyTime);
            }
            break;
        }
        case communicationerrortlv:
        {
            UiCheckTicketMsg(Qt::red, tr("TLV拆包错误！"));
            TicketDebug("ticketLabel : TLV Unpack error");
            TicketFlagValue(0);
            if((tcpHeadBackup==0xa0)||(tcpHeadBackup==0xa1))
            {
                tcpResponseTimer->start(5000);
            }
            else
            {
                gateTimer->stop();
                gateTimer->start(standbyTime);
            }
            break;
        }

        case checkticket:
        {
            FaceTimerOutflag=0;//标志位清零2    1-人脸返回数据超时清零 2-回到待机状态清零                  , QSettings::IniFormat)
            UiChange(standby);
            TicketDebug("ticketLabel : Please check the ticket");
            LedDisplay(0xd0,0x1e,0x03,passPerNum);
            break;
        }
        case checknetwork:
        {
            UiCheckTicketMsg(Qt::red, tr("检查网络"));
            TicketDebug("ticketLabel : Check network");
            TicketFlagValue(0);
            break;
        }
        case networkblocked:
        {
            UiCheckTicketMsg(Qt::red, tr("网络断开"));
            TicketDebug("ticketLabel : Network disconnection");
            TicketFlagValue(0);
            break;
        }
        case networkdelay:
        {
            UiCheckTicketMsg(Qt::red, tr("网络超时"));
            TicketDebug("ticketLabel : Network Timeout");
            TicketFlagValue(0);
            break;
        }
        case serverconnectionerror:
        {
            UiCheckTicketMsg(Qt::red, tr("中间层连接出错"));
            TicketDebug("ticketLabel : Server connection error");
            TicketFlagValue(0);
            break;
        }

        case pleasewait:
        {
            PlayWav(110,800);//请稍候
            break;
        }
        case pleaseswipingagain:
        {
            UiCheckTicketMsg(Qt::red, tr("请重刷"));
            TicketFlagValue(0);
            PlayWav(103,800);
            gateTimer->stop();
            gateTimer->start(standbyTime);
            TicketDebug("ticketLabel : Please swiping again");
            LedDisplay(0xd8,0x1e,0x03,passPerNum);
            break;
        }
        //ftp
        case opentheftpserver:
        {
            UiCheckTicketMsg(Qt::red, tr("请开启ftp服务器,确保正常检票"));
            TicketDebug("ticketLabel : Please open the ftp server to ensure that the normal ticket");
            break;
        }
        case ftpstopcheckticket:
        {
            UiCheckTicketMsg(Qt::red, tr("停止检票,请开启ftp服务器"));
            TicketDebug("ticketLabel : Stop checking, please open the ftp server");
            break;
        }
        case ftpconnectok:
        {
            UiCheckTicketMsg(Qt::green, tr("ftp服务器连接成功"));
            TicketDebug("ticketLabel : Ftp server connection is successful");
            break;
        }
        case ftpputerror:
        {
            UiCheckTicketMsg(Qt::red, tr("ftp上传失败"));
            TicketDebug("ticketLabel : Ftp upload failed");
            break;
        }
        case ftpgeterror:
        {
            UiCheckTicketMsg(Qt::red, tr("ftp下载失败"));
            TicketDebug("ticketLabel : Ftp download failed");
            break;
        }
        //票状态
        case swipesuccessful:
        {
            //UiPicDisplay(checkok);
            if(ticketAuthorizeType)
            {
                ticketDataAuthorizeback = ticketData;
                UiTicketstatusDisplay(brushtheauthorizationcard);
                break;
            }

            if(shengYuCiShu == 0)
            {
                UiCheckTicketMsg(Qt::green, tr("刷卡成功"));
            }
            else
            {
                UiCheckTicketMsg(Qt::green, tr("剩余次数：") + QString::number(shengYuCiShu));
                shengYuCiShu = 0;
            }
            TicketDebug("ticketLabel : Swipe successful");

            if(ticketT == 0x02) //播放团体票声音
            {
                if(ticketSoundAddr == 0x00)
                    ticketSoundAddr = 119;
                ticketT = 0x00;
                ticketTflag = 1;
                LedDisplay(0xd3,0x1e,0x01,passPerNum+ticketPerNum);
            }
            else
            {
                if(ticketSoundAddr == 0x00)
                    ticketSoundAddr = 101;
                ticketTflag = 0;
                LedDisplay(0xd1,0x1e,0x01,passPerNum+ticketPerNum);
            }
            PlayWav(ticketSoundAddr,800);
#if TICKETSOUND
            if(ticketPerNum)
            {
                hundred = ticketPerNum/100;
                decade = ticketPerNum%100/10;
                unit = ticketPerNum%10;

                if(hundred)
                {
                    PlayWav(218+hundred,800);
                    if(decade)
                    {
                        PlayWav(209+decade,800);
                        if(unit)
                        {
                            PlayWav(200+unit,800);
                            PlayWav(228,800);
                        }
                        else
                        {
                            PlayWav(228,800);
                        }
                    }
                    else
                    {
                        if(unit)
                        {
                            PlayWav(200+decade,800);
                            PlayWav(200+unit,800);
                            PlayWav(228,800);
                        }
                        else
                        {
                           PlayWav(228,800);
                        }
                    }
                }
                else if(decade)
                {
                    PlayWav(209+decade,800);
                    if(unit)
                    {
                        PlayWav(200+unit,800);
                        PlayWav(228,800);
                    }
                    else
                    {
                        PlayWav(228,800);
                    }
                }
                else if(unit)
                {
                    PlayWav(200+unit,800);
                    PlayWav(228,800);
                }
            }
#endif
            gateTimer->stop();
            gateTimer->start(standbyTime);

            switch(ticketStyle)
            {
                case 0x02:
                {
                    prepare_ipdata_barconfirm();
                    break;
                }
                case 0xb1:
                case 0x03:
                {
                    prepare_ipdata_icconfirm();
                    break;
                }
                case 0x04:
                {
                    prepare_ipdata_idconfirm();
                    break;
                }
                case 0x0a:
                {
                    TicketFlagValue(0);
                    break;
                }
                default:break;
            }
            break;
        }
        case alreadyuse:
        {
            UiCheckTicketMsg(Qt::red, tr("已使用"));
            TicketDebug("ticketLabel : Already use");
            TicketFlagValue(0);
            gateTimer->stop();
            gateTimer->start(standbyTime);
            PlayWav(104,800);
            LedDisplay(0xd7,0x1e,0x02,passPerNum);
            break;
        }
        case invalidticket:
        {
            UiCheckTicketMsg(Qt::red, tr("无效票"));
            TicketDebug("ticketLabel : Invalid ticket");
            TicketFlagValue(0);
            gateTimer->stop();
            gateTimer->start(standbyTime);
            PlayWav(102,800);
            LedDisplay(0xd6,0x1e,0x03,passPerNum);
            break;
        }
        case invalidcard:
        {
            UiCheckTicketMsg(Qt::red, tr("无效卡"));
            TicketDebug("ticketLabel : Invalid card");
            TicketFlagValue(0);
            gateTimer->stop();
            gateTimer->start(standbyTime);
            PlayWav(115,800);
            LedDisplay(0xd6,0x1e,0x03,passPerNum);
            break;
        }
        case expired:
        {
            UiCheckTicketMsg(Qt::red, tr("已过期"));
            TicketDebug("ticketLabel : Expired");
            TicketFlagValue(0);
            gateTimer->stop();
            gateTimer->start(standbyTime);
            PlayWav(116,800);
            LedDisplay(0xd6,0x1e,0x03,passPerNum);
            break;
        }
        case noteffective:
        {
            UiCheckTicketMsg(Qt::red, tr("未生效"));
            TicketDebug("ticketLabel : Not effective");
            TicketFlagValue(0);
            gateTimer->stop();
            gateTimer->start(standbyTime);
            PlayWav(112,800);
            LedDisplay(0xd6,0x1e,0x03,passPerNum);
            break;
        }
        case insufficientbalance:
        {
            UiCheckTicketMsg(Qt::red, tr("余额不足"));
            TicketDebug("ticketLabel : Insufficient balance");
            TicketFlagValue(0);
            gateTimer->stop();
            gateTimer->start(standbyTime);
            PlayWav(118,800);
            LedDisplay(0xda,0x1e,0x03,passPerNum);
            break;
        }
        case blacklist:
        {
            UiCheckTicketMsg(Qt::red, tr("黑名单"));
            TicketDebug("ticketLabel : Blacklist");
            TicketFlagValue(0);
            gateTimer->stop();
            gateTimer->start(standbyTime);
            PlayWav(144,800);
            LedDisplay(0xd6,0x1e,0x03,passPerNum);
            break;
        }
        case refundticket:
        {
            UiCheckTicketMsg(Qt::red, tr("已退票"));
            TicketDebug("ticketLabel : Refund ticket");
            TicketFlagValue(0);
            gateTimer->stop();
            gateTimer->start(standbyTime);
            PlayWav(146,800);
            LedDisplay(0xd6,0x1e,0x03,passPerNum);
            break;
        }
        case changedticket:
        {
            UiCheckTicketMsg(Qt::red, tr("已换票"));
            TicketDebug("ticketLabel : Changed ticket");
            TicketFlagValue(0);
            gateTimer->stop();
            gateTimer->start(standbyTime);
            PlayWav(147,800);
            LedDisplay(0xd6,0x1e,0x03,passPerNum);
            break;
        }
        case reportedloss:
        {
            UiCheckTicketMsg(Qt::red, tr("已挂失"));
            TicketDebug("ticketLabel : Reported loss");
            TicketFlagValue(0);
            gateTimer->stop();
            gateTimer->start(standbyTime);
            PlayWav(114,800);
            LedDisplay(0xd6,0x1e,0x03,passPerNum);
            break;
        }
        case notimes:
        {
            UiCheckTicketMsg(Qt::red, tr("次数已用完"));
            TicketDebug("ticketLabel : No times");
            TicketFlagValue(0);
            PlayWav(128,800);
            gateTimer->stop();
            gateTimer->start(standbyTime);
            break;
        }
        //finger
        case inputfingerprint:
        {
#if FINGEROPENMODE
            UiPicDisplay(fingercheck);

            if(Pb2_FingerInTimes == 2)
                fingerStep=1;
            else if(Pb2_FingerInTimes == 1)
                fingerStep=2;

#else
            if(Pb1_FingerDevType)
            {

                if(Pb2_FingerInTimes == 2)
                {
                    fingerStep=0x01;
                    //qDebug("USBFingerFeature");
                    USBFingerFeature();//录入两次
                }
                else
                {
                    fingerStep=0x02;
                    USBFingerTemplate_direct();//录入一次
                }

            }
            else
                FingerFeature(0);
#endif
            if(soundType != 0xE0)
            {
                fingerErrTimes = 0;
            }
            if(FingerInNum > 1)
                UiCheckTicketMsg(Qt::green, tr("请录入指纹") + QString::number(FingerInNum) + tr("枚"));
            else
                UiCheckTicketMsg(Qt::green, tr("请录入指纹"));
            TicketDebug("ticketLabel : Please input fingerprint");
            fingerGetTimes = 0;
            TicketTimerRe();

            PlayWav(130,1500);
            LedDisplay(0xf3,0x1e,0x01,passPerNum);
            break;
        }
        case inputfingerprintagain:
        {
            UiCheckTicketMsg(Qt::green, tr("请重按指纹"));
            TicketDebug("ticketLabel : Press input fingerprint again");
            fingerGetTimes = 1;
            fingerStep=0x02;
            TicketTimerRe();
            soundType = 0xf0;
            PlayWav(139,800);
            LedDisplay(0xf3,0x1e,0x01,passPerNum);
            break;
        }
        case recordedsuccessfully:
        {
            //UiPicDisplay(checkok);
            UiCheckTicketMsg(Qt::green, tr("录入成功"));
            TicketDebug("ticketLabel : Recorded successfully");
#if FINGEROPENMODE
            soundType = 0x55;
#endif
            if(FingerInNum)
            {
                fingerErrTimes = 0;
                soundType = 0xe0;
                TicketTimerRe();
            }
            else
            {
                TicketFlagValue(0);
                gateTimer->stop();
                gateTimer->start(standbyTime);
            }
            PlayWav(133,1000);
//            LedDisplay(0xf4,0x1e,0x01,passPerNum);
//            sleep(1);
//            LedDisplay(0xd1,0x1e,0x01,passPerNum+ticketPerNum);
            break;
        }
        case recordedtimeout:
        {
            UiCheckTicketMsg(Qt::red, tr("录入超时"));
            TicketDebug("ticketLabel : Recorded timeout");

#if FINGEROPENMODE
            soundType = 0x55;
#endif
            fingerErrTimes++;
            if(fingerErrTimes < Pb3_FingerInTime)
            {
                TicketTimerRe();
                soundType = 0xe0;
            }
            else
            {
                TicketFlagValue(0);
                gateTimer->stop();
                gateTimer->start(standbyTime);
            }
            PlayWav(136,800);
            if((ticketStyle == 0x03)&&(P71_RfidDevType == 0x05))
            {
                UserEvent *ue = new UserEvent(CR::RFIDIN,this);
                ue->type = 0x01;
                qApp->postEvent(rfidThread,ue);
            }
            LedDisplay(0xfa,0x1e,0x01,passPerNum);
            break;
        }
        case recordedfailure:
        {
            UiCheckTicketMsg(Qt::red, tr("录入失败"));
            TicketDebug("ticketLabel : Recorded failure");

#if FINGEROPENMODE
            soundType = 0x55;
#endif
            fingerErrTimes++;
            if(fingerErrTimes < Pb3_FingerInTime)
            {
                TicketTimerRe();
                soundType = 0xe0;
            }
            else
            {
                TicketFlagValue(0);
                gateTimer->stop();
                gateTimer->start(standbyTime);
            }

            PlayWav(134,800);
            if((ticketStyle == 0x03)&&(P71_RfidDevType == 0x05))
            {
                UserEvent *ue = new UserEvent(CR::RFIDIN,this);
                ue->type = 0x01;
                qApp->postEvent(rfidThread,ue);
            }
            LedDisplay(0xf5,0x1e,0x01,passPerNum);
            break;
        }
        case matchfingerprint:
        {
#if FINGEROPENMODE
            UiPicDisplay(fingercheck);
            fingerStep = 0x01;
#else
            if(Pb1_FingerDevType == 0x01)
                USBFingerFeature();
            else
                FingerTemplate(fingerbidui);
#endif
            if(soundType != 0xD0)
            {
                fingerErrTimes = 0;
            }
            if(FingerMatchNum > 1)
                UiCheckTicketMsg(Qt::green, tr("请比对指纹") + QString::number(FingerMatchNum) + tr("枚"));
            else
                UiCheckTicketMsg(Qt::green, tr("请比对指纹"));
            TicketDebug("ticketLabel : Please compare fingerprint");

            TicketTimerRe();

            PlayWav(137,800);
            LedDisplay(0xf8,0x1e,0x01,passPerNum);
            break;
        }
        case matchsuccessfully:
        {
            if(shengYuCiShu == 0)
            {
                UiCheckTicketMsg(Qt::green, tr("比对成功"));
            }
            else
            {
                UiCheckTicketMsg(Qt::green, tr("剩余次数：") + QString::number(shengYuCiShu));
                shengYuCiShu = 0;
            }
            TicketDebug("ticketLabel : Match successfully");

#if FINGEROPENMODE
            soundType = 0x55;
#endif
            if(FingerMatchNum)
            {
                fingerErrTimes = 0;
                soundType = 0xd0;
                TicketTimerRe();
            }
            else
            {
                TicketFlagValue(0);
                gateTimer->stop();
                gateTimer->start(standbyTime);
            }
            PlayWav(131,800);

//            LedDisplay(0xf6,0x1e,0x01,passPerNum+ticketPerNum);
//            sleep(1);
//            LedDisplay(0xd1,0x1e,0x01,passPerNum+ticketPerNum);
            break;
        }
        case matchtimeout:
        {
            UiCheckTicketMsg(Qt::red, tr("比对超时"));
            TicketDebug("ticketLabel : Match timeout");

#if FINGEROPENMODE
            soundType = 0x55;
            if(fingerStep == 0x03)
            {
                TicketFlagValue(0);
                gateTimer->stop();
                gateTimer->start(standbyTime);
            }
            else
            {
                fingerErrTimes++;
                if(fingerErrTimes < Pb5_FingerMatchTime)
                {

                    TicketTimerRe();
                    soundType = 0xd0;
                }
                else
                {

                    TicketFlagValue(0);
                    gateTimer->stop();
                    gateTimer->start(standbyTime);
                }
            }
#else
            fingerErrTimes++;
            if(fingerErrTimes < Pb5_FingerMatchTime)
            {
                TicketTimerRe();
                soundType = 0xd0;
            }
            else
            {
                TicketFlagValue(0);
                gateTimer->stop();
                gateTimer->start(standbyTime);
            }
#endif

            PlayWav(138,800);
            if((ticketStyle == 0x03) && (P71_RfidDevType == 0x05))
            {
                UserEvent *ue = new UserEvent(CR::RFIDIN,this);
                ue->type = 0x01;
                qApp->postEvent(rfidThread,ue);
            }

            LedDisplay(0xf9,0x1e,0x01,passPerNum);
            break;
        }
        case matchfailure:
        {
            UiCheckTicketMsg(Qt::red, tr("比对失败"));
            TicketDebug("ticketLabel : Match failure");

#if FINGEROPENMODE
            soundType = 0x55;
            if(fingerStep == 0x03)
            {
                TicketFlagValue(0);
                gateTimer->stop();
                gateTimer->start(standbyTime);
            }
            else
            {
                fingerErrTimes++;
                if(fingerErrTimes < Pb5_FingerMatchTime)
                {

                    TicketTimerRe();
                    soundType = 0xd0;
                }
                else
                {

                    TicketFlagValue(0);
                    gateTimer->stop();
                    gateTimer->start(standbyTime);
                }
            }
#else
            fingerErrTimes++;
            if(fingerErrTimes < Pb5_FingerMatchTime)
            {
                TicketTimerRe();
                soundType = 0xd0;
            }
            else
            {
                TicketFlagValue(0);
                gateTimer->stop();
                gateTimer->start(standbyTime);
            }
#endif

            PlayWav(132,800);
            if((ticketStyle == 0x03)&&(P71_RfidDevType == 0x05))
            {
                UserEvent *ue = new UserEvent(CR::RFIDIN,this);
                ue->type = 0x01;
                qApp->postEvent(rfidThread,ue);
            }
            LedDisplay(0xf7,0x1e,0x01,passPerNum);
            break;
        }
        case fingerprintdevicenotdetected:
        {
            fingerStep = 0x00;
            UiCheckTicketMsg(Qt::red, tr("未检测到指纹设备"));
            TicketDebug("ticketLabel : Fingerprint device not detected");
            gateTimer->stop();
            gateTimer->start(standbyTime);
            break;
        }
        case fingerprintnotenabled:
        {
            UiCheckTicketMsg(Qt::red, tr("指纹未启用"));
            TicketDebug("ticketLabel : Fingerprint is not enabled");
            TicketFlagValue(0);
            PlayWav(126,800);
            gateTimer->stop();
            gateTimer->start(standbyTime);
            break;
        }
        case pleaseremoveyourfinger:
        {
            UiCheckTicketMsg(Qt::red, tr("请移开手指"));
            TicketDebug("ticketLabel : Please remove your finger");
            TicketFlagValue(0);
            gateTimer->stop();
            gateTimer->start(standbyTime);
    #if FINGEROPENMODE
            soundType = 0x55;
    #endif
            PlayWav(135,800);
            break;
        }

        case brushid:
        {
            ticketGetIdNumFlag = 1;
            UiCheckTicketMsg(Qt::green, tr("请刷二代证"));
            TicketDebug("ticketLabel : Please brush ID");
            TicketTimerRe();
            rfidThread->start();
            PlayWav(141,1500);
            break;
        }
        case idmatchfailure:
        {
            UiCheckTicketMsg(Qt::red, tr("二代证比对失败"));
            TicketDebug("ticketLabel : ID match failure");
            TicketFlagValue(0);
            gateTimer->stop();
            gateTimer->start(standbyTime);
            PlayWav(142,800);
            break;
        }

        case brushtheauthorizationcard:
        {
            UiCheckTicketMsg(Qt::green, tr("请刷授权卡"));
            TicketDebug("ticketLabel : Please brush the authorization card");
            ticketAuthorizeFlag = 1;
            TicketTimerRe();
            //rfidThread->start();
            PlayWav(120,1500);
            LedDisplay(0xcc,0x1e,0x01,ticketPerNum);
            break;
        }
        case authorizationsuccessfully:
        {
            UiCheckTicketMsg(Qt::green, tr("授权成功"));
            TicketDebug("ticketLabel : Authorization successfully");
            gateTimer->stop();
            gateTimer->start(standbyTime);
            PlayWav(121,800);
            LedDisplay(0xcc,0x1e,0x01,ticketPerNum);
            break;
        }
        case authorizationfailure:
        {
            UiCheckTicketMsg(Qt::red, tr("授权失败"));
            TicketDebug("ticketLabel : Authorization failure");
            TicketFlagValue(0);
            gateTimer->stop();
            gateTimer->start(standbyTime);
            PlayWav(122,800);
            break;
        }

        case pleasebindthephoto:
        {
            UiCheckTicketMsg(Qt::red, tr("请绑定照片"));
            TicketDebug("ticketLabel : Please bind the photo");
            TicketFlagValue(0);
            gateTimer->stop();
            gateTimer->start(standbyTime);
            PlayWav(129,800);
            LedDisplay(0x11,0x1e,0x01,passPerNum);
            break;
        }

        case suspendmode:
        {
            UiCheckTicketMsg(Qt::red, tr("暂停模式"));
            TicketDebug("ticketLabel : Suspend mode");
            break;
        }
        case positivepassage:
        {
            if(ifSt == standby)
                UiCheckTicketMsg(Qt::green, tr("正向通行人数：") + QString::number(swingGatePer));
            TicketDebug("ticketLabel : Positive Passage:" + QString::number(swingGatePer));
            LedDisplay(0xd0,0x1e,0x03,passPerNum);
            break;
        }
        case reversepassage:
        {
            if(ifSt == standby)
            {
                //UiCheckTicketMsg(Qt::green, tr("反向通行人数：") + QString::number(swingGatePer));
                ui->label_parkpernum->setNum(swingGatePer);
            }
            TicketDebug("ticketLabel : Reverse Passage:" + QString::number(swingGatePer));
            LedDisplay(0xd0,0x1e,0x03,passPerNum);
            break;
        }
        case errtype:
        {
            switch(userTimeOutType)
            {
                case 1:
                {
                    UiCheckTicketMsg(Qt::red, tr("序列号超时，重新注册"));
                    TicketDebug("Serial number timeout, re registration!!!");
                    break;
                }
                case 2:
                {
                    UiCheckTicketMsg(Qt::red, tr("序列号未生效，重新注册"));
                    TicketDebug("Serial number not in effect, re registration!!!");
                    break;
                }
                case 3:
                {
                    UiCheckTicketMsg(Qt::red, tr("序列号协议异常"));
                    TicketDebug("Serial number protocol exception!!!");
                    break;
                }
                case 4:
                {
                    UiCheckTicketMsg(Qt::red, tr("序列号校验错误"));
                    TicketDebug("Serial number calibration error!!!");
                    break;
                }
                case 5:
                default:
                {
                    UiCheckTicketMsg(Qt::red, tr("序列号有误，重新注册"));
                    TicketDebug("Serial number is incorrect, re registration!!!");
                    break;
                }
            }
            break;
        }

        case pleasepasstheticket:
        {
            UiCheckTicketMsg(Qt::red, tr("请先过散客票"));
            TicketDebug("ticketLabel : Please pass the ticket");
            TicketFlagValue(0);
            gateTimer->stop();
            gateTimer->start(standbyTime);
            PlayWav(143,800);
            break;
        }
        case ticketpernumerr:
        {
            UiCheckTicketMsg(Qt::red, tr("票人数不对"));
            TicketDebug("ticketLabel : Ticket PerNum err");
            TicketFlagValue(0);
            gateTimer->stop();
            gateTimer->start(standbyTime);
            PlayWav(145,800);
            break;
        }

        case pleaseinputface:
        {

            if(FaceInNum > 1)
                UiCheckTicketMsg(Qt::green, tr("请登记人脸") + QString::number(FaceInNum) + tr("枚"));
            else
                UiCheckTicketMsg(Qt::green, tr("请登记人脸"));
            TicketDebug("ticketLabel : Please register face");
            PlayWav(159,800);

            faceTimer->stop();
            faceTimer->start(12000);
            FaceTimerOutflag=0;
            UiPicDisplay(facescan);
            sendtoface(0x01);
            break;
        }
        case facerecordedsuccessfully:
        {
            UiCheckTicketMsg(Qt::green, tr("人脸登记成功"));
            TicketDebug("ticketLabel : Recorded successfully");
            PlayWav(133,800);

            if(FaceInNum >= 1 )
                FaceInNum--;
            else
                FaceInNum = 0;

            if(ticketStyle == 0x02)
                ticketNo = barCodeData;
            else if(ticketStyle == 0x03 || ticketStyle == 0xb1)
                ticketNo = serialNumber;
            else if(ticketStyle == 0x04)
                ticketNo = idCard;
            else
                ticketNo = barCodeData;
            ticketNoLen = ticketNo.length();
            ticketNoNum = 1;

            if(FaceInNum > 0)
            {
                //录入成功，发确认
                SendToFaceConfirm2(0x00);
                //soundType = 0xe1;
                FaceErrTimes=0;
                TicketTimerRe();
                UiPicDisplay(checkok);
                TicketPerDisplay(1,1);
                gateTimer->stop();
                gateTimer->start(standbyTime);
            }
            else
            {
                //人脸录入成功后，不判断以下
                ticketPerNum = 1;
                fingerApplyingMode=0;
                idApplyingMode=0;
                switch(fingerApplyingMode)
                {
                    case 0x01:
                    {
                        UiTicketstatusDisplay(inputfingerprint);
                        break;
                    }
                    case 0x02:
                    {
                        UiTicketstatusDisplay(matchfingerprint);
                        break;
                    }
                    default:
                    {
                        switch(idApplyingMode)
                        {
                            case 0x01:
                            {
                                TicketDebug("luruerdaizheng");
                                break;
                            }
                            case 0x02:
                            {
                                TicketDebug("biduierdaizheng");
                                break;
                            }
                            default:
                            {
                                TicketDebug(QString("fingerApplyingMode=%1  idApplyingMode=%2").arg(fingerApplyingMode).arg(idApplyingMode));
                                switch(ticketStyle)
                                {
                                    case 0x02:
                                    {
                                        prepare_ipdata_barconfirm();
                                        break;
                                    }
                                    case 0xb1:
                                    case 0x03:
                                    {
                                        prepare_ipdata_icconfirm();
                                        break;
                                    }
                                    case 0x04:
                                    {
                                        prepare_ipdata_idconfirm();
                                        break;
                                    }
                                    case 0x0a:
                                    {
                                        TicketFlagValue(0);
                                        break;
                                    }
                                    default:break;
                                }
                                //TicketFlagValue(0);
                                gateTimer->stop();
                                gateTimer->start(standbyTime);
                                //UiPicDisplay(checkok);
                                break;
                            }
                        }
                        break;
                    }
                }
            }


            break;
        }
        case facerecordedalready:
        {
            UiCheckTicketMsg(Qt::red, tr("人脸已登记"));
            TicketDebug("ticketLabel : facerecordedalready ");

            if(FaceInNum >= 1 )
                FaceInNum--;
            else
                FaceInNum = 0;


            if(ticketStyle == 0x02)
                ticketNo = barCodeData;
            else if(ticketStyle == 0x03 || ticketStyle == 0xb1)
                ticketNo = serialNumber;
            else if(ticketStyle == 0x04)
                ticketNo = idCard;
            else
                ticketNo = barCodeData;
            ticketNoLen = ticketNo.length();
            ticketNoNum = 1;

            if(FaceInNum > 0)
            {
                //录入成功，发确认
                UserEvent *ue = new UserEvent(CR::FACECONFIRM2,this);
                ue->type  =  0x02;//
                ue->result = 0x00;//success
                //ue->ticketid =//检票标识先不传，写死00000000
                ue->ticketlen = ticketNoLen;
                ue->ticketnum = ticketNoNum;
                ue->ticketno  = ticketNo;
                qApp->postEvent(faceDetect,ue);
                TicketDebug(QString("------FACECONFIRM   success------"));
                //soundType = 0xe1;
                FaceErrTimes=0;
                TicketTimerRe();
                UiPicDisplay(checkok);
                TicketPerDisplay(1,1);
                gateTimer->stop();
                gateTimer->start(standbyTime);
            }
            else
            {
                //人脸录入成功后，不判断以下
                ticketPerNum = 1;
                fingerApplyingMode=0;
                idApplyingMode=0;
                switch(fingerApplyingMode)
                {
                    case 0x01:
                    {
                        UiTicketstatusDisplay(inputfingerprint);
                        break;
                    }
                    case 0x02:
                    {
                        UiTicketstatusDisplay(matchfingerprint);
                        break;
                    }
                    default:
                    {
                        switch(idApplyingMode)
                        {
                            case 0x01:
                            {
                                TicketDebug("luruerdaizheng");
                                break;
                            }
                            case 0x02:
                            {
                                TicketDebug("biduierdaizheng");
                                break;
                            }
                            default:
                            {

                                TicketDebug(QString("fingerApplyingMode=%1  idApplyingMode=%2").arg(fingerApplyingMode).arg(idApplyingMode));
                                switch(ticketStyle)
                                {
                                    case 0x02:
                                    {
                                        prepare_ipdata_barconfirm();
                                        break;
                                    }
                                    case 0xb1:
                                    case 0x03:
                                    {
                                        prepare_ipdata_icconfirm();
                                        break;
                                    }
                                    case 0x04:
                                    {
                                        prepare_ipdata_idconfirm();
                                        break;
                                    }
                                    case 0x0a:
                                    {
                                        TicketFlagValue(0);
                                        break;
                                    }
                                    default:break;
                                }
                                //TicketFlagValue(0);
                                gateTimer->stop();
                                gateTimer->start(standbyTime);
                                //UiPicDisplay(checkok);
                                break;
                            }
                        }
                        break;
                    }
                }
            }
            break;
        }
        case facerecordedfailure:
        {
            UiCheckTicketMsg(Qt::red, tr("人脸登记失败"));
            TicketDebug("ticketLabel : Recorded failure");

            if(picApplyingMode == 0x03)
            {
                FaceErrTimes++;
                if(FaceErrTimes >= Pb3_FingerInTime)
                {
//                    if(FaceInNum >=1)
//                        FaceInNum--;
//                    else
//                        FaceInNum=0;
                    FaceInNum=0;
                    FaceErrTimes=0;
                }
            }

            if(ticketStyle == 0x02)
                ticketNo = barCodeData;
            else if(ticketStyle == 0x03 || ticketStyle == 0xb1)
                ticketNo = serialNumber;
            else if(ticketStyle == 0x04)
                ticketNo = idCard;
            else
                ticketNo = barCodeData;
            ticketNoLen = ticketNo.length();
            ticketNoNum = 1;

            if(FaceInNum > 0)
            {

                SendToFaceConfirm2(0x01);
                soundType = 0xe1;
                TicketTimerRe();
            }
            else
            {
                //多次登记错误，照片应用=0
                //if(FaceErrTimes >= Pb3_FingerInTime)
                {
                    picApplyingMode=0;
                    fingerApplyingMode=0;
                }
                switch(fingerApplyingMode)
                {
                    case 0x01:
                    {
                        UiTicketstatusDisplay(inputfingerprint);
                        break;
                    }
                    case 0x02:
                    {
                        UiTicketstatusDisplay(matchfingerprint);
                        break;
                    }
                    default:
                    {
                        switch(idApplyingMode)
                        {
                            case 0x01:
                            {
                                TicketDebug("luruerdaizheng");
                                break;
                            }
                            case 0x02:
                            {
                                 TicketDebug("biduierdaizheng");
                                break;
                            }
                            default:
                            {
                                SendToFaceConfirm2(0x01);
                                TicketFlagValue(0);
                                gateTimer->stop();
                                gateTimer->start(standbyTime);
                                UiPicDisplay(checkerr);
                                break;
                            }
                        }
                        break;
                    }
                }

            }

            PlayWav(134,800);
            break;
        }
        case pleasematchface:
        {
            if(FaceMatchNum > 1)
                UiCheckTicketMsg(Qt::green, tr("请比对人脸") + QString::number(FaceMatchNum) + tr("枚"));
            else
                UiCheckTicketMsg(Qt::green, tr("请比对人脸"));

            TicketDebug("ticketLabel : Face recognition");

            PlayWav(160,800);
            faceTimer->start(12000);
            FaceTimerOutflag=0;
    #if IDPICDISPLAY == 0
            UiPicDisplay(facescan);
    #else
            if(peridmatchflag == 1)
                UiPicDisplay(idpicdis);
            else
                UiPicDisplay(facescan);
    #endif
            sendtoface(0x00);
            break;
        }
        case facematchsuccessfully:
        {
            UiCheckTicketMsg(Qt::green, tr("人脸比对成功"));
            TicketDebug("ticketLabel : Match successfully");
            PlayWav(131,800);

#if FACEMODE == BAIDUFACE
            if(FaceMatchNum >= 1)
                FaceMatchNum--;
            else
                FaceMatchNum=0;

            if(FaceMatchNum > 0)
            {
                SendToFaceConfirm(0x00);

                //soundType = 0xD1;
                FaceErrTimes=0;
                TicketTimerRe();
                UiPicDisplay(checkok);
                TicketPerDisplay(1,1);
                gateTimer->stop();
                gateTimer->start(standbyTime);

            }
            else
            {
                //人脸比对成功后，不判断以下
                //ticketPerNum = 1;
                fingerApplyingMode=0;
                idApplyingMode=0;
                switch(fingerApplyingMode)
                {
                    case 0x01:
                    {
                        UiTicketstatusDisplay(inputfingerprint);
                        break;
                    }
                    case 0x02:
                    {
                        UiTicketstatusDisplay(matchfingerprint);
                        break;
                    }
                    default:
                    {
                        switch(idApplyingMode)
                        {
                            case 0x01:
                            {
                                TicketDebug("luruerdaizheng");
                                break;
                            }
                            case 0x02:
                            {
                                 TicketDebug("biduierdaizheng");
                                break;
                            }
                            default:
                            {

                                switch(ticketStyle)
                                {
                                    case 0x02:
                                    {
                                        prepare_ipdata_barconfirm();
                                        break;
                                    }
                                    case 0xb1:
                                    case 0x03:
                                    {
                                        prepare_ipdata_icconfirm();
                                        break;
                                    }
                                    case 0x04:
                                    {
                                        prepare_ipdata_idconfirm();
                                        break;
                                    }
                                    case 0x0a:
                                    {
                                        TicketFlagValue(0);
                                        break;
                                    }

                                }
                                //TicketFlagValue(0);
                                gateTimer->stop();
                                gateTimer->start(standbyTime);
                                //UiPicDisplay(checkok);
                                break;
                            }
                        }
                        break;
                    }
                }
            }
#else
            switch(ticketStyle)
            {
                case 0x02:
                {
                    prepare_ipdata_barconfirm();
                    break;
                }
                case 0xb1:
                case 0x03:
                {
                    prepare_ipdata_icconfirm();
                    break;
                }
                case 0x04:
                {
                    prepare_ipdata_idconfirm();
                    break;
                }
                case 0x0a:
                {
                    TicketFlagValue(0);
                    ticketPerNum = 1;
                    TicketPerDisplay(ticketPerNum,1);
                    UiPicDisplay(checkok);
                    break;
                }
            }
            gateTimer->stop();
            gateTimer->start(standbyTime);
#endif


            break;
        }
        case facematchfailure:
        {

            QString s ;
            switch (FaceTicket_Err)
            {
                case 0x01:
                {
                    s = tr("人脸比对成功(已使用)");
                    ticketSoundAddr = 104;
                    break;
                }
                case 0x02:
                {
                    s = tr("人脸比对成功(无效票)");
                    ticketSoundAddr = 102;
                    break;
                }
                case 0x03:
                {
                    s = tr("人脸比对成功(已过期)");
                    ticketSoundAddr = 116;
                    break;
                }
                case 0x04:
                {
                    s = tr("人脸比对成功(未生效)");
                    ticketSoundAddr = 112;
                    break;
                }
                case 0x0A:
                {
                    s = tr("请勿频繁验证");
                    ticketSoundAddr = 109;
                    break;
                }
                default:
                {
                    s = tr("人脸比对成功(无效票)");
                    ticketSoundAddr = 132;
                    break;
                }
            }
            FaceTicket_Err=0;

            if(ticketArray.count() > 1)//如果还有票，继续验证比对结果
            {
                ticketArray.removeFirst();
                UserEvent *ue = new UserEvent(CR::FACE,this);
                ue->type  =  0x01;
                ue->result = 0x00;
                ue->ticketnore = 0;
                qApp->postEvent(this,ue);
                return ;
            }


            PlayWav(ticketSoundAddr,800);

            UiCheckTicketMsg(Qt::red, s);
            TicketDebug("ticketLabel : Match failure");

#if FACEMODE == BAIDUFACE
            if(picApplyingMode == 0x04)
            {
                FaceErrTimes++;
                if(FaceErrTimes >= Pb5_FingerMatchTime)
                {
//                    if(FaceMatchNum >= 1)
//                        FaceMatchNum--;
//                    else
//                        FaceMatchNum=0;
                    FaceMatchNum=0;
                    FaceErrTimes=0;
                }
            }
            else
            {
                FaceMatchNum=0;
            }

            if(FaceMatchNum > 0)
            {
                SendToFaceConfirm(0x01);

                soundType = 0xD1;
                TicketTimerRe();
            }
            else
            {
                //多次比对错误，照片应用=0
                //if(FaceErrTimes >= Pb3_FingerInTime)
                {
                    picApplyingMode=0;
                    fingerApplyingMode=0;
                }
                switch(fingerApplyingMode)
                {
                    case 0x01:
                    {
                        UiTicketstatusDisplay(inputfingerprint);
                        break;
                    }
                    case 0x02:
                    {
                        UiTicketstatusDisplay(matchfingerprint);
                        break;
                    }
                    default:
                    {
                        switch(idApplyingMode)
                        {
                            case 0x01:
                            {
                                TicketDebug("luruerdaizheng");
                                break;
                            }
                            case 0x02:
                            {
                                 TicketDebug("biduierdaizheng");
                                break;
                            }
                            default:
                            {

                                SendToFaceConfirm(0x01);

                                TicketFlagValue(0);
                                gateTimer->stop();
                                gateTimer->start(standbyTime);
                                UiPicDisplay(checkerr);
                                ticketArray.clear();
                                break;
                            }
                        }
                        break;
                    }
                }
            }
#else
            TicketFlagValue(0);
            gateTimer->stop();
            gateTimer->start(standbyTime);
            UiPicDisplay(checkerr);
#endif
            break;
        }
        case facematchtimeout:
        {
            UiCheckTicketMsg(Qt::red, tr("人脸比对超时"));
            TicketDebug("ticketLabel : Match timeout");
#if FACEMODE == BAIDUFACE
            if(picApplyingMode == 0x04)
            {
                FaceErrTimes++;
                if(FaceErrTimes >= Pb5_FingerMatchTime)
                {
//                    if(FaceMatchNum >= 1)
//                        FaceMatchNum--;
//                    else
//                        FaceMatchNum=0;
                    FaceMatchNum = 0;
                    FaceErrTimes=0;
                }
            }
            if(ticketStyle == 0x02)
                ticketNo = barCodeData;
            else if(ticketStyle == 0x03 || ticketStyle == 0xb1)
                ticketNo = serialNumber;
            else if(ticketStyle == 0x04)
                ticketNo = idCard;
            else
                ticketNo = barCodeData;
            ticketNoLen = ticketNo.length();
            ticketNoNum = 1;

            if(FaceMatchNum > 0 )
            {
                SendToFaceConfirm(0x01,true);
                soundType = 0xD1;
                TicketTimerRe();
            }
            else
            {
                //多次比对错误，照片应用=0
                //if(FaceErrTimes >= Pb3_FingerInTime)
                {
                    picApplyingMode=0;
                    fingerApplyingMode=0;
                }
                switch(fingerApplyingMode)
                {
                    case 0x01:
                    {
                        UiTicketstatusDisplay(inputfingerprint);
                        break;
                    }
                    case 0x02:
                    {
                        UiTicketstatusDisplay(matchfingerprint);
                        break;
                    }
                    default:
                    {
                        switch(idApplyingMode)
                        {
                            case 0x01:
                            {
                                TicketDebug("luruerdaizheng");
                                break;
                            }
                            case 0x02:
                            {
                                 TicketDebug("biduierdaizheng");
                                break;
                            }
                            default:
                            {

                                SendToFaceConfirm(0x01,true);
                                TicketFlagValue(0);
                                gateTimer->stop();
                                gateTimer->start(standbyTime);
                                UiPicDisplay(checkerr);
                                break;
                            }
                        }
                        break;
                    }
                }

            }
#else
            TicketFlagValue(0);
            gateTimer->stop();
            gateTimer->start(standbyTime);
            UiPicDisplay(checkerr);
#endif

            PlayWav(138,800);
            break;
        }
        case facerecordedtimeout:
        {
            UiCheckTicketMsg(Qt::red, tr("人脸登记超时"));
            TicketDebug("ticketLabel : Recorded timeout");

            if(picApplyingMode == 0x03)
            {
                FaceErrTimes++;
                if(FaceErrTimes >= Pb3_FingerInTime)
                {
//                    if(FaceInNum >= 1)
//                        FaceInNum--;
//                    else
//                        FaceInNum=0;
                    FaceInNum=0;
                    FaceErrTimes=0;
                }

            }
            if(ticketStyle == 0x02)
                ticketNo = barCodeData;
            else if(ticketStyle == 0x03 || ticketStyle == 0xb1)
                ticketNo = serialNumber;
            else if(ticketStyle == 0x04)
                ticketNo = idCard;
            else
                ticketNo = barCodeData;
            ticketNoLen = ticketNo.length();
            ticketNoNum = 1;

            if(FaceInNum > 0)
            {
                SendToFaceConfirm2(0x01);

                soundType = 0xe1;
                TicketTimerRe();
            }
            else
            {
                //多次登记错误，照片应用=0
                //if(FaceErrTimes >= Pb3_FingerInTime)
                {
                    picApplyingMode=0;
                    fingerApplyingMode=0;
                }
                switch(fingerApplyingMode)
                {
                    case 0x01:
                    {
                        UiTicketstatusDisplay(inputfingerprint);
                        break;
                    }
                    case 0x02:
                    {
                        UiTicketstatusDisplay(matchfingerprint);
                        break;
                    }
                    default:
                    {
                        switch(idApplyingMode)
                        {
                            case 0x01:
                            {
                                TicketDebug("luruerdaizheng");
                                break;
                            }
                            case 0x02:
                            {
                                 TicketDebug("biduierdaizheng");
                                break;
                            }
                            default:
                            {
                                SendToFaceConfirm2(0x01);

                                TicketFlagValue(0);
                                gateTimer->stop();
                                gateTimer->start(standbyTime);
                                UiPicDisplay(checkerr);
                                break;
                            }
                        }
                        break;
                    }
                }
            }
            PlayWav(136,800);
            break;
        }
        case facedeviceerr:
        {
            FaceDeviceErrFlag=1;
            UiCheckTicketMsg(Qt::red, tr("人脸设备异常(请检查连线或者APP设置)"));
            TicketDebug("ticketLabel : facedeviceerr");
            gateTimer->stop();
            gateTimer->start(standbyTime);
            break;
        }
        case facedeviceok:
        {
            FaceDeviceErrFlag=0;
            UiCheckTicketMsg(Qt::green, tr("人脸设备正常"));
            TicketDebug("ticketLabel : facedeviceok");
            gateTimer->stop();
            gateTimer->start(2000);
            break;
        }
        case facestatusdisplay:
        {
            if(faceenable)
                UiCheckTicketMsg(Qt::green, tr("启用人脸设备"));
            else
                UiCheckTicketMsg(Qt::red, tr("停用人脸设备"));
            TicketDebug("ticketLabel : facestatusdisplay");
            gateTimer->stop();
            gateTimer->start(2000);
            break;
        }
        case faceticketnotmatch:
        {

            UiCheckTicketMsg(Qt::red, tr("票-脸不匹配"));
            TicketDebug("ticketLabel : faceticketnotmatch");

            if(ticketArray.count() > 1)//如果还有票，继续验证比对结果
            {
                ticketArray.removeFirst();
                UserEvent *ue = new UserEvent(CR::FACE,this);
                ue->type  =  0x01;
                ue->result = 0x00;
                ue->ticketnore = 0;
                qApp->postEvent(this,ue);
                return ;
            }

            SendToFaceConfirm(0x01);
            ticketArray.clear();

            picApplyingMode=0;
            gateTimer->stop();
            gateTimer->start(standbyTime);
            UiPicDisplay(checkerr);
            TicketFlagValue(0);
            break;
        }
        default:break;
    }
}
//sys------------------------------------------------------------------------------------
void Form::AesInit()
{
    aes = new TAesClass;
    if(aes == NULL)
    {
        TicketDebug("aes is NULL!");
        return ;
    }
    UCHAR key[1024] = AESKEY;
    UCHAR *p = key;
    aes->InitializePrivateKey(16, p); //进行初始化
}
//canbus---------------------------------------------------------------------------------
void Form::CanBusInit()
{
    canBusThread = new CanBusThread(this);
    connect(canBusThread,SIGNAL(TicketDebug(QString)),this,SLOT(TicketDebug(QString)));
    canBusThread->start();
}
//udp------------------------------------------------------------------------------------
void Form::UdpInit()
{
    udpThread = new UdpThread(this);
    connect(udpThread,SIGNAL(TicketDebug(QString)),this,SLOT(TicketDebug(QString)));
}
void Form::UdpSaveQs(QByteArray udpdata)
{
    quint64 parameter = 0;
    udpThread->mutex.lock();
    qs->setValue("P00_ValueLeft",(quint8)udpdata.data()[0x00]);
    qs->setValue("P01_ValueRight",(quint8)udpdata.data()[0x01]);
    qs->setValue("P02_DebugEnable",(quint8)udpdata.data()[0x02]);
    qs->setValue("P03_OnLineUse",(quint8)udpdata.data()[0x03]);
    qs->setValue("P04_DisplayType",(quint8)udpdata.data()[0x04]);
    qs->setValue("P05_GateMode",(quint8)udpdata.data()[0x05]);
    qs->setValue("P06_GateType",(quint8)udpdata.data()[0x06]);
    qs->setValue("P07_GateComType",(quint8)udpdata.data()[0x07]);
    parameter = 0;
    parameter |= (quint8)udpdata.data()[0x08]<<8;
    parameter |= (quint8)udpdata.data()[0x09];
    qs->setValue("P08_ClientNo",parameter);
    //qs->setValue("P08_ClientNo",BgComm::ByteArrayToString(udpdata.mid(0x08,2)));
    if(0)
    {
        qs->setValue("P10_ProgramVer",BgComm::ByteArrayToString(udpdata.mid(0x10,3)));
        qs->setValue("P18_DevSnr",BgComm::ByteArrayToString(udpdata.mid(0x18,8)));
    }
    qs->setValue("P20_CheckTicketMode",(quint8)udpdata.data()[0x20]);
    qs->setValue("P21_GroupInsertEnable",(quint8)udpdata.data()[0x21]);
    qs->setValue("P22_PartNoGuid",BgComm::ByteArrayToString(udpdata.mid(0xeb,p22PartNoGuidLen)));
    qs->setValue("P22_PartNo",(quint8)udpdata.data()[0x22]);
    qs->setValue("P23_GateNo",(quint8)udpdata.data()[0x23]);
    parameter = 0;
    parameter |= (quint8)udpdata.data()[0x24]<<16;
    parameter |= (quint8)udpdata.data()[0x25]<<8;
    parameter |= (quint8)udpdata.data()[0x26];
    qs->setValue("P24_CheckTicketType",parameter);
    qs->setValue("P28_ImageDisGapTime",(quint8)udpdata.data()[0x28]);
    qs->setValue("P29_ShowTime",(quint8)udpdata.data()[0x29]);
    qs->setValue("P2a_CheckNetTime",(quint8)udpdata.data()[0x2a]);
    parameter = 0;
    parameter |= (quint8)udpdata.data()[0x2b]<<8;
    parameter |= (quint8)udpdata.data()[0x2c];
    qs->setValue("P2b_CheckTicketGapTime",parameter);
    //net
    qs->setValue("P30_Mac",BgComm::ByteArrayToString(udpdata.mid(0x30,6), 16, true, QChar(':')));
    qs->setValue("P40_HostIp",BgComm::ByteArrayToString(udpdata.mid(0x40,4), 10, true, QChar('.'),1));
    qs->setValue("P44_NetMask",BgComm::ByteArrayToString(udpdata.mid(0x44,4), 10, true, QChar('.'),1));
    qs->setValue("P48_GetwayIp",BgComm::ByteArrayToString(udpdata.mid(0x48,4), 10, true, QChar('.'),1));
    qs->setValue("P4C_DNS",BgComm::ByteArrayToString(udpdata.mid(0x4c,4), 10, true, QChar('.'),1));
    qs->setValue("P50_ServerIp",BgComm::ByteArrayToString(udpdata.mid(0x50,4), 10, true, QChar('.'),1));
    parameter = 0;
    parameter |= (quint8)udpdata.data()[0x54]<<8;
    parameter |= (quint8)udpdata.data()[0x55];
    qs->setValue("P54_ServerPort",parameter);
    qs->setValue("P56_ReServerEnable",(quint8)udpdata.data()[0x56]);
    qs->setValue("P57_ReServerIp",BgComm::ByteArrayToString(udpdata.mid(0x57,4), 10, true, QChar('.'),1));
    parameter = 0;
    parameter |= (quint8)udpdata.data()[0x5b]<<8;
    parameter |= (quint8)udpdata.data()[0x5c];
    qs->setValue("P5b_ReServerPort",parameter);
    parameter = 0;
    parameter |= (quint8)udpdata.data()[0x5d]<<8;
    parameter |= (quint8)udpdata.data()[0x5e];
    qs->setValue("P5d_HttpPort",parameter);

    qs->setValue("Ftp_ServerIp",BgComm::ByteArrayToString(udpdata.mid(0xe5,4), 10, true, QChar('.'),1));
    parameter = 0;
    parameter |=(quint8)udpdata.data()[0xe9]<<8;
    parameter |=(quint8)udpdata.data()[0xea];
    qs->setValue("Ftp_Port",parameter);

    //rfid
    qs->setValue("P70_RfidEnable",(quint8)udpdata.data()[0x70]);
    qs->setValue("P71_RfidDevType",(quint8)udpdata.data()[0x71]);
    qs->setValue("P72_RfidTicketType",(quint8)udpdata.data()[0x72]);
    qs->setValue("P73_RfidMoneyEnable",(quint8)udpdata.data()[0x73]);
    qs->setValue("P74_IdCardEnable",(quint8)udpdata.data()[0x74]);
    qs->setValue("P75_IdCardType",(quint8)udpdata.data()[0x75]);
    qs->setValue("P76_IcPassword",BgComm::ByteArrayToString(udpdata.mid(0x76,6)));

    //barcode
    qs->setValue("P90_BarcodeEnable",(quint8)udpdata.data()[0x90]);
    qs->setValue("P91_BarcodeDevType",(quint8)udpdata.data()[0x91]);
    qs->setValue("P92_BarcodeTicketType",(quint8)udpdata.data()[0x92]);
    qs->setValue("P93_BarcodeBaud",(quint8)udpdata.data()[0x93]);
    qs->setValue("P94_BarcodeHead",(quint8)udpdata.data()[0x94]);
    qs->setValue("P95_BarcodeEndLen",(quint8)udpdata.data()[0x95]);
    qs->setValue("P96_BarcodeEndData",BgComm::ByteArrayToString(udpdata.mid(0x96,2)));

    //finger
    qs->setValue("Pb0_FingerEnable",(quint8)udpdata.data()[0xb0]);
    qs->setValue("Pb1_FingerDevType",(quint8)udpdata.data()[0xb1]);
    qs->setValue("Pb2_FingerInTimes",(quint8)udpdata.data()[0xb2]);
    qs->setValue("Pb3_FingerInTime",(quint8)udpdata.data()[0xb3]);
    qs->setValue("Pb4_FingerInGrade",(quint8)udpdata.data()[0xb4]);
    qs->setValue("Pb5_FingerMatchTime",(quint8)udpdata.data()[0xb5]);
    qs->setValue("Pb6_FingerMatchGrade",(quint8)udpdata.data()[0xb6]);

    qs->setValue("Pd0_WifiSsid",BgComm::ByteArrayToString(udpdata.mid(0xd0,10)));
    qs->setValue("Pda_WifiPassword",BgComm::ByteArrayToString(udpdata.mid(0xda,10)));

    qs->setValue("Language",(quint8)udpdata.data()[0xc0]);
    udpThread->mutex.unlock();
    UserEvent *ue = new UserEvent(CR::backuppara,this);
    qApp->postEvent(udpThread,ue);
}
void Form::UdpInitQs()
{
    qs->setValue("P00_ValueLeft","90");
    qs->setValue("P01_ValueRight","90");
    qs->setValue("P02_DebugEnable","1");
    qs->setValue("P03_OnLineUse","1");
    qs->setValue("P04_DisplayType","3");
    qs->setValue("P05_GateMode","0");
    qs->setValue("P06_GateType","1");
    qs->setValue("P07_GateComType","1");
    qs->setValue("P08_ClientNo","12345");
    qs->setValue("P10_ProgramVer","Ver:1.0.0.160121");
    qs->setValue("P18_DevSnr","1234567890");
    qs->setValue("P20_CheckTicketMode","0");
    qs->setValue("P21_GroupInsertEnable","1");
    qs->setValue("P22_PartNoGuid","313233343536");
    qs->setValue("P22_PartNo","1");
    qs->setValue("P23_GateNo","1");
    qs->setValue("P24_CheckTicketType","100001");
    qs->setValue("P28_ImageDisGapTime","10");
    qs->setValue("P29_ShowTime","30");
    qs->setValue("P2a_CheckNetTime","3");
    qs->setValue("P2b_CheckTicketGapTime","20");
    //net
    qs->setValue("P30_Mac","20:16:00:11:22:33");
    qs->setValue("P40_HostIp","192.168.0.110");
    qs->setValue("P44_NetMask","255.255.255.0");
    qs->setValue("P48_GetwayIp","192.168.0.1");
    qs->setValue("P4C_DNS","202.101.172.35");
    qs->setValue("P50_ServerIp","192.168.0.90");
    qs->setValue("P54_ServerPort","3333");
    qs->setValue("P56_ReServerEnable","1");
    qs->setValue("P57_ReServerIp","192.168.0.3");
    qs->setValue("P5b_ReServerPort","3333");
    qs->setValue("P5d_HttpPort","8090");
    //rfid
    qs->setValue("P70_RfidEnable","1");
    qs->setValue("P71_RfidDevType","0");
    qs->setValue("P72_RfidTicketType","3");
    qs->setValue("P73_RfidMoneyEnable","0");
    qs->setValue("P74_IdCardEnable","1");
    qs->setValue("P75_IdCardType","0");
    qs->setValue("P76_IcPassword","313233343536");
    //barcode
    qs->setValue("P90_BarcodeEnable","1");
    qs->setValue("P91_BarcodeDevType","0");
    qs->setValue("P92_BarcodeTicketType","1");
    qs->setValue("P93_BarcodeBaud","1");
    qs->setValue("P94_BarcodeHead","1");
    qs->setValue("P95_BarcodeEndLen","2");
    qs->setValue("P96_BarcodeEndData","0D0A");
    //finger
    qs->setValue("Pb0_FingerEnable","1");
    qs->setValue("Pb1_FingerDevType","0");
    qs->setValue("Pb2_FingerInTimes","2");
    qs->setValue("Pb3_FingerInTime","5");
    qs->setValue("Pb4_FingerInGrade","1");
    qs->setValue("Pb5_FingerMatchTime","5");
    qs->setValue("Pb6_FingerMatchGrade","1");
    //
    qs->setValue("Pd0_WifiSsid","sendinfo");
    qs->setValue("Pda_WifiPassword","1234567890");
    qs->setValue("Ftp_ServerIp","192.168.0.90");
    qs->setValue("Ftp_Port","21");
    qs->setValue("Web_ServerIp","192.168.0.90");
    qs->setValue("Web_Port","8090");
    qs->setValue("username","admin");
    qs->setValue("password","admin");
    qs->setValue("HardwareVer","SDE-GA500-1.2");
    qs->setValue("HardwareSnr","1234567890");
    qs->setValue("Language","1");
    qs->setValue("PhotographEnable","1");
}
void Form::UserconfToSql()
{
    sqlTable->UserconfToSql("P00_ValueLeft", qs->value("P00_ValueLeft","90").toString());
    sqlTable->UserconfToSql("P01_ValueRight", qs->value("P01_ValueRight","90").toString());
    sqlTable->UserconfToSql("P02_DebugEnable", qs->value("P02_DebugEnable","1").toString());
    sqlTable->UserconfToSql("P03_OnLineUse", qs->value("P03_OnLineUse","1").toString());
    sqlTable->UserconfToSql("P04_DisplayType", qs->value("P04_DisplayType","3").toString());
    sqlTable->UserconfToSql("P05_GateMode", qs->value("P05_GateMode","0").toString());
    sqlTable->UserconfToSql("P06_GateType", qs->value("P06_GateType","1").toString());
    sqlTable->UserconfToSql("P07_GateComType", qs->value("P07_GateComType","1").toString());
    sqlTable->UserconfToSql("P08_ClientNo", qs->value("P08_ClientNo","12345").toString());
    sqlTable->UserconfToSql("P10_ProgramVer", qs->value("P10_ProgramVer","Ver:1.0.0.160121").toString());
    sqlTable->UserconfToSql("P18_DevSnr", qs->value("P18_DevSnr","1234567890").toString());
    sqlTable->UserconfToSql("P20_CheckTicketMode", qs->value("P20_CheckTicketMode","0").toString());
    sqlTable->UserconfToSql("P21_GroupInsertEnable", qs->value("P21_GroupInsertEnable","1").toString());
    sqlTable->UserconfToSql("P22_PartNoGuid", qs->value("P22_PartNoGuid","313233343536").toString());
    sqlTable->UserconfToSql("P22_PartNo", qs->value("P22_PartNo","1").toString());
    sqlTable->UserconfToSql("P23_GateNo", qs->value("P23_GateNo","1").toString());
    sqlTable->UserconfToSql("P24_CheckTicketType", qs->value("P24_CheckTicketType","100001").toString());
    sqlTable->UserconfToSql("P28_ImageDisGapTime", qs->value("P28_ImageDisGapTime","10").toString());
    sqlTable->UserconfToSql("P29_ShowTime", qs->value("P29_ShowTime","30").toString());
    sqlTable->UserconfToSql("P2a_CheckNetTime", qs->value("P2a_CheckNetTime","3").toString());
    sqlTable->UserconfToSql("P2b_CheckTicketGapTime", qs->value("P2b_CheckTicketGapTime","20").toString());
    sqlTable->UserconfToSql("P30_Mac", qs->value("P30_Mac","20:16:00:11:22:33").toString());
    sqlTable->UserconfToSql("P40_HostIp", qs->value("P40_HostIp","192.168.0.110").toString());
    sqlTable->UserconfToSql("P44_NetMask", qs->value("P44_NetMask","255.255.255.0").toString());
    sqlTable->UserconfToSql("P48_GetwayIp", qs->value("P48_GetwayIp","192.168.0.1").toString());
    sqlTable->UserconfToSql("P4C_DNS", qs->value("P4C_DNS","202.101.172.35").toString());
    sqlTable->UserconfToSql("P50_ServerIp", qs->value("P50_ServerIp","192.168.0.90").toString());
    sqlTable->UserconfToSql("P54_ServerPort", qs->value("P54_ServerPort",3333).toString());
    sqlTable->UserconfToSql("P56_ReServerEnable", qs->value("P56_ReServerEnable","1").toString());
    sqlTable->UserconfToSql("P57_ReServerIp", qs->value("P57_ReServerIp","192.168.0.3").toString());
    sqlTable->UserconfToSql("P5b_ReServerPort", qs->value("P5b_ReServerPort","3333").toString());
    sqlTable->UserconfToSql("P5d_HttpPort", qs->value("P5d_HttpPort","8090").toString());
    sqlTable->UserconfToSql("P70_RfidEnable", qs->value("P70_RfidEnable","1").toString());
    sqlTable->UserconfToSql("P71_RfidDevType", qs->value("P71_RfidDevType","0").toString());
    sqlTable->UserconfToSql("P72_RfidTicketType", qs->value("P72_RfidTicketType","3").toString());
    sqlTable->UserconfToSql("P73_RfidMoneyEnable", qs->value("P73_RfidMoneyEnable","0").toString());
    sqlTable->UserconfToSql("P74_IdCardEnable", qs->value("P74_IdCardEnable","1").toString());
    sqlTable->UserconfToSql("P75_IdCardType", qs->value("P75_IdCardType","0").toString());
    sqlTable->UserconfToSql("P76_IcPassword", qs->value("P76_IcPassword","313233343536").toString());
    sqlTable->UserconfToSql("P90_BarcodeEnable", qs->value("P90_BarcodeEnable","1").toString());
    sqlTable->UserconfToSql("P91_BarcodeDevType", qs->value("P91_BarcodeDevType","0").toString());
    sqlTable->UserconfToSql("P92_BarcodeTicketType", qs->value("P92_BarcodeTicketType","1").toString());
    sqlTable->UserconfToSql("P93_BarcodeBaud", qs->value("P93_BarcodeBaud","1").toString());
    sqlTable->UserconfToSql("P94_BarcodeHead", qs->value("P94_BarcodeHead","1").toString());
    sqlTable->UserconfToSql("P95_BarcodeEndLen", qs->value("P95_BarcodeEndLen","2").toString());
    sqlTable->UserconfToSql("P96_BarcodeEndData", qs->value("P96_BarcodeEndData","0D0A").toString());
    sqlTable->UserconfToSql("Pb0_FingerEnable", qs->value("Pb0_FingerEnable","1").toString());
    sqlTable->UserconfToSql("Pb1_FingerDevType", qs->value("Pb1_FingerDevType","0").toString());
    sqlTable->UserconfToSql("Pb2_FingerInTimes", qs->value("Pb2_FingerInTimes","2").toString());
    sqlTable->UserconfToSql("Pb3_FingerInTime", qs->value("Pb3_FingerInTime","5").toString());
    sqlTable->UserconfToSql("Pb4_FingerInGrade", qs->value("Pb4_FingerInGrade","1").toString());
    sqlTable->UserconfToSql("Pb5_FingerMatchTime", qs->value("Pb5_FingerMatchTime","5").toString());
    sqlTable->UserconfToSql("Pb6_FingerMatchGrade", qs->value("Pb6_FingerMatchGrade","1").toString());
    sqlTable->UserconfToSql("Pd0_WifiSsid", qs->value("Pd0_WifiSsid","sendinfo").toString());
    sqlTable->UserconfToSql("Pda_WifiPassword", qs->value("Pda_WifiPassword","1234567890").toString());
    sqlTable->UserconfToSql("Ftp_ServerIp", qs->value("Ftp_ServerIp","192.168.0.90").toString());
    sqlTable->UserconfToSql("Ftp_Port", qs->value("Ftp_Port","21").toString());
    sqlTable->UserconfToSql("Web_ServerIp", qs->value("Web_ServerIp","192.168.0.90").toString());
    sqlTable->UserconfToSql("Web_Port", qs->value("Web_Port","8090").toString());
    sqlTable->UserconfToSql("username", qs->value("username","admin").toString());
    sqlTable->UserconfToSql("password", qs->value("password","admin").toString());
    sqlTable->UserconfToSql("HardwareVer", qs->value("HardwareVer","SDE-GA500-1.2").toString());
    sqlTable->UserconfToSql("HardwareSnr", qs->value("HardwareSnr","1234567890").toString());
    sqlTable->UserconfToSql("Language", qs->value("Language","1").toString());
    sqlTable->UserconfToSql("PhotographEnable", qs->value("PhotographEnable","1").toString());
}
void Form::UserconfSqlSync()
{
    QFileInfo fi(QS_FILEPATH);

    QDateTime userConfTime;
    userConfTime = fi.lastModified();
    //qDebug()<<userConfTime;

    QDateTime userConfSqlTime;
    userConfSqlTime = sqlTable->SqlUserconfTimeRead();
    //qDebug()<<userConfSqlTime;

    if(userConfTime > userConfSqlTime)
    {
        //TicketDebug("<---UserconfToSql--->");
        qDebug()<<"<---UserconfToSql--->";
        UserconfToSql();
        sqlTable->UserconfToSql("time", fi.lastModified().toString("yyyy-MM-dd hh:mm:ss"));
    }
    else if(userConfTime < userConfSqlTime)
    {
        //TicketDebug("<---SqlToUserconf--->");
        qDebug()<<"<---SqlToUserconf--->";
        sqlTable->SqlToUserconf();
        sqlTable->UserconfToSql("time", fi.lastModified().toString("yyyy-MM-dd hh:mm:ss"));
    }
    else
    {
        //TicketDebug("<---Sql and Userconf are equal--->");
        qDebug()<<"<---Sql and Userconf are equal--->";
    }
    P5d_HttpPort = qs->value("P5d_HttpPort","local").toString();
    if(P5d_HttpPort.length() == 0)
    {
        P5d_HttpPort = "local";
    }
    if(P5d_HttpPort == "local")
    {
        UdpInitQs();
    }
}
//tcpclient------------------------------------------------------------------------------
void Form::TcpInit()
{
    bool ok;

    ipDisFlag = 0;
    systemStartFlag = 0;
    tcpConnectFlag = 0;
    tcpReadBackFlag = 1;
    backupServerFlag = 0;
    userTimeOutType = 0;
    netLinkState = 0;
    socketLinkState = 0;
    tcpHeadBackup = 0x00;

    tcpHeartTimer = new QTimer(this);
    connect(tcpHeartTimer,SIGNAL(timeout()),this,SLOT(TcpHeart()));

    tcpRecTimer = new QTimer(this);
    connect(tcpRecTimer,SIGNAL(timeout()),this,SLOT(TcpRecTimeOut()));

    tcpConnectTimer = new QTimer(this);
    connect(tcpConnectTimer,SIGNAL(timeout()),this,SLOT(TcpConnectTimerOut()));

    tcpResponseTimer = new QTimer(this);
    connect(tcpResponseTimer,SIGNAL(timeout()),this,SLOT(TcpResponseTimerOut()));

    TicketDebug("*******************TcpInit_start*******************");
    P2a_CheckNetTime = qs->value("P2a_CheckNetTime",0).toInt(&ok);
    if(!ok)
    {
        P2a_CheckNetTime = 3;
    }
    if(P2a_CheckNetTime < 2)
    {
        P2a_CheckNetTime = 2;
        qs->setValue("P2a_CheckNetTime",P2a_CheckNetTime);
    }

    //备用服务器参数
    P56_ReServerEnable = qs->value("P56_ReServerEnable",0).toInt(&ok);
    if(!ok)
    {
        P56_ReServerEnable = 0;
    }

    P57_ReServerIp = qs->value("P57_ReServerIp","192.168.0.3").toString();
    if(P57_ReServerIp.length() == 0)
    {
        P57_ReServerIp = "192.168.0.3";
    }

    P5b_ReServerPort = qs->value("P5b_ReServerPort",3333).toInt(&ok);
    if(!ok)
    {
        P5b_ReServerPort = 3333;
    }

    //TCP 参数
    P50_ServerIp = qs->value("P50_ServerIp","192.168.0.90").toString();
    if(P50_ServerIp.length() == 0)
    {
        P50_ServerIp = "192.168.0.90";
    }
    TicketDebug("serverip: " + P50_ServerIp);

    P54_ServerPort = qs->value("P54_ServerPort",3333).toInt(&ok);
    if(!ok)
    {
        P54_ServerPort = 3333;
    }
    TicketDebug(QString("port : %1").arg(P54_ServerPort,0,10, (QChar)'0'));

#if ARM_LINUX
    //QProcess::execute("ifconfig eth0 down");
    QString cmdstr0 = "ifconfig eth0 hw ether ";
    P30_Mac = qs->value("P30_Mac","20:16:00:11:22:33").toString();
    if(P30_Mac.length() == 0)
    {
        P30_Mac = "20:16:00:11:22:33";
    }
    cmdstr0.append(P30_Mac);
    TicketDebug(cmdstr0);
    QProcess::execute(cmdstr0);

    QString cmdstr1 = "ifconfig eth0 ";
    P40_HostIp = qs->value("P40_HostIp","192.168.0.110").toString();
    if(P40_HostIp.length() == 0)
    {
        P40_HostIp = "192.168.0.110";
    }
    cmdstr1.append(P40_HostIp);
    //cmdstr1.append(" broadcast 192.168.0.255 netmask ");
    cmdstr1.append(" netmask ");

    QString  P44_NetMask;
    P44_NetMask = qs->value("P44_NetMask","255.255.255.0").toString();
    if(P44_NetMask.length() == 0)
    {
        P44_NetMask = "255.255.255.0";
    }
    cmdstr1.append(P44_NetMask);
    cmdstr1.append(" up");
    TicketDebug(cmdstr1);
    QProcess::execute(cmdstr1);

    QString cmdstr2 = "route add default gw \"";
    P48_GetwayIp = qs->value("P48_GetwayIp","192.168.0.1").toString();
    if(P48_GetwayIp.length() == 0)
    {
        P48_GetwayIp = "192.168.0.1";
    }
    cmdstr2.append(P48_GetwayIp);
    cmdstr2.append("\" dev eth0");
    TicketDebug(cmdstr2);
    QProcess::execute(cmdstr2);
#endif
    ipDisTimer->start(5000);

    tcpClientThread = new TcpClientThread(this);
    connect(tcpClientThread,SIGNAL(TicketDebug(QString)),this,SLOT(TicketDebug(QString)));
    tcpClientThread->start();

    TicketDebug("*******************TcpInit_stop********************");

    UiChange(netmsg);

    netlinkstatus = new NetlinkStatus(this);
    connect(netlinkstatus,SIGNAL(TicketDebug(QString)),this,SLOT(TicketDebug(QString)));
    netlinkstatus->start();

    UiPeripheralState(net, init);
}
void Form::TcpConnect()
{ 
    socketLinkState = 1;
    if(backupServerFlag && P56_ReServerEnable)
    {
        UserEvent *ue = new UserEvent(CR::DoConnect,this);
        ue->ipAddr = P57_ReServerIp;
        ue->port = P5b_ReServerPort;
        qApp->postEvent(tcpClientThread,ue);
        serverIp = P57_ReServerIp;
    }
    else
    {
        UserEvent *ue = new UserEvent(CR::DoConnect,this);
        ue->ipAddr = P50_ServerIp;
        ue->port = P54_ServerPort;
        qApp->postEvent(tcpClientThread,ue);
        serverIp = P50_ServerIp;
    }
    UiVerIpUpdate();

    tcpResponseTimer->start(2000);
}
void Form::TcpDisConnect()
{
    socketLinkState = 0;
    UserEvent *ue = new UserEvent(CR::DoDisconnect,this);
    qApp->postEvent(tcpClientThread,ue);
    tcpResponseTimer->start(1000);
}
void Form::TcpHeart()
{

    heartbeat = "touch /tmp/heartbeat";
    //TicketDebug(heartbeat);
    QProcess::execute(heartbeat);
    QProcess::execute("sync");


    if(checkTicketState)
        return;
    if(tcpReadBackFlag == 0)
        return;
    int noUpCnt = 0;
    QByteArray sqlData;

    switch(sqlReadStep)
    {
        case 0: noUpCnt = sqlTable->NoUpCountCheckTicket("confirmbarticket");break;
        case 1: noUpCnt = sqlTable->NoUpCountCheckTicket("confirmicticket");break;
        case 2: noUpCnt = sqlTable->NoUpCountCheckTicket("confirmidticket");break;
        case 3: noUpCnt = sqlTable->NoUpCountCheckTicket("rollbackbarticket");break;
        default: noUpCnt = 0; break;
    }

    if(noUpCnt && tcpConnectFlag)
    {
        switch(sqlReadStep)
        {
            case 0:
            {
                sqlData = sqlTable->ReadCheckTicket("confirmbarticket");
                TicketDebug("ReadConfirmBarTicket: "+BgComm::ByteArrayToString(sqlData, 16, true));
                TcpSendCmd(0xbf,0x84,sqlData);
                break;
            }
            case 1:
            {
                sqlData = sqlTable->ReadCheckTicket("confirmicticket");
                TicketDebug("ReadConfirmIcTicket: "+BgComm::ByteArrayToString(sqlData, 16, true));
                TcpSendCmd(0xcf,0x84,sqlData);
                break;
            }
            case 2:
            {
                sqlData = sqlTable->ReadCheckTicket("confirmidticket");
                TicketDebug("ReadConfirmIdTicket: "+BgComm::ByteArrayToString(sqlData, 16, true));
                TcpSendCmd(0xdf,0x84,sqlData);
                break;
            }
            case 3:
            {
                sqlData = sqlTable->ReadCheckTicket("rollbackbarticket");
                TicketDebug("ReadRollBackBarTicket: "+BgComm::ByteArrayToString(sqlData, 16, true));
                TcpSendCmd(0xfb,0x80,sqlData);
                break;
            }
            default:sqlData.resize(0);break;
        }
    }
    else
    {
        QByteArray buf;
        buf[0] = 0x01;
#if PROTOCOLVER == NEWPROTOCOL
        buf = PackTLVEntity(HC, buf);
#endif
        TcpSendCmd(0xa0,0x00,buf);
    }

    if(sqlReadStep >= 3)
        sqlReadStep = 0;
    else
        sqlReadStep++;

    return;

    //qDebug()<<"tcp Heart";
}
void Form::TcpSendCmd(quint8 head, quint8 type, QByteArray cmd)
{
#if PROTOCOLVER == NEWPROTOCOL
    QByteArray temp;
    if((type&0x80) == 0x80)
    {
        temp = cmd.mid(0,8);
        cmd.remove(0,8);
        type &= 0x7f;
    }
    else
    {
        temp = QCryptographicHash::hash(QDateTime::currentDateTime().toString("yyyyMMddhhmmsszzz").toAscii(),QCryptographicHash::Md5).mid(0,8);
    }

    cmd += PackTLVEntity(CID, temp);//通信ID
    switch(head)
    {
    case 0xa0:
    case 0xbf:
    case 0xcf:
    case 0xdf:
    case 0xfb:
        heartBufCID = temp;
        break;
    default:
        bufCID = temp;
        break;
    }

    cmd += PackTLVEntity(ATS, IntToByte(0x01));//应用类型

    QString str;
    str = "SENDINFO";
    str += BgComm::ByteArrayToString(cmd);
    str += "SENDINFO";
    cmd += PackTLVEntity(MD5, QCryptographicHash::hash(str.toAscii(),QCryptographicHash::Md5).mid(0,6));//MD5加密数据

    if(head != 0xa0)
    {
        TicketDebug("tcp send raw :"+ BgComm::ByteArrayToString(cmd, 16, true));
        ClearTLVEntityArray();
        GenerateTLVEntityArray(cmd, 0, cmd.length());
        ExportTLVEntity2File();
    }

    char miwen[40*1024];
    str = BgComm::ByteArrayToString(cmd);
    DWORD miwenlength = aes->OnAesEncrypt((LPVOID)str.toAscii().data(), str.length(), (LPVOID)miwen); //进行AES加密
    cmd = QByteArray::fromRawData(miwen,miwenlength);
#endif
    QByteArray sendbuf;

    tcpHeadBackup = head;
    sendbuf[0] = head;
    sendbuf[1] = type;
    sendbuf[2] = 0x00;
    sendbuf[3] = 0x00;

    sendbuf += cmd;
    sendbuf[2] = (sendbuf.length()-4)/256; //计算命令的长度
    sendbuf[3] = (sendbuf.length()-4)%256; //计算命令的长度

    sendbuf += BgComm::XORVerify(sendbuf);//加校验位的

    UserEvent *ue = new UserEvent(CR::TcpSendMsg,this);
    ue->byteArray = sendbuf;
    qApp->postEvent(tcpClientThread,ue);
    tcpSendByteArray = sendbuf;
    tcpSendCmdHead = head;
    tcpSendCmdType = type;

    tcpReadBackFlag = 0;//new cmd
    tcpRecTimer->start(P2a_CheckNetTime*2000);
    if(head != 0xa0)
    {
        TicketDebug("tcp send :"+ BgComm::ByteArrayToString(sendbuf, 16, true));
    }
}
void Form::TcpRecTimeOut()//发送数据超时会调用这个函数
{
    tcpRecTimer->stop();

    gateStr = UiGetCheckTicketMsg();
    UiTicketstatusDisplay(networkdelay);
    TcpDisConnect();
}
void Form::TcpReadCmd(QByteArray cmd)
{
    if((quint8)cmd.data()[0] != 0xa0)
    {
        if(cmd.length()<600)
            TicketDebug("tcp recv :"+ BgComm::ByteArrayToString(cmd, 16, true));
        else
            TicketDebug("tcp recv :"+ BgComm::ByteArrayToString(cmd.mid(0,40), 16, true)+"......");
    }

    tcpReadBackFlag = 1; //心跳相关的
    tcpRecTimer->stop(); //5S钟内要收到服务器的数据，不然显示检查网络

    quint8 crc;
    crc = BgComm::XORVerify(cmd.mid(0,cmd.length()-1));
    if(crc != (quint8)cmd.data()[cmd.length()-1])
    {
        UiTicketstatusDisplay(communicationerrorcrc);
        return;
    }

    #if PROTOCOLVER == NEWPROTOCOL
    char jiemi[40*1024];
    DWORD jiemilength = aes->OnAesUncrypt((LPVOID)cmd.mid(4,cmd.length()-5).data(), cmd.length()-5,(LPVOID)jiemi); //进行AES解密
    cmd.replace(4, cmd.length()-5, BgComm::StringToByteArray(BgComm::FormatString(jiemi, 2, QChar(' ')), 16, QChar(' ')));

    if((quint8)cmd.data()[0] != 0xa0)
    {
        if(cmd.length()<600)
            TicketDebug("tcp recv raw:"+ BgComm::ByteArrayToString(cmd, 16, true));
        else
            TicketDebug("tcp recv raw:"+ BgComm::ByteArrayToString(cmd.mid(0,40), 16, true)+"......");
    }

    QString str;
    ClearTLVEntityArray();
    str = GenerateTLVEntityArray(cmd, 4, (cmd.length()-5));
    if((quint8)cmd.data()[0] != 0xa0)
    {
        TicketDebug(str);
        ExportTLVEntity2File();
    }
    if(str.indexOf("Successfully") == -1)
    {
        UiTicketstatusDisplay(communicationerrortlv);
        return;
    }

    QString strmd5;
    strmd5 = "SENDINFO";
    strmd5 += BgComm::ByteArrayToString(cmd.mid(4,cmd.length()-13));//2字节命令头、2字节长度、8字节MD5数据、1字节校验位
    strmd5 += "SENDINFO";
    QByteArray md5 = QCryptographicHash::hash(strmd5.toAscii(),QCryptographicHash::Md5).mid(0,6);//MD5加密数据
    if(md5 != GetTLVEntityValue(MD5))//if(md5 != cmd.right(7).left(6))
    {
        UiTicketstatusDisplay(communicationerrormd5);
        return;
    }

    QByteArray ats;
    ats[0] = 0x01;
    if(ats != GetTLVEntityValue(ATS))
    {
        UiTicketstatusDisplay(communicationerrorats);
        return;
    }

    switch((quint8)cmd.data()[0])
    {
        case 0xa0:
        case 0xbf:
        case 0xcf:
        case 0xdf:
        case 0xfb:
        {
            if(heartBufCID != GetTLVEntityValue(CID))
            {
                UiTicketstatusDisplay(communicationerrorcid);
                return;
            }
            break;
        }
        default:
        {
            if(bufCID != GetTLVEntityValue(CID))
            {
                UiTicketstatusDisplay(communicationerrorcid);
                return;
            }
            break;
        }
    }
    #endif

    switch((quint8)cmd.data()[0])
    {
        case 0xa0:
        {
            tcpConnectFlag = true;
            if(userTimeOutType == 0x09)
            {
                if(QDate::currentDate()>endTime)
                {
                    userTimeOutType = 1;
                    udpThread->mutex.lock();
                    qs->setValue("ctime",QDate::currentDate().toString("yyyyMMdd"));
                    udpThread->mutex.unlock();
                    //qDebug()<<QDate::currentDate();
                }
                if(beginTime <= QDate::currentDate())
                {
                    beginTime = QDate::currentDate();
                    bgtimes++;
                    if(bgtimes >= 400)
                    {
                        bgtimes = 0;
                        udpThread->mutex.lock();
                        qs->setValue("ctime",QDate::currentDate().toString("yyyyMMdd"));
                        udpThread->mutex.unlock();
                        //qDebug()<<bgtimes;
                    }
                }
                else
                {
                    userTimeOutType = 2;
                }
            }
#if SNR_ENABLE
            if(userTimeOutType < 0x09)
            {
                UiTicketstatusDisplay(errtype);
                DoorControl(closedoor, doortwo);
                return;
            }
#endif
            break;
        }
        case 0xa1:
        {
            tcpConnectFlag = true;

            HsSaveTicketNum(0, 0);
            HsSavePassNum(0, 0);

            if(checkTicketState)
                UiCheckTicketMsg(Qt::green, gateStr);
            else
                GateLableInit();

#if BARFETCHCMDSIGNOPEN
            prepare_ipdata_barFetchCmdSign();
#endif

             tcpHeartTimer->start(P2a_CheckNetTime*1000);

#if PROTOCOLVER == NEWPROTOCOL
            uiTimeSet(GetTLVEntityValue(SYST));
            UiPartAndGateUpdate(GetTLVEntityValue(SCNAM));
#else
            uiTimeSet(cmd.mid(4,7));
            UiPartAndGateUpdate(cmd.mid(4,7));
#endif

#if FINGEROPENMODE
            if(Pb1_FingerDevType == 0x01)
            {
                fingerStep = 0x03;
                USBFingerTemplate_direct();
            }
            else
                FingerTemplate(fingerchangkai);
#endif

#if ARM_LINUX
            if(camerRunFlag)
            {
                camerRunFlag = 0;
                videoTimer->stop();
                videoTimer->start(300);
            }
#endif
            break;
        }
        case 0xa9:
        {
            QByteArray odata;
            QByteArray sdata;
            QByteArray mddata;
            QString str;
#if PROTOCOLVER == NEWPROTOCOL
            sdata = GetTLVEntityValue(SNENC);
#else
            sdata = cmd.mid(5,cmd.length()-12);
#endif
            odata = Decrypt(sdata,2012);

            str = "SENDINFO";
            str += odata.mid(0,odata.length()-17);
            str += "SENDINFO";
            sdata.resize(0);
            sdata = QCryptographicHash::hash(str.toAscii(),QCryptographicHash::Md5).mid(0,8);
            str.resize(0);
            str += odata.mid(odata.length()-17,16);
            mddata = BgComm::StringToByteArray(BgComm::FormatString(str, 2, QChar(' ')), 16, QChar(' '));

            if(sdata == mddata)
            {
                userTimeOutType = gettime(odata);
            }
            else
            {
                userTimeOutType = 4;
            }

            QByteArray sendbuf;
#if PROTOCOLVER == NEWPROTOCOL
            sendbuf = PackTLVEntity(SCN, P22_PartNoGuid);//景点号
#else
            sendbuf.resize(0);
#endif
            TcpSendCmd(0xa1,0x00,sendbuf);
            tcpConnectFlag = true;
            break;
        }
        case 0xb0:
        {
            //UiPicDisplay(eoq);
            switch((quint8)cmd.data()[1])
            {
                case 0x00:
                {
                    //0   1   2-3     4     5-8   9     10-29 30-36 37-38 39     40     41-56
                    //b0  00  length  状态、ID号、票类、票型、时间、人数、语音1、语音2、16字节扩展位
                    UiTicketTypeDisplay(cmd.mid(10,20));
                    UiTicketTimeDisplay(cmd.mid(30,7),ttUnused);
                    if((quint8)cmd.data()[4] != 0x00)
                    {
                        TicketVerdictDisplay((quint8)cmd.data()[4]);
                        return;
                    }
                    ticketId = cmd.mid(5,4);
                    ticketT = (quint8)cmd.data()[9];
                    ticketPerNumTemp = ((quint8)cmd.data()[37])*256 + (quint8)cmd.data()[38];

                    if(ticketPerNumTemp > 1)
                    {
                        ticketT = 0x02;
                        ticketClassStr = "团队";
                    }
                    else
                    {
                        ticketT = 0x01;
                        ticketClassStr = "散客";
                    }
                    if(P21_GroupInsertEnable)
                    {
                        //特殊模式、允许插票、前一张票是散客且人数没过完、现在是团队票
                        if((ticketT == 0x02)&&(ticketTflag == 0)&&passPerNum&&P20_CheckTicketMode)
                        {
                            UiTicketstatusDisplay(pleasepasstheticket);
                            return;
                        }
                    }
                    else
                    {

                        if(P20_CheckTicketMode)//特殊模式
                        {
                            if(passPerNum && ticketT == 0x02)//只要人没过完就提示
                            {
                                UiTicketstatusDisplay(pleasewait);
                                TicketFlagValue(0);
                                gateTimer->stop();
                                gateTimer->start(standbyTime);
                                return;
                            }
                        }
                        else
                        {
                            //禁止插票、人数没过完、前一张或现在是团队票
                            if(((ticketT == 0x02)||ticketTflag)&&passPerNum)
                            {
                                UiTicketstatusDisplay(pleasewait);
                                TicketFlagValue(0);
                                gateTimer->stop();
                                gateTimer->start(standbyTime);
                                return;
                            }
                        }
                    }
                    ticketPerNum = ticketPerNumTemp;
                    if((quint8)cmd.data()[39] != 0x00)
                    {
                        ticketSoundAddr = (quint8)cmd.data()[39];
                        //ticketSoundAddr = BgComm::ByteArrayToString(cmd.mid(39,1)).toInt();
                    }
                    else
                    {
                        ticketSoundAddr = (quint8)cmd.data()[40];
                        //ticketSoundAddr = BgComm::ByteArrayToString(cmd.mid(40,1)).toInt();
                    }
                    UiTicketstatusDisplay(swipesuccessful);
                    break;
                }
                case 0x01:
                {
                    //0   1   2-3     4     5-8   9     10-29 30-36 37-38 39            40-551    552    553    554-569
                    //b0  01  length  状态、ID号、票类、票型、时间、人数、指纹应用模式、指纹模板、语音1、语音2、16字节扩展位
                    UiTicketTypeDisplay(cmd.mid(10,20));
                    UiTicketTimeDisplay(cmd.mid(30,7),ttUnused);
                    if((quint8)cmd.data()[4] != 0x00)
                    {
                        TicketVerdictDisplay(cmd.data()[4]);
                        return;
                    }
                    ticketId = cmd.mid(5,4);
                    ticketT = (quint8)cmd.data()[9];
                    ticketPerNumTemp = ((quint8)cmd.data()[37])*256 + (quint8)cmd.data()[38];

                    if(ticketPerNumTemp > 1)
                    {
                        ticketT = 0x02;
                        ticketClassStr = "团队";
                    }
                    else
                    {
                        ticketT = 0x01;
                        ticketClassStr = "散客";
                    }
                    if(P21_GroupInsertEnable)
                    {
                        //特殊模式、允许插票、前一张票是散客且人数没过完、现在是团队票
                        if((ticketT == 0x02)&&(ticketTflag == 0)&&passPerNum&&P20_CheckTicketMode)
                        {
                            UiTicketstatusDisplay(pleasepasstheticket);
                            return;
                        }
                    }
                    else
                    {
                        if(P20_CheckTicketMode)//特殊模式
                        {
                            if(passPerNum && ticketT == 0x02)//只要人没过完就提示
                            {
                                UiTicketstatusDisplay(pleasewait);
                                TicketFlagValue(0);
                                gateTimer->stop();
                                gateTimer->start(standbyTime);
                                return;
                            }
                        }
                        else
                        {
                            //禁止插票、人数没过完、前一张或现在是团队票
                            if(((ticketT == 0x02)||ticketTflag)&&passPerNum)
                            {
                                UiTicketstatusDisplay(pleasewait);
                                TicketFlagValue(0);
                                gateTimer->stop();
                                gateTimer->start(standbyTime);
                                return;
                            }
                        }
                    }
                    ticketPerNum = ticketPerNumTemp;

                    fingerApplyingMode = (quint8)cmd.data()[39];

                    if((quint8)cmd.data()[552] != 0x00)
                    {
                        ticketSoundAddr = (quint8)cmd.data()[552];
                        //ticketSoundAddr = BgComm::ByteArrayToString(cmd.mid(552,1)).toInt();
                    }
                    else
                    {
                        ticketSoundAddr = (quint8)cmd.data()[553];
                       //ticketSoundAddr = BgComm::ByteArrayToString(cmd.mid(553,1)).toInt();
                    }
                    FingerInNum = (quint8)cmd.data()[554];
                    FingerMatchNum = FingerInNum;
                    switch(fingerApplyingMode)
                    {
                        case 0x00:
                        {
                            UiTicketstatusDisplay(swipesuccessful);
                            break;
                        }
                        case 0x01:
                        {
                            UiTicketstatusDisplay(inputfingerprint);
                            break;
                        }
                        case 0x02:
                        {
                            UiTicketstatusDisplay(matchfingerprint);
                            break;
                        }
                        default:
                        {
                            UiTicketstatusDisplay(swipesuccessful);
                            break;
                        }
                    }
                    break;
                }
                case 0x02:
                {
                    //0   1   2-3     4     5-8   9     10-29 30-36 37-38 39            40     41     42-57
                    //b0  02  length  状态、ID号、票类、票型、时间、人数、照片应用模式、语音1、语音2、16字节扩展位
                    UiTicketTypeDisplay(cmd.mid(10,20));
                    UiTicketTimeDisplay(cmd.mid(30,7),ttUnused);
                    if((quint8)cmd.data()[4] != 0x00)
                    {
                        TicketVerdictDisplay((quint8)cmd.data()[4]);
                        return;
                    }
                    ticketId = cmd.mid(5,4);
                    ticketT = (quint8)cmd.data()[9];
                    ticketPerNumTemp = ((quint8)cmd.data()[37])*256 + (quint8)cmd.data()[38];

                    if(ticketPerNumTemp > 1)
                    {
                        ticketT = 0x02;
                        ticketClassStr = "团队";
                    }
                    else
                    {
                        ticketT = 0x01;
                        ticketClassStr = "散客";
                    }
                    if(P21_GroupInsertEnable)
                    {
                        //特殊模式、允许插票、前一张票是散客且人数没过完、现在是团队票
                        if((ticketT == 0x02)&&(ticketTflag == 0)&&passPerNum&&P20_CheckTicketMode)
                        {
                            UiTicketstatusDisplay(pleasepasstheticket);
                            return;
                        }
                    }
                    else
                    {
                        if(P20_CheckTicketMode)//特殊模式
                        {
                            if(passPerNum && ticketT == 0x02)//只要人没过完就提示
                            {
                                UiTicketstatusDisplay(pleasewait);
                                TicketFlagValue(0);
                                gateTimer->stop();
                                gateTimer->start(standbyTime);
                                return;
                            }
                        }
                        else
                        {
                            //禁止插票、人数没过完、前一张或现在是团队票
                            if(((ticketT == 0x02)||ticketTflag)&&passPerNum)
                            {
                                UiTicketstatusDisplay(pleasewait);
                                TicketFlagValue(0);
                                gateTimer->stop();
                                gateTimer->start(standbyTime);
                                return;
                            }
                        }
                    }
                    ticketPerNum = ticketPerNumTemp;

                    picApplyingMode = (quint8)cmd.data()[39];
                    if((quint8)cmd.data()[40] != 0x00)
                    {
                        ticketSoundAddr = (quint8)cmd.data()[40];
                        //ticketSoundAddr = BgComm::ByteArrayToString(cmd.mid(40,1)).toInt();
                    }
                    else
                    {
                        ticketSoundAddr = (quint8)cmd.data()[41];
                        //ticketSoundAddr = BgComm::ByteArrayToString(cmd.mid(41,1)).toInt();
                    }
                    ticketAuthorizeType = (quint8)cmd.data()[43];

                    switch(picApplyingMode)
                    {
                        case 0x00:
                        {
                            UiTicketstatusDisplay(swipesuccessful);
                            break;
                        }
                        case 0x02:
                        {
                            picDownTimes = 1;
                            prepare_ipdata_downpic(picDownTimes);
                            break;
                        }
                        case 0x01:
                        {
                            getPic();
                            break;
                        }
                        default:
                        {
                            UiTicketstatusDisplay(swipesuccessful);
                            break;
                        }
                    }
                    break;
                }
                case 0x03:
                {
                    //0   1   2-3     4     5-8   9     10-29 30-36 37-38 39       40            41      42     43     44-61       62-77
                    //b0  03  length  状态、ID号、票类、票型、时间、人数、照片应用模式、指纹应用模式、二代证应用模式、语音1、语音2、二代证号码、扩展位16字节
                    UiTicketTypeDisplay(cmd.mid(10,20));
                    UiTicketTimeDisplay(cmd.mid(30,7),ttUnused);

                    if((quint8)cmd.data()[4] != 0x00)
                    {
                        if(ticketSource == 0x03 )//说明是直接比对人脸的返回条码 进行检票  且票无效
                        {
                            TicketDebug(QString("=================ticketSource:%1").arg(ticketSource));
                            FaceTicket_Err = (quint8)cmd.data()[4];
                            TicketDebug(QString("------直接比对人脸--人脸返回成功，查票返回失败------"));
                            UiTicketstatusDisplay(facematchfailure);

                        }
                        else
                        {
                            TicketVerdictDisplay((quint8)cmd.data()[4]);
                        }
                        return;
                    }
                    ticketId = cmd.mid(5,4);
                    ticketT = (quint8)cmd.data()[9];
                    ticketPerNumTemp = ((quint8)cmd.data()[37])*256 + (quint8)cmd.data()[38];

                    if(ticketPerNumTemp > 1)
                    {
                        ticketT = 0x02;
                        ticketClassStr = "团队";
                    }
                    else
                    {
                        ticketT = 0x01;
                        ticketClassStr = "散客";
                    }
                    if(P21_GroupInsertEnable)
                    {
                        //特殊模式、允许插票、前一张票是散客且人数没过完、现在是团队票
                        if((ticketT == 0x02)&&(ticketTflag == 0)&&passPerNum&&P20_CheckTicketMode)
                        {
                            UiTicketstatusDisplay(pleasepasstheticket);
                            return;
                        }
                    }
                    else
                    {
                        if(P20_CheckTicketMode)//特殊模式
                        {
                            if(passPerNum && ticketT == 0x02)//只要人没过完就提示
                            {
                                UiTicketstatusDisplay(pleasewait);
                                TicketFlagValue(0);
                                gateTimer->stop();
                                gateTimer->start(standbyTime);
                                return;
                            }
                        }
                        else
                        {
                            //禁止插票、人数没过完、前一张或现在是团队票
                            if(((ticketT == 0x02)||ticketTflag)&&passPerNum)
                            {
                                UiTicketstatusDisplay(pleasewait);
                                TicketFlagValue(0);
                                gateTimer->stop();
                                gateTimer->start(standbyTime);
                                return;
                            }
                        }
                    }
                    ticketPerNum = ticketPerNumTemp;

                    if(ticketSource == 0x03 )//说明是直接比对人脸的返回条码 进行检票
                    {
                        TicketDebug(QString("------------ticketSource:%1").arg(ticketSource));
                        TicketDebug(QString("------直接比对人脸成功------------"));
                        picApplyingMode = 0x04;
                        ticketPerNum = 1;
                        UiTicketstatusDisplay(facematchsuccessfully);
                        return;
                    }

                    picApplyingMode = (quint8)cmd.data()[39];

#if FACEMODE == TENCENTFACE || FACEMODE == ARCFACE
                    picApplyingMode = 0x04;//人证
                    FaceErrTimes=0;
                    UiTicketstatusDisplay(pleasematchface);
                    return ;

#endif


#if FACEMODE == BAIDUFACE
                    if(!faceenable)
                    {
                        if(picApplyingMode == 0x03 || picApplyingMode ==0x04)
                            picApplyingMode = 0;
                        TicketDebug("face disable  picApplyingMode=0");
                    }
#endif
                    fingerApplyingMode = (quint8)cmd.data()[40];

                    idApplyingMode = (quint8)cmd.data()[41];
                    if((quint8)cmd.data()[42] != 0x00)
                    {
                        ticketSoundAddr = (quint8)cmd.data()[42];
                        //ticketSoundAddr = BgComm::ByteArrayToString(cmd.mid(42,1)).toInt();
                    }
                    else
                    {
                        ticketSoundAddr = (quint8)cmd.data()[43];
                        //ticketSoundAddr = BgComm::ByteArrayToString(cmd.mid(43,1)).toInt();
                    }
                    ticketIdNumRead = cmd.mid(44,18);
                    if(picApplyingMode == 0x02)
                    {
                        picDownTimes = 1;
                        prepare_ipdata_downpic(picDownTimes);
                    }
                    else if(picApplyingMode == 0x01)
                    {
                        getPic();
                    }
#if FACEMODE == BAIDUFACE
                    else if(picApplyingMode == 0x03)//注册人脸
                    {
                        TicketDebug(QString("FaceDeviceErrFlag=%1").arg(FaceDeviceErrFlag));
                        FaceInNum = ticketPerNum;
                        ticketInfo=cmd.mid(80, (((quint8)cmd.data()[78])*256 + (quint8)cmd.data()[79])/2);
                        ticketOrder=ticketInfo;
                        if(FaceDeviceErrFlag ||ticketOrder.length() < 30)
                        {
                            UiPicDisplay(checkerr);
                            gateTimer->stop();
                            gateTimer->start(standbyTime);
                            TicketFlagValue(0);
                            picApplyingMode = 0;
                            return;
                        }

                        FaceErrTimes=0;
                        UiTicketstatusDisplay(pleaseinputface);

                    }
                    else if(picApplyingMode == 0x04)
                    {
                        TicketDebug(QString("FaceDeviceErrFlag=%1").arg(FaceDeviceErrFlag));
                        FaceMatchNum = ticketPerNum;
                        ticketInfo=cmd.mid(80, (((quint8)cmd.data()[78])*256 + (quint8)cmd.data()[79])/2);
                        ticketOrder=ticketInfo;
                        if(FaceDeviceErrFlag ||ticketOrder.length() < 30)
                        {
                            UiPicDisplay(checkerr);
                            gateTimer->stop();
                            gateTimer->start(standbyTime);
                            TicketFlagValue(0);
                            picApplyingMode = 0;
                            return;
                        }
                        FaceErrTimes=0;
                        UiTicketstatusDisplay(pleasematchface);

                    }
#endif
                    else if(fingerApplyingMode) //finger
                    {
                        if(fingerApplyingMode == 0x01)
                        {
                            FingerInNum = ticketPerNum;
                            UiTicketstatusDisplay(inputfingerprint);
                        }
                        else if(fingerApplyingMode == 0x02)
                        {
                            FingerMatchNum = ticketPerNum;
                            UiTicketstatusDisplay(matchfingerprint);
                        }
                    }
                    else if(idApplyingMode > 0)
                    {
                        UiTicketstatusDisplay(brushid);
                    }
                    else
                    {
                        UiTicketstatusDisplay(swipesuccessful);
                    }
                    break;
                }
                case 0x04:
                {
                    UiTicketTypeDisplay(GetTLVEntityValue(TTYP));
                    ticketState = (quint8)BytesToInt(GetTLVEntityValue(TST), 0xff);
                    if(ticketState)//无效状态
                    {
                        if(ticketSource == 0x03 )//说明是直接比对人脸的返回条码 进行检票  且票无效
                        {
                            TicketDebug(QString("=================ticketSource:%1").arg(ticketSource));
                            FaceTicket_Err = ticketState;
                            TicketDebug(QString("------直接比对人脸--人脸返回成功，查票返回失败------"));
                            UiTicketstatusDisplay(facematchfailure);
                        }
                        else
                        {
                            TicketVerdictDisplay(ticketState);
                        }
                        return;
                    }
                    TicketVerdictDisplay(ticketState);

                    QMap<QString, QString> upFieldMap;
                    upFieldMap.insert("ticketstate", ticketStateStr);
                    upFieldMap.insert("tickettype", ticketTypeStr);
                    QMap<QString, QString> whereFieldMap;
                    whereFieldMap.insert("cid", BgComm::ByteArrayToString(bufCID));
                    whereFieldMap.insert("barcode", GetTLVEntityValue(BC));
                    sqlTable->UpdateCheckTicketFlag("querybarticket", upFieldMap, whereFieldMap);



                    ticketkindStr = UiNameQByteArrayToQstring(GetTLVEntityValue(TKIND));
                    ticketId = GetTLVEntityValue(RIDN);
                    ticketT = (quint8)BytesToInt(GetTLVEntityValue(TCL), 0x00);
                    ticketPerNumTemp = BytesToInt(GetTLVEntityValue(TNT), 0x00);
                    picApplyingMode = (quint8)BytesToInt(GetTLVEntityValue(PAM), 0x00);
                    fingerApplyingMode = (quint8)BytesToInt(GetTLVEntityValue(FAM), 0x00);
                    idApplyingMode = (quint8)BytesToInt(GetTLVEntityValue(IDAM), 0x00);
                    ticketSoundAddr = (quint8)BytesToInt(GetTLVEntityValue(CUSVAD), 0x00);
                    //ticketSoundAddr = BgComm::ByteArrayToString(GetTLVEntityValue(CUSVAD)).toInt();
                    FingerInNum = (quint8)BytesToInt(GetTLVEntityValue(IFN), 0x00);
                    FingerMatchNum = (quint8)BytesToInt(GetTLVEntityValue(CFN), 0x00);
                    ticketExtend = GetTLVEntityValue(EXD);
                    ticketAuthorizeType = (quint8)BytesToInt(GetTLVEntityValue(AUTF), 0x00);
                    ticketInfo = GetTLVEntityValue(FATOR);

                    if(ticketInfo.length() > 0)
                    {
                        ticketOrder = ticketInfo;
//                        ticketOrderBase64 = ticketOrder.toUtf8().toBase64();
//                        TicketDebug("ticket order:"+ticketOrder);
//                        TicketDebug("ticket order BASE64:"+ticketOrderBase64);
                    }

                    if(ticketSource == 0x03 )//说明是直接比对人脸的返回条码 进行检票
                    {
                        TicketDebug(QString("----------------------ticketSource:%1").arg(ticketSource));
                        picApplyingMode = 0x04;
                        ticketPerNum = 1;
                        TicketDebug(QString("------直接比对人脸成功------"));
                        UiTicketstatusDisplay(facematchsuccessfully);
                        return;
                    }
                    if(ticketPerNumTemp > 1)
                    {
                        ticketT = 0x02;
                        ticketClassStr = "团队";
                    }
                    else
                    {
                        ticketT = 0x01;
                        ticketClassStr = "散客";
                        if(ticketPerNumTemp == 0)
                        {
                            UiTicketstatusDisplay(ticketpernumerr);
                            UiPicDisplay(checkerr);
                            return;
                        }
                    }
                    if(P21_GroupInsertEnable)
                    {
                        //特殊模式、允许插票、前一张票是散客且人数没过完、现在是团队票
                        if((ticketT == 0x02)&&(ticketTflag == 0)&&passPerNum&&P20_CheckTicketMode)
                        {
                            UiTicketstatusDisplay(pleasepasstheticket);
                            return;
                        }
                    }
                    else
                    {
                        if(P20_CheckTicketMode)//特殊模式
                        {
                            if(passPerNum && ticketT==0x02)//只要人没过完就提示
                            {
                                UiTicketstatusDisplay(pleasewait);
                                TicketFlagValue(0);
                                gateTimer->stop();
                                gateTimer->start(standbyTime);
                                return;
                            }
                        }
                        else
                        {
                            //禁止插票、人数没过完、前一张或现在是团队票
                            if(((ticketT == 0x02)||ticketTflag)&&passPerNum)
                            {
                                UiTicketstatusDisplay(pleasewait);
                                TicketFlagValue(0);
                                gateTimer->stop();
                                gateTimer->start(standbyTime);
                                return;
                            }
                        }
                    }
                    ticketPerNum = ticketPerNumTemp;
#if FACEMODE == TENCENTFACE
                    picApplyingMode = 4;
                    idNamestr = UiNameQByteArrayToQstring(GetTLVEntityValue(CHN));
                    idCard = GetTLVEntityValue(CHID);
                    FaceErrTimes=0;
                    UiTicketstatusDisplay(pleasematchface);
                    return ;
#endif

#if FACEMODE == BAIDUFACE
                    if(!faceenable)
                    {
                        if(picApplyingMode == 0x03 || picApplyingMode ==0x04)
                            picApplyingMode = 0;
                        TicketDebug("face disable  picApplyingMode=0");
                    }
#endif

                    switch(picApplyingMode)
                    {
                        case 0x01:
                        {
                            getPic();
                            break;
                        }
                        case 0x02:
                        {
                            picDownTimes = 1;
                            prepare_ipdata_downpic(picDownTimes);
                            break;
                        }
#if FACEMODE==BAIDUFACE
                        case 0x03:
                        {
                            if(FaceDeviceErrFlag || ticketOrder.length() < 30)//设备异常 不执行以下操作
                            {
                                UiPicDisplay(checkerr);
                                gateTimer->stop();
                                gateTimer->start(standbyTime);
                                TicketFlagValue(0);
                                picApplyingMode = 0;
                                return;
                            }

                            FaceInNum = ticketPerNum;
                            FaceErrTimes=0;
                            UiTicketstatusDisplay(pleaseinputface);
                            break;
                        }
                        case 0x04:
                        {
                            if(FaceDeviceErrFlag || ticketOrder.length() < 30)//设备异常 不执行以下操作
                            {
                                UiPicDisplay(checkerr);
                                gateTimer->stop();
                                gateTimer->start(standbyTime);
                                TicketFlagValue(0);
                                picApplyingMode = 0;
                                return;
                            }
                            FaceMatchNum = ticketPerNum;
                            FaceErrTimes=0;
                            UiTicketstatusDisplay(pleasematchface);
                            break;
                        }
#endif
                        default:
                        {
                            switch(fingerApplyingMode)
                            {
                                case 0x01:
                                {
                                    UiTicketstatusDisplay(inputfingerprint);
                                    break;
                                }
                                case 0x02:
                                {
                                    UiTicketstatusDisplay(matchfingerprint);
                                    break;
                                }
                                default:
                                {
                                    switch(idApplyingMode)
                                    {
                                        case 0x01:
                                        {
                                            qDebug()<<"luruerdaizheng";
                                            break;
                                        }
                                        case 0x02:
                                        {
                                            qDebug()<<"biduierdaizheng";
                                            break;
                                        }
                                        default:
                                        {
                                            UiTicketstatusDisplay(swipesuccessful);
                                            break;
                                        }
                                    }
                                    break;
                                }
                            }
                            break;
                        }
                    }
                    break;
                }
                default:break;
            }
            break;
        }
        case 0xb1:
        {
            switch((quint8)cmd.data()[1])
            {
                case 0x00:
                {
                    if((quint8)cmd.data()[4] == 0x00)
                    {
                        if(FingerInNum)
                            FingerInNum--;

                        UiTicketstatusDisplay(recordedsuccessfully);
                        if(FingerInNum == 0)
                        {
                            prepare_ipdata_barconfirm();
                        }
                    }
                    else
                    {
                        UiTicketstatusDisplay(recordedfailure);
                    }
                    break;
                }
                case 0x04:
                {
                    if((quint8)BytesToInt(GetTLVEntityValue(FST), 0xff) == 0x00)
                    {
                        if(FingerInNum)
                            FingerInNum--;
                        UiTicketstatusDisplay(recordedsuccessfully);
                        if(FingerInNum == 0)
                        {
                            prepare_ipdata_barconfirm();
                        }
                    }
                    else
                    {
                        UiTicketstatusDisplay(recordedfailure);
                    }
                    break;
                }
                default:break;
            }
            break;
        }
        case 0xb2:
        {
            switch((quint8)cmd.data()[1])
            {
                case 0x00:
                {
                    if((quint8)cmd.data()[4] == 0x00)
                    {
                        if(FingerMatchNum)
                            FingerMatchNum--;

                        UiTicketstatusDisplay(matchsuccessfully);
                        if(FingerMatchNum == 0)
                        {
                            prepare_ipdata_barconfirm();
                        }
                    }
                    else
                        UiTicketstatusDisplay(matchfailure);
                    break;
                }
                case 0x04:
                {
                    if((quint8)BytesToInt(GetTLVEntityValue(FST), 0xff) == 0x00)
                    {
                        if(FingerMatchNum)
                            FingerMatchNum--;

                        UiTicketstatusDisplay(matchsuccessfully);
                        if(FingerMatchNum == 0)
                        {
                            prepare_ipdata_barconfirm();
                        }
                    }
                    else
                        UiTicketstatusDisplay(matchfailure);
                    break;
                }
                default:break;
            }
            break;
        }
        case 0xbc:
        {
#if PROTOCOLVER == NEWPROTOCOL
            fetchCmdSign = GetTLVEntityValue(CUSBCYCH);;
#else
            fetchCmdSign = cmd.mid(4,cmd.length()-5);
#endif
            break;
        }
        case 0xc0:
        {
            //UiPicDisplay(eoq);
            switch((quint8)cmd.data()[1])
            {
                case 0x00:
                {
                    //0   1   2-3     4       5-24    25-31 32             33-34 35-38          39-42          43           44           45-60
                    //c0  00  length  卡状态、卡类型、时间、消费类型1字节、人数、卡内余额4字节、扣款金额4字节、语音地址位1、语音地址位2、扩展位16
                    checkCmdBuf = cmd;
                    UiTicketTypeDisplay(cmd.mid(5,20));

                    if((quint8)cmd.data()[4] != 0x00)
                    {
                        TicketVerdictDisplay((quint8)cmd.data()[4]);
                        return;
                    }
                    //UiTicketTimeDisplay(cmd.mid(25,7),ttUnused);
                    UiTicketTimeDisplay(cmd.mid(49,4),ttExpired);

                    ticketPerNum = ((quint8)cmd.data()[33])*256 + (quint8)cmd.data()[34];

                    if((quint8)cmd.data()[43] != 0x00)
                    {
                        ticketSoundAddr = (quint8)cmd.data()[43];
                        //ticketSoundAddr = BgComm::ByteArrayToString(cmd.mid(43,1)).toInt();
                    }
                    else
                    {
                        ticketSoundAddr = (quint8)cmd.data()[44];
                        //ticketSoundAddr = BgComm::ByteArrayToString(cmd.mid(44,1)).toInt();
                    }
                    UiTicketstatusDisplay(swipesuccessful);
                    break;
                }
                case 0x01:
                {
                    //0   1   2-3     4-7             8       9-44    45-46 47             48                 49-560             561          562          563-578
                    //c0  01  length  四字节卡序列号、卡状态、卡类型、人数、出卡模式1字节、指纹应用模式1字节、512字节的指纹数据、语音地址位1、语音地址位2、扩展位16
                    UiTicketTypeDisplay(cmd.mid(9,20));

                    if((quint8)cmd.data()[8] != 0x00)
                    {
                        TicketVerdictDisplay((quint8)cmd.data()[8]);
                        return;
                    }
                    UiTicketTimeDisplay(cmd.mid(567,4),ttExpired);

                    ticketPerNum = ((quint8)cmd.data()[45])*256 + (quint8)cmd.data()[46];

                    fingerApplyingMode = (quint8)cmd.data()[48];

                    if((quint8)cmd.data()[561] != 0x00)
                    {
                        ticketSoundAddr = (quint8)cmd.data()[561];
                        //ticketSoundAddr = BgComm::ByteArrayToString(cmd.mid(561,1)).toInt();
                    }
                    else
                    {
                        ticketSoundAddr = (quint8)cmd.data()[562];
                        //ticketSoundAddr = BgComm::ByteArrayToString(cmd.mid(562,1)).toInt();
                    }

                    switch(fingerApplyingMode)
                    {
                        case 0x00:
                        {
                            UiTicketstatusDisplay(swipesuccessful);
                            break;
                        }
                        case 0x01:
                        {
                            UiTicketstatusDisplay(inputfingerprint);
                            break;
                        }
                        case 0x02:
                        {
                            UiTicketstatusDisplay(matchfingerprint);
                            break;
                        }
                        default:
                        {
                            UiTicketstatusDisplay(swipesuccessful);
                            break;
                        }
                    }
                    break;
                }
                case 0x02:
                {
                    //0   1   2-3     4-7             8       9-28    45-46 47             48         49-52          53         54~55          56                   57           58           59-74
                    //c0  02  length  四字节卡序列号、卡状态、卡类型、人数、出卡模式1字节、限时1字节、截止时间4字节、限次1字节、剩余次数2字节、照片应用模式（3种）、语音地址位1、语音地址位2、扩展位16
                    UiTicketTypeDisplay(cmd.mid(9,20));
                    if((quint8)cmd.data()[8] != 0x00)
                    {
                        TicketVerdictDisplay((quint8)cmd.data()[8]);
                        return;
                    }
                    UiTicketTimeDisplay(cmd.mid(63,4),ttExpired);

                    ticketPerNum = ((quint8)cmd.data()[45])*256 + (quint8)cmd.data()[46];

                    picApplyingMode = (quint8)cmd.data()[56];
                    if((quint8)cmd.data()[57] != 0x00)
                    {
                        ticketSoundAddr = (quint8)cmd.data()[57];
                        //ticketSoundAddr = BgComm::ByteArrayToString(cmd.mid(57,1)).toInt();
                    }
                    else
                    {
                        ticketSoundAddr = (quint8)cmd.data()[58];
                        //ticketSoundAddr = BgComm::ByteArrayToString(cmd.mid(58,1)).toInt();
                    }
                    switch(picApplyingMode)
                    {
                        case 0x00:
                        {
                            UiTicketstatusDisplay(swipesuccessful);
                            break;
                        }
                        case 0x01:
                        {
                            UiTicketstatusDisplay(pleasebindthephoto);
                            break;
                        }
                        case 0x02:
                        {
                            picDownTimes = 1;
                            prepare_ipdata_downpic(picDownTimes);
                            break;

                        }
                        default:
                        {
                            UiTicketstatusDisplay(swipesuccessful);
                            break;
                        }
                    }
                    break;
                }
                case 0x03:
                {
                    //0   1   2-3     4-7         8       9-28    29-30 31             32                   33                   34                     35-546             547          548          549-564
                    //c0  03  length  四字节卡序列号、卡状态、卡类型、人数、出卡模式1字节、图像应用模式（3种）、指纹应用模式（3种）、二代证应用模式（3种）、512字节的指纹数据、语音地址位1、语音地址位2、扩展位16
                    UiTicketTypeDisplay(cmd.mid(9,20));

                    if((quint8)cmd.data()[8] != 0x00)
                    {

                        if(ticketSource == 0x03 )//说明是直接比对人脸的返回条码 进行检票  且票无效
                        {
                            TicketDebug(QString("=================ticketSource:%1").arg(ticketSource));
                            FaceTicket_Err = (quint8)cmd.data()[8];
                            TicketDebug(QString("------直接比对人脸--人脸返回成功，查票返回失败------"));
                            UiTicketstatusDisplay(facematchfailure);

                        }
                        else
                        {
                            TicketVerdictDisplay((quint8)cmd.data()[8]);
                        }
                        return;
                    }
                    UiTicketTimeDisplay(cmd.mid(553,4),ttExpired);

                    ticketPerNum = ((quint8)cmd.data()[29])*256 + (quint8)cmd.data()[30];


                    if(ticketSource == 0x03 )//说明是直接比对人脸的返回条码 进行检票
                    {
                        TicketDebug(QString("------------ticketSource:%1").arg(ticketSource));
                        TicketDebug(QString("------直接比对人脸成功------------"));
                        picApplyingMode = 0x04;
                        ticketPerNum = 1;
                        UiTicketstatusDisplay(facematchsuccessfully);
                        return;
                    }

                    picApplyingMode = (quint8)cmd.data()[32];
                    fingerApplyingMode = (quint8)cmd.data()[33];
                    idApplyingMode = (quint8)cmd.data()[34];
#if FACEMODE == BAIDUFACE
                    if(!faceenable)
                    {
                        if(picApplyingMode == 0x03 || picApplyingMode ==0x04)
                            picApplyingMode = 0;
                        TicketDebug("face disable  picApplyingMode=0");
                    }
#endif
                    if((quint8)cmd.data()[547] != 0x00)
                    {
                        ticketSoundAddr = (quint8)cmd.data()[547];
                        //ticketSoundAddr = BgComm::ByteArrayToString(cmd.mid(547,1)).toInt();
                    }
                    else
                    {
                        ticketSoundAddr = (quint8)cmd.data()[548];
                        //ticketSoundAddr = BgComm::ByteArrayToString(cmd.mid(548,1)).toInt();
                    }
                    shengYuCiShu = ((quint8)cmd.data()[549])*256 + (quint8)cmd.data()[550];
                    //ticketAuthorizeType = (quint8)cmd.data()[550];
                    if(picApplyingMode == 0x02)
                    {
                        picDownTimes = 1;
                        prepare_ipdata_downpic(picDownTimes);
                    }
                    else if(picApplyingMode == 0x01)
                    {
                        UiTicketstatusDisplay(pleasebindthephoto);
                    }
#if FACEMODE == BAIDUFACE
                    else if(picApplyingMode == 0x03)//注册人脸
                    {
                        TicketDebug(QString("FaceDeviceErrFlag=%1").arg(FaceDeviceErrFlag));


                        FaceInNum = ticketPerNum;
                        ticketInfo=cmd.mid(567, (((quint8)cmd.data()[565])*256 + (quint8)cmd.data()[566])/2);
                        ticketOrder=ticketInfo;
                        if(FaceDeviceErrFlag || ticketOrder.length() < 30)
                        {
                            UiPicDisplay(checkerr);
                            gateTimer->stop();
                            gateTimer->start(standbyTime);
                            TicketFlagValue(0);
                            picApplyingMode = 0;
                            return;
                        }

                        FaceErrTimes=0;
                        UiTicketstatusDisplay(pleaseinputface);

                    }
                    else if(picApplyingMode == 0x04)
                    {
                        TicketDebug(QString("FaceDeviceErrFlag=%1").arg(FaceDeviceErrFlag));

                        FaceMatchNum = ticketPerNum;
                        ticketInfo=cmd.mid(567, (((quint8)cmd.data()[565])*256 + (quint8)cmd.data()[566])/2);
                        ticketOrder=ticketInfo;
                        if(FaceDeviceErrFlag || ticketOrder.length() < 30)
                        {
                            UiPicDisplay(checkerr);
                            gateTimer->stop();
                            gateTimer->start(standbyTime);
                            TicketFlagValue(0);
                            picApplyingMode = 0;
                            return;
                        }
                        FaceErrTimes=0;
                        UiTicketstatusDisplay(pleasematchface);

                    }
#endif
                    else if(fingerApplyingMode) //finger
                    {
                        if(fingerApplyingMode == 0x01)
                        {
                            FingerInNum = ticketPerNum;
                            UiTicketstatusDisplay(inputfingerprint);
                        }
                        else if(fingerApplyingMode == 0x02)
                        {
                            FingerMatchNum = ticketPerNum;
                            UiTicketstatusDisplay(matchfingerprint);
                        }
                    }
                    else if(idApplyingMode > 0)
                    {
                        if(ticketAuthorizeFlag)
                        {
                            ticketAuthorizeFlag = 0;
                            UiTicketstatusDisplay(swipesuccessful);
                        }
                        else if(ticketGetIdNumFlag)
                        {
                            if(ticketIdNum == ticketIdNumRead)
                            {
                                UiTicketstatusDisplay(swipesuccessful);
                            }
                            else
                            {
                                UiTicketstatusDisplay(idmatchfailure);
                            }
                        }
                        else
                        {
                            UiTicketstatusDisplay(idmatchfailure);
                        }
                    }
                    else
                    {
                        UiTicketstatusDisplay(swipesuccessful);
                    }
                    break;
                }
                case 0x04:
                {
                    UiTicketTypeDisplay(GetTLVEntityValue(CTYP));
                    ticketState = (quint8)BytesToInt(GetTLVEntityValue(TST), 0xff);
                    if(ticketState)//无效状态
                    {

                        if(ticketSource == 0x03 )//说明是直接比对人脸的返回条码 进行检票  且票无效
                        {
                            TicketDebug(QString("=================ticketSource:%1").arg(ticketSource));
                            FaceTicket_Err = ticketState;
                            TicketDebug(QString("------直接比对人脸--人脸返回成功，查票返回失败------"));
                            UiTicketstatusDisplay(facematchfailure);
                        }
                        else
                        {
                            TicketVerdictDisplay(ticketState);
                        }
                        return;

                    }
                    TicketVerdictDisplay(ticketState);


                    QMap<QString, QString> upFieldMap;
                    upFieldMap.insert("ticketstate", ticketStateStr);
                    upFieldMap.insert("tickettype", ticketTypeStr);
                    QMap<QString, QString> whereFieldMap;
                    whereFieldMap.insert("cid", BgComm::ByteArrayToString(bufCID));
                    whereFieldMap.insert("sn", BgComm::ByteArrayToString(GetTLVEntityValue(SN)));
                    sqlTable->UpdateCheckTicketFlag("queryicticket", upFieldMap, whereFieldMap);



                    ticketkindStr = UiNameQByteArrayToQstring(GetTLVEntityValue(CKIND));
                    ticketId = GetTLVEntityValue(RIDN);
                    ticketPerNumTemp = BytesToInt(GetTLVEntityValue(TNT), 0x00);
                    picApplyingMode = (quint8)BytesToInt(GetTLVEntityValue(PAM), 0x00);
                    fingerApplyingMode = (quint8)BytesToInt(GetTLVEntityValue(FAM), 0x00);
                    idApplyingMode = (quint8)BytesToInt(GetTLVEntityValue(IDAM), 0x00);
                    ticketSoundAddr = (quint8)BytesToInt(GetTLVEntityValue(CUSVAD), 0x00);
                    //ticketSoundAddr = BgComm::ByteArrayToString(GetTLVEntityValue(CUSVAD)).toInt();
                    FingerInNum = (quint8)BytesToInt(GetTLVEntityValue(IFN), 0x00);
                    FingerMatchNum = (quint8)BytesToInt(GetTLVEntityValue(CFN), 0x00);
                    ticketExtend = GetTLVEntityValue(EXD);
                    ticketAuthorizeType = (quint8)BytesToInt(GetTLVEntityValue(AUTF), 0x00);
                    ticketInfo = GetTLVEntityValue(FATOR);


                    if(ticketInfo.length() > 0)
                    {
                        ticketOrder = ticketInfo;
//                        ticketOrderBase64 = ticketOrder.toUtf8().toBase64();
//                        TicketDebug("ticket order:"+ticketOrder);
//                        TicketDebug("ticket order BASE64:"+ticketOrderBase64);
                    }

                    if(ticketSource == 0x03 )//说明是直接比对人脸的返回条码 进行检票
                    {
                        TicketDebug(QString("----------------------ticketSource:%1").arg(ticketSource));
                        picApplyingMode = 0x04;
                        ticketPerNum = 1;
                        TicketDebug(QString("------直接比对人脸成功------"));
                        UiTicketstatusDisplay(facematchsuccessfully);
                        return;
                    }


                    if(ticketPerNumTemp > 1)
                    {
                        ticketT = 0x02;
                        ticketClassStr = "团队";
                    }
                    else
                    {
                        ticketT = 0x01;
                        ticketClassStr = "散客";
                        if(ticketPerNumTemp == 0)
                        {
                            UiTicketstatusDisplay(ticketpernumerr);
                            UiPicDisplay(checkerr);
                            return;
                        }
                    }
                    if(P21_GroupInsertEnable)
                    {
                        //特殊模式、允许插票、前一张票是散客且人数没过完、现在是团队票
                        if((ticketT == 0x02)&&(ticketTflag == 0)&&passPerNum&&P20_CheckTicketMode)
                        {
                            UiTicketstatusDisplay(pleasepasstheticket);
                            return;
                        }
                    }
                    else
                    {
                        if(P20_CheckTicketMode)//特殊模式
                        {
                            if(passPerNum && ticketT==0x02 )//只要人没过完就提示
                            {
                                UiTicketstatusDisplay(pleasewait);
                                TicketFlagValue(0);
                                gateTimer->stop();
                                gateTimer->start(standbyTime);
                                return;
                            }
                        }
                        else
                        {
                            //禁止插票、人数没过完、前一张或现在是团队票
                            if(((ticketT == 0x02)||ticketTflag)&&passPerNum)
                            {
                                UiTicketstatusDisplay(pleasewait);
                                TicketFlagValue(0);
                                gateTimer->stop();
                                gateTimer->start(standbyTime);
                                return;
                            }
                        }
                    }
                    ticketPerNum = ticketPerNumTemp;
#if FACEMODE == BAIDUFACE
                    if(!faceenable)
                    {
                        if(picApplyingMode == 0x03 || picApplyingMode ==0x04)
                            picApplyingMode = 0;
                        TicketDebug("face disable  picApplyingMode=0");
                    }
#endif

                    switch(picApplyingMode)
                    {
                        case 0x01:
                        {
                            getPic();
                            break;
                        }
                        case 0x02:
                        {
                            picDownTimes = 1;
                            prepare_ipdata_downpic(picDownTimes);
                            break;
                        }
#if FACEMODE==BAIDUFACE
                        case 0x03:
                        {

                            if(FaceDeviceErrFlag || ticketOrder.length() < 30)//设备异常 不执行以下操作
                            {
                                UiPicDisplay(checkerr);
                                gateTimer->stop();
                                gateTimer->start(standbyTime);
                                TicketFlagValue(0);
                                picApplyingMode = 0;
                                return;
                            }
                            FaceInNum = ticketPerNum;
                            FaceErrTimes=0;
                            UiTicketstatusDisplay(pleaseinputface);
                            break;
                        }
                        case 0x04:
                        {

                            if(FaceDeviceErrFlag || ticketOrder.length() < 30)//设备异常 不执行以下操作
                            {
                                UiPicDisplay(checkerr);
                                gateTimer->stop();
                                gateTimer->start(standbyTime);
                                TicketFlagValue(0);
                                picApplyingMode = 0;
                                return;
                            }
                            FaceMatchNum = ticketPerNum;
                            FaceErrTimes=0;
                            UiTicketstatusDisplay(pleasematchface);
                            break;
                        }
#endif
                        default:
                        {
                            switch(fingerApplyingMode)
                            {
                                case 0x01:
                                {
                                    UiTicketstatusDisplay(inputfingerprint);
                                    break;
                                }
                                case 0x02:
                                {
                                    UiTicketstatusDisplay(matchfingerprint);
                                    break;
                                }
                                default:
                                {
                                    switch(idApplyingMode)
                                    {
                                        case 0x01:
                                        {
                                            qDebug()<<"luruerdaizheng";
                                            break;
                                        }
                                        case 0x02:
                                        {
                                            qDebug()<<"biduierdaizheng";
                                            break;
                                        }
                                        default:
                                        {
                                            UiTicketstatusDisplay(swipesuccessful);
                                            break;
                                        }
                                    }
                                    break;
                                }
                            }
                            break;
                        }
                    }
                    break;
                }
                default:break;
            }
            break;
        }
        case 0xc1:
        {
            switch((quint8)cmd.data()[1])
            {
                case 0x00:
                {
                    if((quint8)cmd.data()[4] == 0x00)
                    {
                        if(FingerInNum)
                            FingerInNum--;

                        UiTicketstatusDisplay(recordedsuccessfully);
                        if(FingerInNum == 0)
                        {
                            prepare_ipdata_icconfirm();
                        }
                    }
                    else
                    {
                        UiTicketstatusDisplay(recordedfailure);
                    }
                    break;
                }
                case 0x04:
                {
                    if((quint8)BytesToInt(GetTLVEntityValue(FST), 0xff) == 0x00)
                    {
                        if(FingerInNum)
                            FingerInNum--;
                        UiTicketstatusDisplay(recordedsuccessfully);
                        if(FingerInNum == 0)
                        {
                            prepare_ipdata_icconfirm();
                        }
                    }
                    else
                    {
                        UiTicketstatusDisplay(recordedfailure);
                    }
                    break;
                }
                default:break;
            }
            break;
        }
        case 0xc2:
        {
            switch((quint8)cmd.data()[1])
            {
                case 0x00:
                {
                    if((quint8)cmd.data()[4] == 0x00)
                    {
                        if(FingerMatchNum)
                            FingerMatchNum--;

                        UiTicketstatusDisplay(matchsuccessfully);
                        if(FingerMatchNum == 0)
                        {
                            prepare_ipdata_icconfirm();
                        }
                    }
                    else
                        UiTicketstatusDisplay(matchfailure);
                    break;
                }
                case 0x04:
                {
                    if((quint8)BytesToInt(GetTLVEntityValue(FST), 0xff) == 0x00)
                    {
                        if(FingerMatchNum)
                            FingerMatchNum--;

                        UiTicketstatusDisplay(matchsuccessfully);
                        if(FingerMatchNum == 0)
                        {
                            prepare_ipdata_icconfirm();
                        }
                        else
                        {
                            //UiTicketstatusDisplay(matchfingerprint);
                        }
                    }
                    else
                        UiTicketstatusDisplay(matchfailure);
                    break;
                }
                default:break;
            }
            break;
        }
        case 0xd0:
        {
            //UiPicDisplay(eoq);
            switch((quint8)cmd.data()[1])
            {
                case 0x00:
                {

                    //0   1   2-3     4     5-8    9               10    11-30 31-37 38-39 40     41     42-57
                    //d0  00  length  状态、ID 号、二代证应用模式、票类、票型、时间、人数、语音1、语音2、扩展位16
                    UiTicketTypeDisplay(cmd.mid(11,20));

                    if((quint8)cmd.data()[4] != 0x00)
                    {
                        TicketVerdictDisplay((quint8)cmd.data()[4]);
                        return;
                    }
                    UiTicketTimeDisplay(cmd.mid(31,7),ttUnused);

                    ticketId = cmd.mid(5,4);
                    ticketT = (quint8)cmd.data()[10];
                    ticketPerNum = ((quint8)cmd.data()[38])*256 + (quint8)cmd.data()[39];
                    if(ticketPerNum)
                    {
                        if((quint8)cmd.data()[40] != 0x00)
                        {
                            ticketSoundAddr = (quint8)cmd.data()[40];
                            //ticketSoundAddr = BgComm::ByteArrayToString(cmd.mid(40,1)).toInt();
                        }
                        else
                        {
                            ticketSoundAddr = (quint8)cmd.data()[41];
                            //ticketSoundAddr = BgComm::ByteArrayToString(cmd.mid(41,1)).toInt();
                        }
                        ticketExtend = cmd.mid(42,16);
                        UiTicketstatusDisplay(swipesuccessful);

                    }
                    else
                    {
                        UiTicketstatusDisplay(notimes);
                    }
                    break;
                }
                case 0x01:
                {
                    //0   1   2-3     4     5-8    9     10-29 30-36 37-38 39            40     41     42-57
                    //d0  01  length  状态、ID 号、票类、票型、时间、人数、指纹应用模式、语音1、语音2、扩展位16
                    UiTicketTypeDisplay(cmd.mid(10,20));

                    if((quint8)cmd.data()[4] != 0x00)
                    {
                        TicketVerdictDisplay((quint8)cmd.data()[4]);
                        return;
                    }
                    UiTicketTimeDisplay(cmd.mid(30,7),ttUnused);

                    ticketId = cmd.mid(5,4);
                    ticketT = (quint8)cmd.data()[9];
                    ticketPerNum = ((quint8)cmd.data()[37])*256+(quint8)cmd.data()[38];

                    fingerApplyingMode = (quint8)cmd.data()[39];

                    if((quint8)cmd.data()[40] != 0x00)
                    {
                        ticketSoundAddr = (quint8)cmd.data()[40];
                        //ticketSoundAddr = BgComm::ByteArrayToString(cmd.mid(40,1)).toInt();
                    }
                    else
                    {
                        ticketSoundAddr = (quint8)cmd.data()[41];
                        //ticketSoundAddr = BgComm::ByteArrayToString(cmd.mid(41,1)).toInt();
                    }
                    ticketExtend = cmd.mid(42,16);
                    switch(fingerApplyingMode)
                    {
                        case 0x00:
                        {
                            UiTicketstatusDisplay(swipesuccessful);
                            break;
                        }
                        case 0x01:
                        {
                            UiTicketstatusDisplay(inputfingerprint);
                            break;
                        }
                        case 0x02:
                        {
                            UiTicketstatusDisplay(matchfingerprint);
                            break;
                        }
                        default:
                        {
                            UiTicketstatusDisplay(swipesuccessful);
                            break;
                        }
                    }
                    break;
                }
                case 0x03:
                {
                    //0   1   2-3     4     5-8   9     10-29 30-36 37-38 39       40      41       42     43     44-61       62-77
                    //d0  03  length  状态、ID号、票类、票型、时间、人数、照片应用模式、指纹应用模式、二代证应用模式、语音1、语音2、二代证号码、扩展位16字节
                    UiTicketTypeDisplay(cmd.mid(10,20));
                    UiTicketTimeDisplay(cmd.mid(30,7),ttUnused);
                    if((quint8)cmd.data()[4] != 0x00)
                    {

                        if(ticketSource == 0x03 )//说明是直接比对人脸的返回条码 进行检票  且票无效
                        {
                            TicketDebug(QString("=================ticketSource:%1").arg(ticketSource));
                            FaceTicket_Err = (quint8)cmd.data()[4];
                            TicketDebug(QString("------直接比对人脸--人脸返回成功，查票返回失败------"));
                            UiTicketstatusDisplay(facematchfailure);
                        }
                        else
                        {
                            TicketVerdictDisplay((quint8)cmd.data()[4]);
                        }
                        return;
                    }
                    ticketId = cmd.mid(5,4);
                    ticketT = (quint8)cmd.data()[9];
                    ticketPerNumTemp = ((quint8)cmd.data()[37])*256 + (quint8)cmd.data()[38];

                    if(ticketPerNumTemp > 1)
                    {
                        ticketT = 0x02;
                        ticketClassStr = "团队";
                    }
                    else
                    {
                        ticketT = 0x01;
                        ticketClassStr = "散客";
                    }
                    if(P21_GroupInsertEnable)
                    {
                        //特殊模式、允许插票、前一张票是散客且人数没过完、现在是团队票
                        if((ticketT == 0x02)&&(ticketTflag == 0)&&passPerNum&&P20_CheckTicketMode)
                        {
                            UiTicketstatusDisplay(pleasepasstheticket);
                            return;
                        }
                    }
                    else
                    {
                        if(P20_CheckTicketMode)//特殊模式
                        {
                            if(passPerNum && ticketT == 0x02)//只要人没过完就提示
                            {
                                UiTicketstatusDisplay(pleasewait);
                                TicketFlagValue(0);
                                gateTimer->stop();
                                gateTimer->start(standbyTime);
                                return;
                            }
                        }
                        else
                        {
                            //禁止插票、人数没过完、前一张或现在是团队票
                            if(((ticketT == 0x02)||ticketTflag)&&passPerNum)
                            {
                                UiTicketstatusDisplay(pleasewait);
                                TicketFlagValue(0);
                                gateTimer->stop();
                                gateTimer->start(standbyTime);
                                return;
                            }
                        }
                    }
                    ticketPerNum = ticketPerNumTemp;

                    ticketIdNumRead = cmd.mid(44,18);
                    ticketExtend = cmd.mid(62,16);
                    if(ticketSource == 0x03 )//说明是直接比对人脸的返回条码 进行检票
                    {
                        TicketDebug(QString("------------ticketSource:%1").arg(ticketSource));
                        TicketDebug(QString("------直接比对人脸成功------------"));
                        picApplyingMode = 0x04;
                        ticketPerNum = 1;
                        UiTicketstatusDisplay(facematchsuccessfully);
                        return;
                    }


                    picApplyingMode = (quint8)cmd.data()[39];
                    fingerApplyingMode = (quint8)cmd.data()[40];
                    idApplyingMode = (quint8)cmd.data()[41];

#if FACEMODE == BAIDUFACE
                    if(!faceenable)
                    {
                        if(picApplyingMode == 0x03 || picApplyingMode ==0x04)
                            picApplyingMode = 0;
                        TicketDebug("face disable  picApplyingMode=0");
                    }
#endif

                    if((quint8)cmd.data()[42] != 0x00)
                    {
                        ticketSoundAddr = (quint8)cmd.data()[42];
                        //ticketSoundAddr = BgComm::ByteArrayToString(cmd.mid(42,1)).toInt();
                    }
                    else
                    {
                        ticketSoundAddr = (quint8)cmd.data()[43];
                        //ticketSoundAddr = BgComm::ByteArrayToString(cmd.mid(43,1)).toInt();
                    }

                    if(picApplyingMode == 0x02)
                    {
                        picDownTimes = 1;
                        prepare_ipdata_downpic(picDownTimes);
                    }
                    else if(picApplyingMode == 0x01)
                    {
                        getPic();
                    }
#if FACEMODE == BAIDUFACE
                    else if(picApplyingMode == 0x03)//注册人脸
                    {
                        TicketDebug(QString("FaceDeviceErrFlag=%1").arg(FaceDeviceErrFlag));


                        FaceInNum = ticketPerNum;
                        ticketInfo=cmd.mid(80, (((quint8)cmd.data()[78])*256 + (quint8)cmd.data()[79])/2);
                        ticketOrder=ticketInfo;
                        if(FaceDeviceErrFlag || ticketOrder.length() < 30)
                        {
                            UiPicDisplay(checkerr);
                            gateTimer->stop();
                            gateTimer->start(standbyTime);
                            TicketFlagValue(0);
                            picApplyingMode = 0;
                            return;
                        }

                        FaceErrTimes=0;
                        UiTicketstatusDisplay(pleaseinputface);

                    }
                    else if(picApplyingMode == 0x04)
                    {
                        TicketDebug(QString("FaceDeviceErrFlag=%1").arg(FaceDeviceErrFlag));
                        FaceMatchNum = ticketPerNum;
                        ticketInfo=cmd.mid(80, (((quint8)cmd.data()[78])*256 + (quint8)cmd.data()[79])/2);
                        ticketOrder=ticketInfo;
                        if(FaceDeviceErrFlag)
                        {
                            UiPicDisplay(checkerr);
                            gateTimer->stop();
                            gateTimer->start(standbyTime);
                            TicketFlagValue(0);
                            picApplyingMode = 0;
                            return;
                        }
                        if(ticketOrder.length() < 30)
                        {
#if PERIDMATCH
                            //需要比对人脸，但是没有订单，则认为是人证比对
                            peridmatchflag = 1;
#else
                            UiPicDisplay(checkerr);
                            gateTimer->stop();
                            gateTimer->start(standbyTime);
                            TicketFlagValue(0);
                            picApplyingMode = 0;
                            return ;
#endif
                        }
                        else
                        {
                            peridmatchflag = 0;
                        }
                        FaceErrTimes=0;
                        UiTicketstatusDisplay(pleasematchface);
                    }
    #endif
                    else if(fingerApplyingMode) //finger
                    {
                        if(fingerApplyingMode == 0x01)
                        {
                            FingerInNum = ticketPerNum;
                            UiTicketstatusDisplay(inputfingerprint);
                        }
                        else if(fingerApplyingMode == 0x02)
                        {
                            FingerMatchNum = ticketPerNum;
                            UiTicketstatusDisplay(matchfingerprint);
                        }
                    }
                    else if(idApplyingMode > 0)
                    {
                        UiTicketstatusDisplay(brushid);
                    }
                    else
                    {
                        UiTicketstatusDisplay(swipesuccessful);
                    }
                    break;
                }
                case 0x04:
                {
                    UiTicketTypeDisplay(GetTLVEntityValue(TTYP));
                    ticketState = (quint8)BytesToInt(GetTLVEntityValue(TST), 0xff);
                    if(ticketState)//无效状态
                    {

                        if(ticketSource == 0x03 )//说明是直接比对人脸的返回条码 进行检票  且票无效
                        {
                            TicketDebug(QString("=================ticketSource:%1").arg(ticketSource));
                            FaceTicket_Err = ticketState;
                            TicketDebug(QString("------直接比对人脸--人脸返回成功，查票返回失败------"));
                            UiTicketstatusDisplay(facematchfailure);
                        }
                        else
                        {
                            TicketVerdictDisplay(ticketState);
                        }
                        return;
                    }
                    TicketVerdictDisplay(ticketState);

                    QMap<QString, QString> upFieldMap;
                    upFieldMap.insert("ticketstate", ticketStateStr);
                    upFieldMap.insert("tickettype", ticketTypeStr);
                    QMap<QString, QString> whereFieldMap;
                    whereFieldMap.insert("cid", BgComm::ByteArrayToString(bufCID));
                    whereFieldMap.insert("idcard", GetTLVEntityValue(CHID));
                    sqlTable->UpdateCheckTicketFlag("queryidticket", upFieldMap, whereFieldMap);


                    ticketkindStr = UiNameQByteArrayToQstring(GetTLVEntityValue(TKIND));
                    ticketId = GetTLVEntityValue(RIDN);
                    ticketT = (quint8)BytesToInt(GetTLVEntityValue(TCL), 0x00);
                    ticketPerNumTemp = BytesToInt(GetTLVEntityValue(TNT), 0x00);
                    picApplyingMode = (quint8)BytesToInt(GetTLVEntityValue(PAM), 0x00);
                    fingerApplyingMode = (quint8)BytesToInt(GetTLVEntityValue(FAM), 0x00);
                    ticketSoundAddr = (quint8)BytesToInt(GetTLVEntityValue(CUSVAD), 0x00);
                    //ticketSoundAddr = BgComm::ByteArrayToString(GetTLVEntityValue(CUSVAD)).toInt();
                    FingerInNum = (quint8)BytesToInt(GetTLVEntityValue(IFN), 0x00);
                    FingerMatchNum = (quint8)BytesToInt(GetTLVEntityValue(CFN), 0x00);
                    ticketExtend = GetTLVEntityValue(EXD);
                    ticketAuthorizeType = (quint8)BytesToInt(GetTLVEntityValue(AUTF), 0x00);
                    ticketInfo = GetTLVEntityValue(FATOR);


                    if(ticketInfo.length() > 0)
                    {
                        ticketOrder = ticketInfo;
//                        ticketOrderBase64 = ticketOrder.toUtf8().toBase64();
//                        TicketDebug("ticket order:"+ticketOrder);
//                        TicketDebug("ticket order BASE64:"+ticketOrderBase64);
                    }

                    if(ticketSource == 0x03 )//说明是直接比对人脸的返回条码 进行检票
                    {
                        TicketDebug(QString("----------------------ticketSource:%1").arg(ticketSource));
                        picApplyingMode = 0x04;
                        ticketPerNum = 1;
                        TicketDebug(QString("------直接比对人脸成功------"));
                        UiTicketstatusDisplay(facematchsuccessfully);
                        return;
                    }


                    if(ticketPerNumTemp > 1)
                    {
                        ticketT = 0x02;
                        ticketClassStr = "团队";
                    }
                    else
                    {
                        ticketT = 0x01;
                        ticketClassStr = "散客";
                        if(ticketPerNumTemp == 0)
                        {
                            UiTicketstatusDisplay(ticketpernumerr);
                            UiPicDisplay(checkerr);
                            return;
                        }
                    }
                    if(P21_GroupInsertEnable)
                    {
                        //特殊模式、允许插票、前一张票是散客且人数没过完、现在是团队票
                        if((ticketT == 0x02)&&(ticketTflag == 0)&&passPerNum&&P20_CheckTicketMode)
                        {
                            UiTicketstatusDisplay(pleasepasstheticket);
                            return;
                        }
                    }
                    else
                    {
                        if(P20_CheckTicketMode)//特殊模式
                        {
                            if(passPerNum && ticketT==0x02)//只要人没过完就提示
                            {
                                UiTicketstatusDisplay(pleasewait);
                                TicketFlagValue(0);
                                gateTimer->stop();
                                gateTimer->start(standbyTime);
                                return;
                            }
                        }
                        else
                        {
                            //禁止插票、人数没过完、前一张或现在是团队票
                            if(((ticketT == 0x02)||ticketTflag)&&passPerNum)
                            {
                                UiTicketstatusDisplay(pleasewait);
                                TicketFlagValue(0);
                                gateTimer->stop();
                                gateTimer->start(standbyTime);
                                return;
                            }
                        }
                    }
                    ticketPerNum = ticketPerNumTemp;

#if FACEMODE == BAIDUFACE
                    if(!faceenable)
                    {
                        if(picApplyingMode == 0x03 || picApplyingMode ==0x04)
                            picApplyingMode = 0;
                        TicketDebug("face disable  picApplyingMode=0");
                    }
#endif

                    switch(picApplyingMode)
                    {
                        case 0x01:
                        {
                            getPic();
                            break;
                        }
                        case 0x02:
                        {
                            picDownTimes = 1;
                            prepare_ipdata_downpic(picDownTimes);
                            break;
                        }
#if FACEMODE==BAIDUFACE
                        case 0x03:
                        {

                            if(FaceDeviceErrFlag || ticketOrder.length() < 30)//设备异常 不执行以下操作
                            {
                                UiPicDisplay(checkerr);
                                gateTimer->stop();
                                gateTimer->start(standbyTime);
                                TicketFlagValue(0);
                                picApplyingMode = 0;
                                return;
                            }
                            FaceInNum = ticketPerNum;
                            FaceErrTimes=0;
                            UiTicketstatusDisplay(pleaseinputface);
                            break;
                        }
                        case 0x04:
                        {
                            FaceMatchNum = ticketPerNum;
                            if(FaceDeviceErrFlag)//设备异常 不执行以下操作
                            {
                                UiPicDisplay(checkerr);
                                gateTimer->stop();
                                gateTimer->start(standbyTime);
                                TicketFlagValue(0);
                                picApplyingMode = 0;
                                return;
                            } 
                            if(ticketOrder.length() < 30)
                            {
#if PERIDMATCH
                                //需要比对人脸，但是没有订单，则认为是人证比对
                                peridmatchflag = 1;
#else
                                UiPicDisplay(checkerr);
                                gateTimer->stop();
                                gateTimer->start(standbyTime);
                                TicketFlagValue(0);
                                picApplyingMode = 0;
                                return ;
#endif
                            }
                            else
                            {
                                peridmatchflag = 0;
                            }

                            FaceErrTimes=0;
                            UiTicketstatusDisplay(pleasematchface);
                            break;
                        }
#endif
                        default:
                        {
                            switch(fingerApplyingMode)
                            {
                                case 0x01:
                                {
                                    UiTicketstatusDisplay(inputfingerprint);
                                    break;
                                }
                                case 0x02:
                                {
                                    UiTicketstatusDisplay(matchfingerprint);
                                    break;
                                }
                                default:
                                {
                                    UiTicketstatusDisplay(swipesuccessful);
                                    break;
                                }
                            }
                            break;
                        }
                    }
                    break;
                }
                default:break;
            }
            break;
        }
        case 0xd1:
        {
            switch((quint8)cmd.data()[1])
            {
                case 0x00:
                {
                    if((quint8)cmd.data()[4] == 0x00)
                    {
                        if(FingerInNum)
                            FingerInNum--;

                        UiTicketstatusDisplay(recordedsuccessfully);
                        if(FingerInNum == 0)
                        {
                            prepare_ipdata_idconfirm();
                        }
                    }
                    else
                    {
                        UiTicketstatusDisplay(recordedfailure);
                    }
                    break;
                }
                case 0x04:
                {
                    if((quint8)BytesToInt(GetTLVEntityValue(FST), 0xff) == 0x00)
                    {
                        if(FingerInNum)
                            FingerInNum--;

                        UiTicketstatusDisplay(recordedsuccessfully);
                        if(FingerInNum == 0)
                        {
                            prepare_ipdata_idconfirm();
                        }
                    }
                    else
                    {
                        UiTicketstatusDisplay(recordedfailure);
                    }
                    break;
                }
                default:break;
            }
            break;
        }
        case 0xd2:
        {
            switch((quint8)cmd.data()[1])
            {
                case 0x00:
                {
                    if((quint8)cmd.data()[4] == 0x00)
                    {
                        if(FingerMatchNum)
                            FingerMatchNum--;

                        UiTicketstatusDisplay(matchsuccessfully);
                        if(FingerMatchNum == 0)
                        {
                            prepare_ipdata_idconfirm();
                        }
                    }
                    else
                        UiTicketstatusDisplay(matchfailure);
                    break;
                }
                case 0x04:
                {
                    if((quint8)BytesToInt(GetTLVEntityValue(FST), 0xff) == 0x00)
                    {
                        if(FingerMatchNum)
                            FingerMatchNum--;

                        UiTicketstatusDisplay(matchsuccessfully);
                        if(FingerMatchNum == 0)
                        {
                            prepare_ipdata_idconfirm();
                        }
                    }
                    else
                        UiTicketstatusDisplay(matchfailure);
                    break;
                }
                default:break;
            }
            break;
        }
        case 0xf1:
        {
#if PROTOCOLVER == NEWPROTOCOL
            if((picDownTimes == 1)&&((quint8)BytesToInt(GetTLVEntityValue(PFR), 0x00) == 0))
#else
            if((picDownTimes == 1)&&(cmd.length() < 10))
#endif
            {
                switch(fingerApplyingMode)
                {
                    case 0x01:
                    {
                        UiTicketstatusDisplay(inputfingerprint);
                        break;
                    }
                    case 0x02:
                    {
                        UiTicketstatusDisplay(matchfingerprint);
                        break;
                    }
                    default:
                    {
                        switch(idApplyingMode)
                        {
                            case 0x01:
                            {
                                qDebug()<<"luruerdaizheng";
                                break;
                            }
                            case 0x02:
                            {
                                qDebug()<<"biduierdaizheng";
                                break;
                            }
                            default:
                            {
                                UiTicketstatusDisplay(swipesuccessful);
                                break;
                            }
                        }
                        break;
                    }
                }
            }
            else
            {
#if PROTOCOLVER == NEWPROTOCOL
                TicketPicDisplay((quint8)BytesToInt(GetTLVEntityValue(PFR), 0x00), (quint8)BytesToInt(GetTLVEntityValue(PFRP), 0x00), GetTLVEntityValue(PFRC));
#else
                TicketPicDisplay(cmd);
#endif
            }
            break;
        }
        case 0xbf:
        {
            switch((quint8)cmd.data()[1])
            {
                case 0x00:
                case 0x01:
                case 0x03:
                case 0x04:
#if PROTOCOLVER == NEWPROTOCOL
                    if((quint8)BytesToInt(GetTLVEntityValue(TCONST), 0xff) == 0x00)
                    {
                        QMap<QString, QString> upFieldMap;
                        QMap<QString, QString> whereFieldMap;
                        whereFieldMap.insert("cid", BgComm::ByteArrayToString(heartBufCID));
                        whereFieldMap.insert("barcode", GetTLVEntityValue(BC));
                        sqlTable->UpdateCheckTicketFlag("confirmbarticket", upFieldMap, whereFieldMap);
#if FACEMODE == BAIDUFACE
                        if(picApplyingMode == 0x03)
                        {
                            SendToFaceConfirm2(0x00);

                            picApplyingMode = 0;
                        }
                        else if(picApplyingMode == 0x04)
                        {
                            SendToFaceConfirm(0x00);
                            picApplyingMode = 0;
                        }
#endif
                    }
                    else
                    {
#if FACEMODE == BAIDUFACE
                        if(picApplyingMode == 0x03)
                        {
                            SendToFaceConfirm2(0x01);
                            picApplyingMode = 0;
                        }
                        else if(picApplyingMode == 0x04)
                        {
                            SendToFaceConfirm(0x01);
                            picApplyingMode = 0;
                        }
#endif

                    }
#else
                if((quint8)cmd.data()[4] == 0x00)
                {
#if FACEMODE == BAIDUFACE
                    if(picApplyingMode == 0x03)
                    {
                        SendToFaceConfirm2(0x00);
                        picApplyingMode = 0;
                    }
                    else if(picApplyingMode == 0x04)
                    {
                        SendToFaceConfirm(0x00);
                        picApplyingMode = 0;
                    }
#endif
                }
                else
                {
#if FACEMODE == BAIDUFACE
                    if(picApplyingMode == 0x03)
                    {
                        SendToFaceConfirm2(0x01);
                        picApplyingMode = 0;
                    }
                    else if(picApplyingMode == 0x04)
                    {
                        SendToFaceConfirm(0x01);
                        picApplyingMode = 0;
                    }
#endif
                }
#endif
                    break;
                case 0x05:
                {
#if PROTOCOLVER == OLDPROTOCOL
                    if((quint8)cmd.data()[4] == 0x00)
                    {
                        if(passtimeroutflag == 0)
                        {
                            prepare_ipdata_barticket();
                        }
                        else
                            passtimeroutflag = 0;
                    }
                    else
#endif
                    {
                        TicketFlagValue(0);
                    }
                    break;
                }
                default:break;
            }
            break;
        }
        case 0xcf:
        {
            switch((quint8)cmd.data()[1])
            {
                case 0x00:
                case 0x01:
                case 0x03:
                case 0x04:
#if PROTOCOLVER == NEWPROTOCOL
                    if((quint8)BytesToInt(GetTLVEntityValue(TCONST), 0xff) == 0x00)
                    {
                        QMap<QString, QString> upFieldMap;
                        QMap<QString, QString> whereFieldMap;
                        whereFieldMap.insert("cid", BgComm::ByteArrayToString(heartBufCID));
                        whereFieldMap.insert("sn", BgComm::ByteArrayToString(GetTLVEntityValue(SN)));
                        sqlTable->UpdateCheckTicketFlag("confirmicticket", upFieldMap, whereFieldMap);
#if FACEMODE == BAIDUFACE
                        if(picApplyingMode == 0x03)
                        {
                            SendToFaceConfirm2(0x00);

                            picApplyingMode = 0;
                        }
                        else if(picApplyingMode == 0x04)
                        {
                            SendToFaceConfirm(0x00);
                            picApplyingMode = 0;
                        }
#endif
                    }
                    else
                    {
#if FACEMODE == BAIDUFACE
                        if(picApplyingMode == 0x03)
                        {
                            SendToFaceConfirm2(0x01);
                            picApplyingMode = 0;
                        }
                        else if(picApplyingMode == 0x04)
                        {
                            SendToFaceConfirm(0x001);
                            picApplyingMode = 0;
                        }
#endif

                    }
#else
                if((quint8)cmd.data()[4] == 0x00)
                {
#if FACEMODE == BAIDUFACE
                    if(picApplyingMode == 0x03)
                    {
                        SendToFaceConfirm2(0x00);

                        picApplyingMode = 0;
                    }
                    else if(picApplyingMode == 0x04)
                    {
                        SendToFaceConfirm(0x00);

                        picApplyingMode = 0;
                    }
#endif
                }
                else
                {
#if FACEMODE == BAIDUFACE
                    if(picApplyingMode == 0x03)
                    {
                        SendToFaceConfirm2(0x01);

                        picApplyingMode = 0;
                    }
                    else if(picApplyingMode == 0x04)
                    {
                        SendToFaceConfirm(0x01);
                        picApplyingMode = 0;
                    }
#endif
                }
#endif
                    break;
                default:break;
            }
            break;
        }
        case 0xdf:
        {
            switch((quint8)cmd.data()[1])
            {
                case 0x00:
                case 0x01:
                case 0x02:
                case 0x03:
                case 0x04:
#if PROTOCOLVER == NEWPROTOCOL
                    if((quint8)BytesToInt(GetTLVEntityValue(TCONST), 0xff) == 0x00)
                    {
                        QMap<QString, QString> upFieldMap;
                        QMap<QString, QString> whereFieldMap;
                        whereFieldMap.insert("cid", BgComm::ByteArrayToString(heartBufCID));
                        whereFieldMap.insert("idcard", GetTLVEntityValue(CHID));
                        sqlTable->UpdateCheckTicketFlag("confirmidticket", upFieldMap, whereFieldMap);
#if FACEMODE == BAIDUFACE
                        if(picApplyingMode == 0x03)
                        {
                            SendToFaceConfirm2(0x00);

                            picApplyingMode = 0;
                        }
                        else if(picApplyingMode == 0x04)
                        {

                            SendToFaceConfirm(0x00);
                            picApplyingMode = 0;
                        }
#endif
                    }
                    else
                    {
#if FACEMODE == BAIDUFACE
                        if(picApplyingMode == 0x03)
                        {
                            SendToFaceConfirm2(0x01);
                            picApplyingMode = 0;
                        }
                        else if(picApplyingMode == 0x04)
                        {

                            SendToFaceConfirm(0x01);

                            picApplyingMode = 0;
                        }

#endif

                    }
//以下老协议
#else
                if((quint8)cmd.data()[4] == 0x00)
                {
#if FACEMODE == BAIDUFACE
                    if(picApplyingMode == 0x03)
                    {
                        SendToFaceConfirm2(0x00);

                        picApplyingMode = 0;
                    }
                    else if(picApplyingMode == 0x04)
                    {

                        SendToFaceConfirm(0x00);

                        picApplyingMode = 0;
                    }
#endif
                }
                else
                {
#if FACEMODE == BAIDUFACE
                    if(picApplyingMode == 0x03)
                    {
                        SendToFaceConfirm2(0x01);
                        picApplyingMode = 0;
                    }
                    else if(picApplyingMode == 0x04)
                    {

                        SendToFaceConfirm(0x01);

                        picApplyingMode = 0;
                    }
#endif

                }
#endif
                    break;
                default:break;
            }
            break;
        }
        case 0xfb:
        {
            switch((quint8)cmd.data()[1])
            {
                case 0x00:
                {
                    if((quint8)BytesToInt(GetTLVEntityValue(TCONST), 0xff) == 0x00)
                    {
                        QMap<QString, QString> upFieldMap;
                        QMap<QString, QString> whereFieldMap;
                        whereFieldMap.insert("cid", BgComm::ByteArrayToString(heartBufCID));
                        whereFieldMap.insert("barcode", GetTLVEntityValue(BC));
                        sqlTable->UpdateCheckTicketFlag("rollbackbarticket", upFieldMap, whereFieldMap);

                        if(passtimeroutflag == 0)
                        {
                            prepare_ipdata_barticket();
                        }
                        else
                            passtimeroutflag = 0;
                    }
                    else
                    {
                        TicketFlagValue(0);
                    }
                    break;
                }
                default:break;
            }
            break;
        }
        case 0xE0:
        {
            switch((quint8)cmd.data()[1])
            {
                case 0x00:
                {
#if PROTOCOLVER == NEWPROTOCOL
                    switch((quint8)BytesToInt(GetTLVEntityValue(FST), 0xff))
                    {
                        case 0x00:
                            UiTicketstatusDisplay(matchsuccessfully);
                            TicketPerDisplay(1,1);
                            TicketFlagValue(0);
                            break;
                        case 0xff:
                            UiTicketstatusDisplay(matchfailure);
                            TicketFlagValue(0);
                            break;
                        case 0xaa:
                            UiTicketstatusDisplay(pleaseremoveyourfinger);
                            TicketFlagValue(0);
                            break;
                        default:
                            UiTicketstatusDisplay(matchfailure);
                            TicketFlagValue(0);
                            break;
                    }
#else
                switch((quint8)cmd.data()[4])
                {
                    case 0x00:
                        UiTicketstatusDisplay(matchsuccessfully);
                        TicketPerDisplay(1,1);
                        TicketFlagValue(0);
                        break;
                    case 0xff:
                        UiTicketstatusDisplay(matchfailure);
                        TicketFlagValue(0);
                        break;
                    case 0xaa:
                        UiTicketstatusDisplay(pleaseremoveyourfinger);
                        TicketFlagValue(0);
                        break;
                    default:
                        UiTicketstatusDisplay(matchfailure);
                        TicketFlagValue(0);
                        break;
                }
#endif
                    break;
                }
                default:break;
            }
            break;
        }

        case 0xaf:
        {
            UiTicketstatusDisplay(communicationerrorprotocolnotsupport);
            break;
        }
        case 0x10:
        {
            switch((quint8)cmd.data()[1])
            {
                case 0x01:
                case 0x02:
                    TicketFlagValue(0);
                    break;
                default:TicketFlagValue(0);break;
            }
            break;
        }
        default:
#if FINGEROPENMODE
        if(Pb1_FingerDevType == 0x01)
        {
            fingerStep = 0x03;
            USBFingerTemplate_direct();
        }
        else
            FingerTemplate(fingerchangkai);
#endif
        break;
    }
}
void Form::TcpConnectTimerOut()
{
    tcpConnectTimer->stop();
    if(socketLinkState)
        TcpDisConnect();
    else
        TcpConnect();
}
void Form::TcpResponseTimerOut()
{
    tcpResponseTimer->stop();
    if(socketLinkState)
    {
        backupServerFlag= !backupServerFlag;
        TcpDisConnect();
    }
    else
        TcpConnect();
}
//tcp server-----------------------------------------------------------------------------
void Form::TcpServerInit()
{
#if TCPSERVER_ENABLE
    mytcpServer = new myTcpServer(this);
    connect(mytcpServer,SIGNAL(TicketDebug(QString)),this,SLOT(TicketDebug(QString)));
    connect(mytcpServer,SIGNAL(ClientConnect(int,QString,int)),this,SLOT(ClientConnect(int,QString,int)));
    connect(mytcpServer,SIGNAL(ClientDisConnect(int,QString,int)),this,SLOT(ClientDisConnect(int,QString,int)));
    connect(mytcpServer,SIGNAL(ClientReadData(int,QString,int,QByteArray)),this,SLOT(ClientReadData(int,QString,int,QByteArray)));
    liveTimer = new QTimer(this);
    liveTimer->start(5000);
    connect(liveTimer,SIGNAL(timeout()),this,SLOT(LiveTimerOut()));
    mytcpServer->listen(QHostAddress::Any,7777);
#endif
}
void Form::ClientConnect(int clientID,QString IP,int Port)
{
    TicketDebug(QString("client-c:[clientID:%1 IP:%2 Port:%3]-online").arg(clientID).arg(IP).arg(Port));
    clientMap.insert(clientID,tr("%1:%2:%3").arg(clientID).arg(IP).arg(Port));
}
void Form::ClientDisConnect(int clientID,QString IP,int Port)
{
    TicketDebug(QString("client-d:[clientID:%1 IP:%2 Port:%3]-offline").arg(clientID).arg(IP).arg(Port));
    clientMap.remove(clientID);
}
void Form::ClientReadData(int clientID,QString IP,int Port,QByteArray cmd)
{
    if (!cmd.isEmpty())
    {
        TicketDebug(QString("tcpserver recv :%1 from:[clientID:%2 IP:%3 Port:%4]")
                    .arg(BgComm::ByteArrayToString(cmd, 16, true)).arg(clientID).arg(IP).arg(Port));
    }

    switch((quint8)cmd.data()[0])
    {
        case 0x20:
        {
            switch((quint8)cmd.data()[1])
            {
                case 0x01:
                {
                    //0   1   2-3     4     5-8   9    10-29 30-36 37-38 39     40     41-56
                    //20  01  length  状态、ID号、票类、票型、时间、 人数、 语音1、语音2、16字节扩展位
                    UiTicketTypeDisplay(cmd.mid(10,20));
                    UiTicketTimeDisplay(cmd.mid(30,7),ttUnused);
                    ticketId = cmd.mid(5,4);
                    ticketT = (quint8)cmd.data()[9];
                    ticketPerNum = ((quint8)cmd.data()[37])*256 + (quint8)cmd.data()[38];

                    if(ticketPerNum > 1)
                    {
                        ticketT = 0x02;
                        ticketClassStr = "团队";
                    }
                    else
                    {
                        ticketT = 0x01;
                        ticketClassStr = "散客";
                    }

                    if((quint8)cmd.data()[39] != 0x00)
                    {
                        ticketSoundAddr = (quint8)cmd.data()[39];
                    }
                    else
                    {
                        ticketSoundAddr = (quint8)cmd.data()[40];
                    }
                    if((quint8)cmd.data()[4] != 0x00)
                    {
                        UiTicketstatusDisplay(facerecordedfailure);
                        return;
                    }
                    UiTicketstatusDisplay(facerecordedsuccessfully);
                    TicketPerDisplay(ticketPerNum,1);

                    //0   1   2-3     4
                    //10  a0  length  状态
                    QByteArray sendbuf;
                    sendbuf[0] = 0x20;
                    sendbuf[1] = 0x01;

                    sendbuf[2] = 0x00;
                    sendbuf[3] = 0x00;

                    sendbuf[4] = 0x00;

                    sendbuf[2] = (sendbuf.length()-4)/256; //计算命令的长度
                    sendbuf[3] = (sendbuf.length()-4)%256; //计算命令的长度

                    sendbuf += BgComm::XORVerify(sendbuf);//加校验位的

                    TicketDebug("tcpserver send :"+ BgComm::ByteArrayToString(sendbuf, 16, true));

                    mytcpServer->SendData(clientID,IP,Port,sendbuf);
                    break;
                }
                case 0x02:
                {
                    //0   1   2-3     4     5-8   9    10-29 30-36 37-38 39     40     41-56
                    //20  02  length  状态、ID号、票类、票型、时间、 人数、 语音1、语音2、16字节扩展位
                    UiTicketTypeDisplay(cmd.mid(10,20));
                    UiTicketTimeDisplay(cmd.mid(30,7),ttUnused);
                    ticketId = cmd.mid(5,4);
                    ticketT = (quint8)cmd.data()[9];
                    ticketPerNum = ((quint8)cmd.data()[37])*256 + (quint8)cmd.data()[38];

                    if(ticketPerNum > 1)
                    {
                        ticketT = 0x02;
                        ticketClassStr = "团队";
                    }
                    else
                    {
                        ticketT = 0x01;
                        ticketClassStr = "散客";
                    }

                    if((quint8)cmd.data()[39] != 0x00)
                    {
                        ticketSoundAddr = (quint8)cmd.data()[39];
                    }
                    else
                    {
                        ticketSoundAddr = (quint8)cmd.data()[40];
                    }

                    if((quint8)cmd.data()[4] != 0x00)
                    {
                        UiTicketstatusDisplay(facematchfailure);
                        return;
                    }
                    UiTicketstatusDisplay(facematchsuccessfully);
                    TicketPerDisplay(ticketPerNum,1);

                    //0   1   2-3     4
                    //10  a0  length  状态
                    QByteArray sendbuf;
                    sendbuf[0] = 0x20;
                    sendbuf[1] = 0x02;

                    sendbuf[2] = 0x00;
                    sendbuf[3] = 0x00;

                    sendbuf[4] = 0x00;

                    sendbuf[2] = (sendbuf.length()-4)/256; //计算命令的长度
                    sendbuf[3] = (sendbuf.length()-4)%256; //计算命令的长度

                    sendbuf += BgComm::XORVerify(sendbuf);//加校验位的

                    TicketDebug("tcpserver send :"+ BgComm::ByteArrayToString(sendbuf, 16, true));

                    mytcpServer->SendData(clientID,IP,Port,sendbuf);
                    break;
                }
                default:break;
            }
            break;
        }
        default:break;
    }
}
void Form::LiveTimerOut()
{
    ClientMap::Iterator it;
    QString  str,IP;
    int clientID,Port;
    for ( it = clientMap.begin(); it != clientMap.end(); ++it )
    {
        str = (QString)it.value();
        clientID=str.split(":")[0].toInt();
        IP=str.split(":")[1];
        Port=str.split(":")[2].toInt();
        mytcpServer->checkLiveSocket(clientID,IP,Port);
    }
}
//ftp------------------------------------------------------------------------------------
void Form::FtpInit()
{
    bool ok;

    photographEnable = qs->value("PhotographEnable",1).toInt(&ok);
    if(!ok)
    {
        photographEnable = 1;
    }
    if(photographEnable||(P02_DebugEnable == 2))
        Ftp_Enable = 1;
    else
        Ftp_Enable = 0;

    if(Ftp_Enable)
    {
        TicketDebug("*******************FtpInit_start*******************");
        FTPflag = 1;
        ftp = new Ftp(this);
        connect(ftp,SIGNAL(TicketDebug(QString)),this,SLOT(TicketDebug(QString)));

        Ftp_ServerIp = qs->value("Ftp_ServerIp","192.168.0.90").toString();
        if(Ftp_ServerIp.length()==0)
        {
            Ftp_ServerIp = P50_ServerIp;
        }
        TicketDebug("Ftp_ServerIp: "+Ftp_ServerIp);

        bool ok;
        Ftp_Port = qs->value("Ftp_Port",21).toInt(&ok);
        if(!ok)
        {
            Ftp_Port = 21;
        }
        TicketDebug(QString("Ftp_Port : %1").arg(Ftp_Port,0,10, (QChar)'0'));
        TicketDebug("*******************FtpInit_stop********************");

        ftpdisoffTimer = new QTimer(this);
        connect(ftpdisoffTimer,SIGNAL(timeout()),this,SLOT(ftpdisoffTimerOut()));
    }
    UiFtpInit(Ftp_Enable);
}
void Form::ftpdisoffTimerOut()
{
    ftpdisoffTimer->stop();
    QString str;
    //if(FTPflag == 0)
        str = UiGetCheckTicketMsg();

    if((str.indexOf(tr("ftp"))>=0)||(str.indexOf(tr("Ftp"))>=0))//只有在gatelabel显示ftp相关信息时才执行
    {
        UiCheckTicketMsg(ftpgatelabelcolor, ftpgatelabel);
    }
    else
    {
        UiCheckTicketMsg(ftpgatelabelcolor, str);
    }
}
//barcode---------------------------------------------------------------------------------
void Form::BarcodeInit()
{
    bool ok;

    P91_BarcodeDevType = qs->value("P91_BarcodeDevType",0).toInt(&ok);
    if(!ok)
    {
        P91_BarcodeDevType = 0;
    }
    P92_BarcodeTicketType = qs->value("P92_BarcodeTicketType",0x00).toInt(&ok);
    if(!ok)
    {
        P92_BarcodeTicketType = 0x00;
    }
    P93_BarcodeBaud = qs->value("P93_BarcodeBaud",0x01).toInt(&ok);
    if(!ok)
    {
        P93_BarcodeBaud = 0x01;
    }
    P94_BarcodeHead = qs->value("P94_BarcodeHead",0xaa).toInt(&ok);
    if(!ok)
    {
        P94_BarcodeHead = 0xaa;
    }
    P95_BarcodeEndLen = qs->value("P95_BarcodeEndLen",2).toInt(&ok);
    if(!ok)
    {
        P95_BarcodeEndLen = 2;
    }
    QString str = qs->value("P96_BarcodeEndData","0D0A").toString();
    if(str.length()==0)
    {
        str = "0D0A";
    }
    str = BgComm::FormatString(str, 2, QChar(' '));
    P96_BarcodeEndData = BgComm::StringToByteArray(str, 16, QChar(' '));

    oldBarData.clear();
    barTimer = new QTimer(this);
    connect(barTimer,SIGNAL(timeout()),this,SLOT(BARTimerOut()));

    if(qs->value("P90_BarcodeEnable",0).toInt(&ok) == 0x00)
    {
        UiPeripheralState(barcode, notuse);
        return;
    }
    UiPeripheralState(barcode, init);

    switch(P91_BarcodeDevType)
    {
        case 0x00:
        {
            barCode = new BarCode(this);
            break;
        }
        default:
        {
            barCode = new BarCode(this);
            break;
        }
    }
    barCode->BarcodeBaud = P93_BarcodeBaud;
    connect(barCode,SIGNAL(TicketDebug(QString)),this,SLOT(TicketDebug(QString)));
    barCode->start();
}
void Form::BarCodeRead(QByteArray bardata)
{
    quint8 headLen = 0;

    if(((quint8)bardata.data()[0] == 0xaa)&&((quint8)bardata.data()[1] == 0x55)&&((quint8)bardata.data()[4] == 0xcd))
    {
        if((quint8)bardata.data()[5])
            UiPeripheralState(barcode, linkok);
        else
            UiPeripheralState(barcode, linkerr);
        return;
    }

    TicketDebug("barcode read:"+BgComm::ByteArrayToString(bardata, 16, true));

    if(oldBarData == bardata)
    {
        TicketDebug("the same barcode");
        return;
    }
    else
    {
        oldBarData = bardata;
        barTimer->start(P2b_CheckTicketGapTime*100);
    }
#if SNR_ENABLE
    if(userTimeOutType < 0x09)
    {
        UiTicketstatusDisplay(errtype);
        return;
    }
#endif

    if(FTPflag==0 && Ftp_Enable)
    {
      UiTicketstatusDisplay(ftpstopcheckticket);
      return;
    }

    switch(P05_GateMode)
    {
        case 0x00:break;
        case 0x01:PlayWav(109,800);TicketDebug("gate positive");return;
        case 0x02:break;
        case 0x03:PlayWav(109,800);TicketDebug("gate reverse");return;
        case 0x04:PlayWav(109,800);TicketDebug("gate pause");return;
        case 0x05:TicketDebug("no gate");break;
        default:break;
    }

    if(P94_BarcodeHead)
    {
        headLen = 1;
    }

    if(P95_BarcodeEndLen)
    {
        if(bardata.right(P95_BarcodeEndLen) != P96_BarcodeEndData.left(P95_BarcodeEndLen))
        {
            TicketDebug("barcode EndData err");
            return;
        }
    }
    if(bardata.length() <= (headLen+P95_BarcodeEndLen))
    {
        TicketDebug("barcode Length err");
        return;
    }

    bardata = bardata.mid(headLen, bardata.length()-P95_BarcodeEndLen-headLen);

    QString barcodestr = bardata;
    barcodestr = barcodestr.trimmed();
    bardata = barcodestr.toAscii();
    TicketDebug("barcode char:"+ barcodestr);

    if(((quint8)bardata.data()[0] == 'S')&&((quint8)bardata.data()[1] == 'E')&&((quint8)bardata.data()[2] == 'N')&&((quint8)bardata.data()[3] == 'D')
       &&((quint8)bardata.data()[4] == 'I')&&((quint8)bardata.data()[5] == 'N')&&((quint8)bardata.data()[6] == 'F')&&((quint8)bardata.data()[7] == 'O'))
    {
        //SENDINFO自定义条码
       if(((quint8)bardata.data()[8] == 'S')&&((quint8)bardata.data()[9] == 'Q'))
       {
           if(ticketAuthorizeFlag == 1)
           {
               ticketAuthorizeFlag=0;
               UiTicketstatusDisplay(authorizationsuccessfully);
               ticketData = ticketDataAuthorizeback;
               switch(ticketStyle)
               {
               case 0x02:
               {
                   prepare_ipdata_barconfirm();
                   break;
               }
               case 0xb1:
               case 0x03:
               {
                   prepare_ipdata_icconfirm();
                   break;
               }
               case 0x04:
               {
                   prepare_ipdata_idconfirm();
                   break;
               }
               case 0x0a:
               {
                   TicketFlagValue(0);
                   break;
               }
               default:break;
               }
           }
           return;
       }
       if(((quint8)bardata.data()[8] == 'I')&&((quint8)bardata.data()[9] == 'C'))
       {
           bardata = oldBarData.mid(headLen, oldBarData.length()-P95_BarcodeEndLen-headLen);//ic卡号的原因，取oldBarData
           TicketDebug("card snr:"+BgComm::ByteArrayToString(bardata.mid(10,4)));
           RfidRead(bardata.mid(10,20),1,0x01);
           return;
       }
       if(((quint8)bardata.data()[8] == 'I')&&((quint8)bardata.data()[9] == 'D'))
       {
           TicketDebug("cert no:"+(QString)(bardata.mid(10,18)));
           RfidRead(bardata.mid(10,18),1,0x02);
           return;
       }
       if(((quint8)bardata.data()[8] == 'K')&&((quint8)bardata.data()[9] == 'M'))
       {
           UiChange(check);
           UiPicDisplay(checkok);
           ticketPerNum = barcodestr.mid(10,2).toInt();
           TicketPerDisplay(ticketPerNum,1);
           UiPassPerNumUpdate(passPerNum);
           return;
       }
       if(((quint8)bardata.data()[8] == 'F')&&((quint8)bardata.data()[9] == 'A')&&((quint8)bardata.data()[10] == 'C')&&((quint8)bardata.data()[11] == 'E'))
       {
           faceenable = !faceenable;
           if(faceenable)
               TicketDebug("face enable");
           else
               TicketDebug("face disable");
           UiTicketstatusDisplay(facestatusdisplay);
           return;
       }
    }
    if(((quint8)bardata.data()[0] == 'S')&&((quint8)bardata.data()[1] == 'Q'))
    {
        ticketAuthorizeFlag = 1;
        UiTicketstatusDisplay(brushid);
        return;
    }
    if(((quint8)bardata.data()[0] == 'G')&&((quint8)bardata.data()[1] == 'P')&&((quint8)bardata.data()[2] == 'T'))
    {
        ticketData = bardata;
        UiChange(check);
        ui->frame_finger->hide();
        ui->label_picmsg->hide();
        getPic();
        return;
    }
    if(((quint8)bardata.data()[0] == 'Q')&&((quint8)bardata.data()[1] == 'L')&&((quint8)bardata.data()[2] == 'K')&&((quint8)bardata.data()[3] == 'A'))
    {
        TicketDebug("swinggate qingling");
        passPerNum = 0;
        TicketPerDisplay(0,0);
        if((P06_GateType == 0x02)||(P06_GateType == 0x03))
        {
            QByteArray sendbuf;
            quint8 verify = 0;
            sendbuf[0] = 0xfb;
            verify += sendbuf[0];
            sendbuf[1] = 0x05;
            verify += sendbuf[1];
            sendbuf[2] = 0xd6;
            verify += sendbuf[2];
            sendbuf[3] = 0x00;
            verify += sendbuf[3];
            sendbuf[4] = 0x00;
            verify += sendbuf[4];
            sendbuf[5] = verify&0x7f;
            if(P07_GateComType == 3)//canSwingGateBuf
            {
                UserEvent *ue = new UserEvent(CR::CanSwingGateBuf,this);
                ue->byteArray = sendbuf;
                qApp->postEvent(canBusThread,ue);
            }
            else
            {
                UserEvent *ue = new UserEvent(CR::SwingGateBuf,this);
                ue->byteArray = sendbuf;
                qApp->postEvent(swingGate,ue);
            }
        }
        return;
    }
    if(((quint8)bardata.data()[0] == 'Q')&&((quint8)bardata.data()[1] == 'U')&&((quint8)bardata.data()[2] == 'I')&&((quint8)bardata.data()[3] == 'C')&&((quint8)bardata.data()[4] == 'K'))
    {
        if((P06_GateType == 0x02)||(P06_GateType == 0x03))
        {
            if(P05_GateMode != 0x01)
            {
                P05_GateMode = 0x01;
                GateLableInit();
                TicketDebug("swinggate kuaisu type");
                SwingGateSetType(0xa2);
                PlayWav(106,800);
            }
            else
            {
                P05_GateMode = 0x00;
                GateLableInit();
                TicketDebug("swinggate putong type");
                SwingGateSetType(0xa1);
                PlayWav(105,800);
            }
        }
        return;
    }


    if(tcpConnectFlag)
    {
        if(0 == checkTicketState)
        {
            ticketSource = 0x01;
            barCodeData = bardata;
            TicketFlagValue(1);
            //解决bc 00协议  判断命令头是否有效
            QByteArray bartempcmd;
            int i,j;
            for(i=0;i<bardata.length();i++)
            {
                for(j=0x30;j<0x40;j++)
                {
                    if(bardata.data()[i] == j)
                        break;
                }
                if(j!=0x40)
                    break;
            }
            bartempcmd=bardata.mid(0,i);
            if( ((bartempcmd.length() != 0) && (fetchCmdSign.indexOf(bartempcmd) != -1))
               || ((quint8)bardata.data()[0] == 'N' && (quint8)bardata.data()[1] == 'K')
               || ((quint8)bardata.data()[0] == 'I' && (quint8)bardata.data()[1] == 'C'))
            {
                ticketStyle = 0xb1;
                serialNumber = bardata;
                userNumber.clear();
                prepare_ipdata_icticket();
            }
            else
            {
                ticketStyle = 0x02;
                if(P21_GroupInsertEnable)
                {
                    //qDebug()<<"-----------"<<"ticketTflag:"<<ticketTflag<<"passPerNum:"<<passPerNum<<"P20_CheckTicketMode:"<<P20_CheckTicketMode;
                    //特殊模式、允许插票、前一张是团队票且人数没过完
                    if(ticketTflag && passPerNum && P20_CheckTicketMode)
                    {
                        if(ticketDataback.data()[0] == 'E')
                        {
                            ticketTflag = 0;
                            prepare_ipdata_barconfirm_groupinsert();
                        }
                        else
                           UiTicketstatusDisplay(pleasewait);
                    }
                    else
                    {
                        prepare_ipdata_barticket();
                    }
                }
                else
                {
                    //qDebug()<<"+++++++++"<<"ticketTflag:"<<ticketTflag<<"passPerNum:"<<passPerNum<<"P20_CheckTicketMode:"<<P20_CheckTicketMode;
                    if(P20_CheckTicketMode)//特殊模式、禁止插票
                    {
                        if(passPerNum && ticketTflag)
                        {
                            //人数没过完而且前面是团队票，则团队票回滚
                            //ticketTflag = 0;
                            //prepare_ipdata_barconfirm_groupinsert();

                            //不允许插票
                            UiTicketstatusDisplay(pleasewait);
                        }
                        else
                        {
                            prepare_ipdata_barticket();
                        }
                    }
                    else
                    {
                        //禁止插票、前一张是团队票且人数没过完
                        if(ticketTflag && passPerNum)
                        {
                            UiTicketstatusDisplay(pleasewait);
                        }
                        else
                        {
                            prepare_ipdata_barticket();
                        }
                    }
                }
            }
        }
        else
        {
            UiTicketstatusDisplay(pleasewait);
        }
        //TicketTimer->start(3000);
    }
    else
    {
       UiTicketstatusDisplay(checknetwork);
    }
}
void Form::BARTimerOut()
{
    barTimer->stop();
    oldBarData.resize(0);
}
void Form::prepare_ipdata_barticket()
{
    UiChange(check);
    UiPicDisplay(soq);
    UiTicketNumDispaly(barcodetype, barCodeData);

    ticketData = barCodeData;

    QByteArray ipdata;
#if PROTOCOLVER == NEWPROTOCOL
    ipdata = PackTLVEntity(MED, IntToByte(ticketStyle));//介质
    ipdata += PackTLVEntity(SCN, P22_PartNoGuid);//景点号
    ipdata += PackTLVEntity(CHAN, IntToByte(P23_GateNo));//通道号
    ipdata += PackTLVEntity(CHT, P24_CheckTicketType);//检票类型
    ipdata += PackTLVEntity(CLIC, P08_ClientNo);//客户代码
    ipdata += PackTLVEntity(BC, barCodeData);//条码号

    ticketDataback = barCodeData;

    TcpSendCmd(0xb0,0x04,ipdata);

    QMap<QString, QString> fieldMap;
    fieldMap.insert("cid", BgComm::ByteArrayToString(bufCID));
    fieldMap.insert("barcode", barCodeData);
    fieldMap.insert("serverip", serverIp);
    sqlTable->InsertCheckTicket("querybarticket", fieldMap);
#else
    quint8 cmdtype = (ticketSource == 0x03) ? ticketSource:P92_BarcodeTicketType;

    ipdata[0] = 0x02;

    ipdata[ipdata.length()] = P22_PartNo;
    ipdata[ipdata.length()] = P23_GateNo;

    ipdata += P24_CheckTicketType;
    ipdata += P08_ClientNo;

    ipdata += barCodeData;
    ticketDataback = barCodeData;

    ipdata += ticketExtend;

    TcpSendCmd(0xb0,cmdtype,ipdata);
#endif
}
void Form::prepare_ipdata_barfingersend()
{
    QByteArray ipdata;
    quint8 cmdhead = 0xb0;

    cmdhead += fingerApplyingMode;

#if PROTOCOLVER == NEWPROTOCOL
    ipdata = PackTLVEntity(RIDN, ticketId);//记录识别号
    ipdata += PackTLVEntity(SCN, P22_PartNoGuid);//景点号
    ipdata += PackTLVEntity(CHAN, IntToByte(P23_GateNo));//通道号
    ipdata += PackTLVEntity(BC, barCodeData);//条码号
    ipdata += PackTLVEntity(BST, IntToByte(Pb1_FingerDevType));//生物识别业务类型
    ipdata += PackTLVEntity(FF, fingerData);//指纹特征
    ipdata += PackTLVEntity(EXD, ticketExtend);//扩展位

    TcpSendCmd(cmdhead,0x04,ipdata);
#else
    ipdata = ticketId;
    ipdata[ipdata.length()] = P22_PartNo;
    ipdata[ipdata.length()] = P23_GateNo;
    if(cmdhead == 0xb2)
    {
        ipdata += P24_CheckTicketType;
        ipdata += P08_ClientNo;
    }
    else
        ipdata += P24_CheckTicketType;
    ipdata += barCodeData;
    ipdata += fingerData;
    if(cmdhead == 0xb2)
        ipdata += ticketExtend;

    TcpSendCmd(cmdhead,0x00,ipdata);
#endif
}
void Form::prepare_ipdata_barconfirm()
{
    UiPicDisplay(checkok);

    QByteArray ipdata;
#if PROTOCOLVER == NEWPROTOCOL
    ipdata = PackTLVEntity(RIDN, ticketId);//记录识别号
    ipdata += PackTLVEntity(SCN, P22_PartNoGuid);//景点号
    ipdata += PackTLVEntity(CHAN, IntToByte(P23_GateNo));//通道号
    ipdata += PackTLVEntity(FAM, IntToByte(fingerApplyingMode));//指纹应用模式
    ipdata += PackTLVEntity(PAM, IntToByte(picApplyingMode));//照片应用模式
    ipdata += PackTLVEntity(IDAM, IntToByte(idApplyingMode));//二代证应用模式
    ipdata += PackTLVEntity(BC, barCodeData);//条码号
    ipdata += PackTLVEntity(EXD, ticketExtend);//扩展位

    TcpSendCmd(0xbf,0x04,ipdata);
    TicketPerDisplay(ticketPerNum,1);

    QMap<QString, QString> fieldMap;
    fieldMap.insert("cid", BgComm::ByteArrayToString(heartBufCID));
    fieldMap.insert("barcode", barCodeData);
    fieldMap.insert("barcodebuf", BgComm::ByteArrayToString(ipdata));
    fieldMap.insert("serverip", serverIp);
    fieldMap.insert("ticketclass", ticketClassStr);
    fieldMap.insert("tickettype", ticketTypeStr);
    fieldMap.insert("ticketkind", ticketkindStr);
    fieldMap.insert("checkcount", QString::number(ticketPerNum));
    sqlTable->InsertCheckTicket("confirmbarticket", fieldMap);
#else
    quint8 cmdhead = 0xbf;
    quint8 cmdtype = 0x00;

    switch((ticketSource == 0x03) ? ticketSource:P92_BarcodeTicketType)
    {
        case 0x00:
        {
            cmdtype = 0x00;
            ipdata += ticketId;
            ipdata += P22_PartNo;
            ipdata += P23_GateNo;
            break;
        }
        case 0x01:
        {
            cmdtype = 0x01;
            ipdata += ticketId;
            ipdata += P22_PartNo;
            ipdata += P23_GateNo;
            ipdata += fingerApplyingMode;
            break;
        }
        case 0x02:
        {
            cmdhead = 0xFF;
            cmdtype = 0x00;
            ipdata += ticketId;
            ipdata += P22_PartNo;
            ipdata += P23_GateNo;
            break;
        }
        case 0x03:
        {
            cmdtype = 0x03;
            ipdata += ticketId;
            ipdata += P22_PartNo;
            ipdata += P23_GateNo;
            ipdata += picApplyingMode;
            ipdata += fingerApplyingMode;
            ipdata += idApplyingMode;
            break;
        }
    }

    ipdata += barCodeData;

    ipdata += ticketAuthorizeType;
    if(ticketAuthorizeType == 0x01)
    {
        ipdata += serialNumber;
        ipdata += ticketExtend.mid(4,11);
    }
    else
        ipdata += ticketExtend.mid(1,15);

    TcpSendCmd(cmdhead,cmdtype,ipdata);
    TicketPerDisplay(ticketPerNum,1);
#endif
    TicketFlagValue(0);
}
void Form::prepare_ipdata_barconfirm_groupinsert()
{
    QByteArray ipdata;

    if(passPerNum == 0)
    {
        ticketTflag = 0;
        return;
    }
#if PROTOCOLVER == NEWPROTOCOL
    ipdata = PackTLVEntity(MED, IntToByte(0x02));//介质
    ipdata += PackTLVEntity(RIDN, ticketId);//记录识别号
    ipdata += PackTLVEntity(SCN, P22_PartNoGuid);//景点号
    ipdata += PackTLVEntity(CHAN, IntToByte(P23_GateNo));//通道号
    ipdata += PackTLVEntity(NTNUM, IntToByte(passPerNum));//未检票人数
    ipdata += PackTLVEntity(BC, ticketDataback);//条码号
    ipdata += PackTLVEntity(EXD, ticketExtend);//扩展位

    passPerNum = 0;
    ticketPerNum = 0;
    TicketPerDisplay(0,0);
    if((P06_GateType == 0x02)||(P06_GateType == 0x03))
    {
        QByteArray sendbuf;
        quint8 verify = 0;
        sendbuf[0] = 0xfb;
        verify += sendbuf[0];
        sendbuf[1] = 0x05;
        verify += sendbuf[1];
        sendbuf[2] = 0xd6;
        verify += sendbuf[2];
        sendbuf[3] = 0x00;
        verify += sendbuf[3];
        sendbuf[4] = 0x00;
        verify += sendbuf[4];
        sendbuf[5] = verify&0x7f;
        if(P07_GateComType == 3)//canSwingGateBuf
        {
            UserEvent *ue = new UserEvent(CR::CanSwingGateBuf,this);
            ue->byteArray = sendbuf;
            qApp->postEvent(canBusThread,ue);
        }
        else
        {
            UserEvent *ue = new UserEvent(CR::SwingGateBuf,this);
            ue->byteArray = sendbuf;
            qApp->postEvent(swingGate,ue);
        }
    }
    TcpSendCmd(0xfb,0x00,ipdata);

    QMap<QString, QString> fieldMap;
    fieldMap.insert("cid", BgComm::ByteArrayToString(heartBufCID));
    fieldMap.insert("barcodebuf", BgComm::ByteArrayToString(ipdata));
    fieldMap.insert("barcode", ticketDataback);
    fieldMap.insert("serverip", serverIp);
    sqlTable->InsertCheckTicket("rollbackbarticket", fieldMap);
#else
    ipdata[0] = 0x02;
    ipdata += ticketId;
    ipdata[ipdata.length()] = P22_PartNo;
    ipdata[ipdata.length()] = P23_GateNo;

    ipdata[ipdata.length()] = passPerNum/256;
    ipdata[ipdata.length()] = passPerNum%256;

    ipdata += ticketDataback;

    ipdata += ticketExtend;

    passPerNum = 0;
    ticketPerNum = 0;
    TicketPerDisplay(0,0);
    if((P06_GateType == 0x02)||(P06_GateType == 0x03))
    {
        QByteArray sendbuf;
        quint8 verify = 0;
        sendbuf[0] = 0xfb;
        verify += sendbuf[0];
        sendbuf[1] = 0x05;
        verify += sendbuf[1];
        sendbuf[2] = 0xd6;
        verify += sendbuf[2];
        sendbuf[3] = 0x00;
        verify += sendbuf[3];
        sendbuf[4] = 0x00;
        verify += sendbuf[4];
        sendbuf[5] = verify&0x7f;
        if(P07_GateComType == 3)//canSwingGateBuf
        {
            UserEvent *ue = new UserEvent(CR::CanSwingGateBuf,this);
            ue->byteArray = sendbuf;
            qApp->postEvent(canBusThread,ue);
        }
        else
        {
            UserEvent *ue = new UserEvent(CR::SwingGateBuf,this);
            ue->byteArray = sendbuf;
            qApp->postEvent(swingGate,ue);
        }
    }
    TcpSendCmd(0xbf,0x05,ipdata);
#endif
}
void Form::prepare_ipdata_barFetchCmdSign()
{
    QByteArray ipdata;

#if PROTOCOLVER == NEWPROTOCOL
    ipdata = PackTLVEntity(SCN, P22_PartNoGuid);//景点号
    ipdata += PackTLVEntity(CHAN, IntToByte(P23_GateNo));//通道号

    TcpSendCmd(0xbc,0x04,ipdata);
#else
    ipdata[0] = P22_PartNo;
    ipdata[1] = P23_GateNo;
    ipdata += ticketExtend;
    TcpSendCmd(0xbc,0x00,ipdata);
#endif
}
//rfid-----------------------------------------------------------------------------------
void Form::RfidInit()
{
    bool ok;
    if(qs->value("P70_RfidEnable",0).toInt(&ok) == 0x00)
    {
        UiPeripheralState(rfid, notuse);
        return;
    }
    UiPeripheralState(rfid, init);
    //读IC卡和二代证的应用模式
    P72_RfidTicketType = qs->value("P72_RfidTicketType",0).toInt(&ok);
    P75_IdCardType = qs->value("P75_IdCardType",0).toInt(&ok);

    rfidThread = new RfidThread(this);
    connect(rfidThread,SIGNAL(TicketDebug(QString)),this,SLOT(TicketDebug(QString)));

    P71_RfidDevType = qs->value("P71_RfidDevType",0).toInt(&ok);
    rfidThread->devType = P71_RfidDevType;
    rfidThread->idCardEnable = qs->value("P74_IdCardEnable",0).toInt(&ok);
    QString rfidPassWord;
    rfidPassWord = qs->value("P76_IcPassword","313233343536").toString();
    if(rfidPassWord.length() == 0)
    {
        rfidPassWord = "313233343536";
    }
    rfidPassWord = BgComm::FormatString(rfidPassWord, 2, QChar(' '));
    rfidThread->passWord = BgComm::StringToByteArray(rfidPassWord, 16, QChar(' '));
    rfidThread->start();

    oldCardRead.clear();
    cardTimer = new QTimer(this);
    connect(cardTimer,SIGNAL(timeout()),this,SLOT(CardTimerOut()));
}
void Form::RfidRead(QByteArray td,bool flag,quint8 type)
{
    if(td.length()<32)
        TicketDebug("rfid read: ticketdate:"+BgComm::ByteArrayToString(td, 16, true)+" flag:"+QString::number(flag)+" type:"+QString::number(type,16));
    else
        TicketDebug("rfid read: ticketdate:"+BgComm::ByteArrayToString(td.mid(0,18), 16, true)+"......"+" flag:"+QString::number(flag)+" type:"+QString::number(type,16));

    if((type&0xf0) == 0xf0)
    {
        switch(type)
        {
            case 0xfe:
            {
                UiPeripheralState(rfid, linkerr);
                return;
            }
            case 0xff:
            {
                UiPeripheralState(rfid, linkok);
                return;
            }
            default:break;
        }
    }

    if(type == 0x02)
    {
#if PERIDMATCH
        ticketSource = 0x01;
        idCard = td.mid(0,18);
        idName = td.mid(18,30);
        idPic = td.mid(48,1024);
        QTextCodec *pcode;
        pcode=QTextCodec::codecForName("UTF-16");
        int i;
        for(i=0;i<idName.size();i++)
        {
            if((quint8)idName.data()[i] == 0x20 && (quint8)idName.data()[i+1] == 0x00)
            {
                break;
            }
        }
        idNamestr = pcode->toUnicode(idName.mid(0,i));
        TicketDebug("idName:"+idNamestr+",idCard:"+(QString)idCard);
        if(0)//ticket
        {
            if((checkTicketState == 1)&&(ticketAuthorizeFlag == 0))
            {
                UiTicketstatusDisplay(pleasewait);
                return;
            }
            TicketFlagValue(1);
            peridmatchflag = 1;
            picApplyingMode = 4;
            FaceErrTimes=0;

            UiChange(check);
            UiPicDisplay(soq);
            UiTicketNumDispaly(idtype, idCard);
            UiTicketTypeDisplayString(idNamestr);
            UiTicketstatusDisplay(pleasematchface);

 //           prepare_ipdata_idticket();
            return ;
        }
        if(0)//kaoqin
        {
            if((checkTicketState == 1)&&(ticketAuthorizeFlag == 0))
            {
                UiTicketstatusDisplay(pleasewait);
                return;
            }
            barCodeData=idCard;
            TicketFlagValue(1);
            prepare_ipdata_barticket();
            return ;
        }
#endif

        td = td.mid(0,18);
    }
    if(oldCardRead == td)
    {
        TicketDebug("the same card");
        return;
    }
    else
    {
        oldCardRead = td;
        cardTimer->start(P2b_CheckTicketGapTime*100);
    }

    if((P06_GateType == 0x02)||(P06_GateType == 0x03))
    {
        switch(type)
        {
            /*
            a0、清零卡
            a1、普通模式卡
            a2、快速模式卡
            a3、暂停模式
            a4、反向敞开计数模式
            */
            case 0xa0://qingling
            {
                TicketDebug("swinggate qingling");
                passPerNum = 0;
                TicketPerDisplay(0,0);
                QByteArray sendbuf;
                quint8 verify = 0;
                sendbuf[0] = 0xfb;
                verify += sendbuf[0];
                sendbuf[1] = 0x05;
                verify += sendbuf[1];
                sendbuf[2] = 0xd6;
                verify += sendbuf[2];
                sendbuf[3] = 0x00;
                verify += sendbuf[3];
                sendbuf[4] = 0x00;
                verify += sendbuf[4];
                sendbuf[5] = verify&0x7f;
                if(P07_GateComType == 3)//canSwingGateBuf
                {
                    UserEvent *ue = new UserEvent(CR::CanSwingGateBuf,this);
                    ue->byteArray = sendbuf;
                    qApp->postEvent(canBusThread,ue);
                }
                else
                {
                    UserEvent *ue = new UserEvent(CR::SwingGateBuf,this);
                    ue->byteArray = sendbuf;
                    qApp->postEvent(swingGate,ue);
                }
                return;
            }
            case 0xa1://putong
            {
                P05_GateMode = 0x00;
                GateLableInit();
                TicketDebug("swinggate putong type");
                SwingGateSetType(type);
                return;
            }
            case 0xa2:
            {
                P05_GateMode = 0x01;
                GateLableInit();
                TicketDebug("swinggate kuaisu type");
                SwingGateSetType(type);
                return;
            }
            case 0xa3:
            {
                P05_GateMode = 0x04;
                UiTicketstatusDisplay(suspendmode);
                TicketDebug("swinggate zhanting type");
                SwingGateSetType(type);
                return;
            }
            case 0xa4:
            {
                P05_GateMode = 0x03;
                UiTicketstatusDisplay(reversepassage);
                TicketDebug("swinggate fanxiang type");
                SwingGateSetType(0xa4);
                return;
            }
            default:
            {
                break;
            }
        }
    }
    else
    {
       switch(type)
       {
           case 0xa0://qingling
           {
               TicketDebug("swinggate qingling");
               passPerNum = 0;
               TicketPerDisplay(0,0);
               return;
           }
           default:
           {
               break;
           }
       }
    }

#if SNR_ENABLE
    if(userTimeOutType < 0x09)
    {
        UiTicketstatusDisplay(errtype);
        return;
    }
#endif

    if(FTPflag==0 && Ftp_Enable)
    {
      UiTicketstatusDisplay(ftpstopcheckticket);
      return;
    }

    switch(P05_GateMode)
    {
        case 0x00:break;
        case 0x01:PlayWav(109,800);TicketDebug("gate positive");return;
        case 0x02:break;
        case 0x03:PlayWav(109,800);TicketDebug("gate reverse");return;
        case 0x04:PlayWav(109,800);TicketDebug("gate pause");return;
        case 0x05:TicketDebug("no gate");break;
        default:break;
    }

    if(flag == 0)
    {
        UiTicketstatusDisplay(invalidcard);
        return;
    }
    if(!tcpConnectFlag)
    {
        UiTicketstatusDisplay(checknetwork);
        return;
    }

    if(type>0xc0)
    {
        ticketIcType = type-0xc0;
    }
    else
        ticketIcType = 0x00;

    ticketSource = 0x01;
    switch(type)
    {
        case 0xc1:
        case 0x01:
        {
            if((checkTicketState == 1)&&(ticketAuthorizeFlag == 0))
            {
                UiTicketstatusDisplay(pleasewait);
                return;
            }
            TicketFlagValue(1);

            ticketStyle = 0x03;

            if(ticketAuthorizeType == 1)
            {
                serialNumber = td.mid(0,4);
                userNumber = td.mid(7,4);
            }
            else
            {
                serialNumber = td.mid(0,4);
                userNumber = td.mid(7,4);
            }

            prepare_ipdata_icticket();
            break;
        }
        case 0x02:
        {   
            if(ticketGetIdNumFlag)
            {
                ticketGetIdNumFlag = 0;
                if(ticketIdNumRead == td)
                {
                    if(ticketStyle == 0x02)
                    {
                        UiTicketstatusDisplay(swipesuccessful);
                        return;
                    }
                }
                else
                {
                    UiTicketstatusDisplay(idmatchfailure);
                    return;
                }
            }
            else
            {
                idCard = td;
                if(checkTicketState == 1)
                {
                    UiTicketstatusDisplay(pleasewait);
                    return;
                }
                TicketFlagValue(1);
                ticketStyle = 0x04;
                prepare_ipdata_idticket();
            }
#if IDPICDISPLAY
            UiPicDisplay(idpicdis);
#endif
            break;
        }
        case 0xc2:
        {
            if((checkTicketState == 1)&&(ticketAuthorizeFlag == 0))
            {
                UiTicketstatusDisplay(pleasewait);
                return;
            }
            TicketFlagValue(1);
            ticketStyle = 0x03;

            if(ticketAuthorizeType == 1)
            {
                serialNumber =  td.mid(0,4);
                userNumber = td.mid(4,4);
            }
            else
            {
                serialNumber = td.mid(0,4);
                userNumber = td.mid(4,4);
            }
            prepare_ipdata_icticket();
            break;
        }
        case 0xc3:
        {
            if(checkTicketState == 1)
            {
                UiTicketstatusDisplay(pleasewait);
                return;
            }
            TicketFlagValue(1);
            barCodeData = BgComm::ByteArrayToString(td.mid(4,7)).toAscii();//注：此处修改与之前的不兼容，用到时和后台进行统一
            ticketStyle = 0x02;
            prepare_ipdata_barticket();
            break;
        }
        case 0xc4:
        {
            if((checkTicketState == 1)&&(ticketAuthorizeFlag == 0))
            {
                UiTicketstatusDisplay(pleasewait);
                return;
            }
            TicketFlagValue(1);
            ticketStyle = 0x03;

            if(ticketAuthorizeType == 1)
            {
                serialNumber =  td.mid(0,4);
                userNumber = td.mid(4,4);
            }
            else
            {
                serialNumber = td.mid(0,4);
                userNumber = td.mid(4,4);
            }
            prepare_ipdata_icticket();
            break;
        }

        default:
        {
            if((checkTicketState == 1)&&(ticketAuthorizeFlag == 0))
            {
                UiTicketstatusDisplay(pleasewait);
                return;
            }
            TicketFlagValue(1);

            ticketStyle = 0x03;

            if(ticketAuthorizeType == 1)
            {
                serialNumber = td.mid(0,4);
                userNumber = td.mid(7,4);
            }
            else
            {
                serialNumber = td.mid(0,4);
                userNumber = td.mid(7,4);
            }
            prepare_ipdata_icticket();
            break;
        }
    }
}
void Form::CardTimerOut()
{
    cardTimer->stop();
    oldCardRead.resize(0);
}
void Form::prepare_ipdata_icticket()
{
    UiChange(check);
    UiPicDisplay(soq);
    if(ticketStyle == 0xb1)
        UiTicketNumDispaly(ictype, serialNumber);
    else
        UiTicketNumDispaly(ictype, BgComm::ByteArrayToString(serialNumber));

    ticketData = serialNumber;
    ticketData += userNumber;

    QByteArray ipdata;
#if PROTOCOLVER == NEWPROTOCOL
    ipdata = PackTLVEntity(MED, IntToByte(ticketStyle));//介质
    ipdata += PackTLVEntity(SCN, P22_PartNoGuid);//景点号
    ipdata += PackTLVEntity(CHAN, IntToByte(P23_GateNo));//通道号
    ipdata += PackTLVEntity(CHT, P24_CheckTicketType);//检票类型
    ipdata += PackTLVEntity(CLIC, P08_ClientNo);//客户代码

    ipdata += PackTLVEntity(SN, serialNumber);//序列号

    TcpSendCmd(0xc0,0x04,ipdata);

    QMap<QString, QString> fieldMap;
    fieldMap.insert("cid", BgComm::ByteArrayToString(bufCID));
    fieldMap.insert("sn", BgComm::ByteArrayToString(serialNumber));
    fieldMap.insert("un", BgComm::ByteArrayToString(userNumber));
    fieldMap.insert("serverip", serverIp);
    sqlTable->InsertCheckTicket("queryicticket", fieldMap);
#else
    quint8 cmdtype = (ticketSource == 0x03) ? ticketSource:P72_RfidTicketType;

    ipdata[0] = ticketStyle;
    ipdata[ipdata.length()] = P22_PartNo;
    ipdata[ipdata.length()] = P23_GateNo;

    if(ticketAuthorizeFlag == 1)
    {
        ipdata += serialNumber;
        ipdata += userNumber;
        ipdata += 0x09;
    }
    else
    {
        ipdata += serialNumber;
        ipdata += userNumber;
        ipdata += ticketIcType;
    }

    ipdata += ticketExtend.mid(1,15);

    TcpSendCmd(0xc0,cmdtype,ipdata);
#endif
}
void Form::prepare_ipdata_icfingersend()
{
    QByteArray ipdata;
    quint8 cmdhead = 0xc0;

    cmdhead += fingerApplyingMode;
#if PROTOCOLVER == NEWPROTOCOL
    ipdata = PackTLVEntity(RIDN, ticketId);//记录识别号
    ipdata += PackTLVEntity(SCN, P22_PartNoGuid);//景点号
    ipdata += PackTLVEntity(CHAN, IntToByte(P23_GateNo));//通道号
    ipdata += PackTLVEntity(SN, serialNumber);//序列号
    ipdata += PackTLVEntity(BST, IntToByte(Pb1_FingerDevType));//生物识别业务类型
    ipdata += PackTLVEntity(FF, fingerData);//指纹特征
    ipdata += PackTLVEntity(EXD, ticketExtend);//扩展位

    TcpSendCmd(cmdhead,0x04,ipdata);
#else
    if(ticketStyle == 0xb1)
    {
        ipdata[0] = 0xb1;
    }
    else
    {
        ipdata[0] = 0x03;
    }
    ipdata[1] = P22_PartNo;
    ipdata[2] = P23_GateNo;
    ipdata += serialNumber;
    ipdata += userNumber;
    ipdata += fingerData;
    ipdata += ticketExtend;

    TcpSendCmd(cmdhead,0x00,ipdata);
#endif
}
void Form::prepare_ipdata_icconfirm()
{
    UiPicDisplay(checkok);

    QByteArray ipdata;
#if PROTOCOLVER == NEWPROTOCOL
    ipdata = PackTLVEntity(RIDN, ticketId);//记录识别号
    ipdata += PackTLVEntity(SCN, P22_PartNoGuid);//景点号
    ipdata += PackTLVEntity(CHAN, IntToByte(P23_GateNo));//通道号
    ipdata += PackTLVEntity(FAM, IntToByte(fingerApplyingMode));//指纹应用模式
    ipdata += PackTLVEntity(PAM, IntToByte(picApplyingMode));//照片应用模式
    ipdata += PackTLVEntity(IDAM, IntToByte(idApplyingMode));//二代证应用模式
    ipdata += PackTLVEntity(SN, serialNumber);//序列号
    ipdata += PackTLVEntity(EXD, ticketExtend);//扩展位

    TcpSendCmd(0xcf,0x04,ipdata);
    TicketPerDisplay(ticketPerNum,1);



    QMap<QString, QString> fieldMap;
    fieldMap.insert("cid", BgComm::ByteArrayToString(heartBufCID));
    fieldMap.insert("sn", BgComm::ByteArrayToString(serialNumber));
    fieldMap.insert("snbuf", BgComm::ByteArrayToString(ipdata));
    fieldMap.insert("serverip", serverIp);
    fieldMap.insert("ticketclass", ticketClassStr);
    fieldMap.insert("tickettype", ticketTypeStr);
    fieldMap.insert("ticketkind", ticketkindStr);
    fieldMap.insert("checkcount", QString::number(ticketPerNum));
    sqlTable->InsertCheckTicket("confirmicticket", fieldMap);
#else
    QByteArray buf;
     quint8 cmdhead = 0xcf;
     quint8 cmdtype = 0;

     switch((ticketSource == 0x03) ? ticketSource:P72_RfidTicketType)
     {
         case 0x00:
         {
             buf = checkCmdBuf;
             ipdata += ticketStyle;
             ipdata[ipdata.length()] = buf.data()[5];
             ipdata[ipdata.length()] = buf.data()[28];

             ipdata += serialNumber;
             ipdata += userNumber;

             ipdata += P22_PartNo;
             ipdata += P23_GateNo;
             ipdata += checkCmdBuf.mid(35,4);
             break;
         }
         case 0x01:
         {
             cmdhead = 0xcf;
             cmdtype = 0x01;
             ipdata += ticketStyle;
             ipdata += P22_PartNo;
             ipdata += P23_GateNo;
             ipdata += serialNumber;
             ipdata += userNumber;
             break;
         }
         case 0x02:
         {
             cmdhead = 0xff;
             cmdtype = 0x01;

             ipdata += serialNumber;
             ipdata += userNumber;

             ipdata += P22_PartNo;
             ipdata += P23_GateNo;
             ipdata[ipdata.length()] = 0x00;
             break;
         }
         case 0x03:
         {
             //介质、景点编号、通道号、卡序列号、卡用户编号、图像应用模式（3种）、指纹应用模式（3种）、二代证应用模式（3种）
             cmdhead = 0xcf;
             cmdtype = 0x03;
             ipdata[0] = ticketStyle;
             ipdata += P22_PartNo;
             ipdata += P23_GateNo;
             ipdata += serialNumber;
             ipdata += userNumber;
             ipdata += picApplyingMode;
             ipdata += fingerApplyingMode;
             ipdata += idApplyingMode;
             break;
         }
     }

     ipdata += ticketIcType;
     ipdata += ticketAuthorizeType;
     if(ticketAuthorizeType == 0x01)
     {
         ipdata += serialNumber;
         ipdata += ticketExtend.mid(5,10);
     }
     else
     {
         ipdata += ticketExtend.mid(2,14);
     }
     if(ticketStyle == 0xb1)
         ipdata[ipdata.length()-1] = ticketStyle;

     TcpSendCmd(cmdhead,cmdtype,ipdata);
     TicketPerDisplay(ticketPerNum,1);

#endif
     if((ticketStyle == 0x03)&&(P71_RfidDevType == 0x05))
     {
         UserEvent *ue = new UserEvent(CR::RFIDIN,this);
         ue->type = 0x00;
         qApp->postEvent(rfidThread,ue);
     }
     TicketFlagValue(0);
}
void Form::prepare_ipdata_idticket()
{
    UiChange(check);
    UiPicDisplay(soq);
    UiTicketNumDispaly(idtype, idCard);

    ticketData = idCard;

    QByteArray ipdata;
#if PROTOCOLVER == NEWPROTOCOL
    ipdata = PackTLVEntity(MED, IntToByte(ticketStyle));//介质
    ipdata += PackTLVEntity(SCN, P22_PartNoGuid);//景点号
    ipdata += PackTLVEntity(CHAN, IntToByte(P23_GateNo));//通道号
    ipdata += PackTLVEntity(CHT, P24_CheckTicketType);//检票类型
    ipdata += PackTLVEntity(CLIC, P08_ClientNo);//客户代码
    ipdata += PackTLVEntity(CHID, idCard);//持卡人证件号

    TcpSendCmd(0xd0,0x04,ipdata);

    QMap<QString, QString> fieldMap;
    fieldMap.insert("cid", BgComm::ByteArrayToString(bufCID));
    fieldMap.insert("idcard", idCard);
    fieldMap.insert("serverip", serverIp);
    sqlTable->InsertCheckTicket("queryidticket", fieldMap);
#else
    quint8 cmdtype = (ticketSource == 0x03) ? ticketSource:P75_IdCardType;

    ipdata[0] = (ticketSource == 0x03) ? 0xFA:0x04;//packet

    ipdata[ipdata.length()] = P22_PartNo;
    ipdata[ipdata.length()] = P23_GateNo;
    //加上检票类型和客户代码
    ipdata += P24_CheckTicketType;
    ipdata += P08_ClientNo;

    ipdata += idCard;

    ipdata += ticketExtend;

    TcpSendCmd(0xD0,cmdtype,ipdata);
#endif
}
void Form::prepare_ipdata_idfingersend()
{
    QByteArray ipdata;
    quint8 cmdhead = 0xd0;

    cmdhead += fingerApplyingMode;
#if PROTOCOLVER == NEWPROTOCOL
    ipdata = PackTLVEntity(RIDN, ticketId);//记录识别号
    ipdata += PackTLVEntity(SCN, P22_PartNoGuid);//景点号
    ipdata += PackTLVEntity(CHAN, IntToByte(P23_GateNo));//通道号
    ipdata += PackTLVEntity(CHID, idCard);//持卡人证件号
    ipdata += PackTLVEntity(BST, IntToByte(Pb1_FingerDevType));//生物识别业务类型
    ipdata += PackTLVEntity(FF, fingerData);//指纹特征
    ipdata += PackTLVEntity(EXD, ticketExtend);//扩展位

    TcpSendCmd(cmdhead,0x04,ipdata);
#else
    ipdata += idCard;
    ipdata += fingerData;
    ipdata += ticketExtend;

    TcpSendCmd(cmdhead,0x00,ipdata);
#endif
}
void Form::prepare_ipdata_idconfirm()
{
    UiPicDisplay(checkok);

    QByteArray ipdata;

#if PROTOCOLVER == NEWPROTOCOL
    ipdata = PackTLVEntity(RIDN, ticketId);//记录识别号
    ipdata += PackTLVEntity(SCN, P22_PartNoGuid);//景点号
    ipdata += PackTLVEntity(CHAN, IntToByte(P23_GateNo));//通道号
    ipdata += PackTLVEntity(FAM, IntToByte(fingerApplyingMode));//指纹应用模式
    ipdata += PackTLVEntity(PAM, IntToByte(picApplyingMode));//照片应用模式
    ipdata += PackTLVEntity(CHID, idCard);//持卡人证件号
    ipdata += PackTLVEntity(EXD, ticketExtend);//扩展位

    TcpSendCmd(0xdf,0x04,ipdata);
    TicketPerDisplay(ticketPerNum,1);

    QMap<QString, QString> fieldMap;
    fieldMap.insert("cid", BgComm::ByteArrayToString(heartBufCID));
    fieldMap.insert("idcard", idCard);
    fieldMap.insert("idbuf", BgComm::ByteArrayToString(ipdata));
    fieldMap.insert("serverip", serverIp);
    fieldMap.insert("ticketclass", ticketClassStr);
    fieldMap.insert("tickettype", ticketTypeStr);
    fieldMap.insert("ticketkind", ticketkindStr);
    fieldMap.insert("checkcount", QString::number(ticketPerNum));
    sqlTable->InsertCheckTicket("confirmidticket", fieldMap);
#else
    quint8 cmdtype = 0x00;

    switch((ticketSource == 0x03) ? ticketSource:P75_IdCardType)
    {
        case 0x00:
        {
            cmdtype = 0x00;
            ipdata += ticketId;
            ipdata[ipdata.length()] = P22_PartNo;
            ipdata[ipdata.length()] = P23_GateNo;
            ipdata += idCard;
            ipdata += ticketExtend;
            break;
        }
        case 0x01:
        {
            cmdtype = 0x01;
            ipdata += idCard;
            ipdata[ipdata.length()] = P22_PartNo;
            ipdata[ipdata.length()] = P23_GateNo;
            ipdata += ticketExtend;
            break;
        }
        case 0x02:
        {
            cmdtype = 0x02;
            break;
        }
        case 0x03:
        {
            cmdtype = 0x03;
            ipdata += ticketId;
            ipdata += P22_PartNo;
            ipdata += P23_GateNo;
            ipdata += picApplyingMode;
            ipdata += fingerApplyingMode;
            ipdata += idApplyingMode;
            ipdata += idCard;
            ipdata += ticketExtend;
            break;
        }
    }

    TcpSendCmd(0xDf,cmdtype,ipdata);
    TicketPerDisplay(ticketPerNum,1);
#endif
    TicketFlagValue(0);
}
//pic--------------------------------------------------------------------------------------
void Form::VideoInit()
{
    bool ok;
    camerRunFlag = 0;
    photographEnable = 0;

    videoTimer = new QTimer(this);
    connect(videoTimer,SIGNAL(timeout()),this,SLOT(update()));

#if HARDWAREVER != SDE_GA502_1_3 && HARDWAREVER != SDE_GA503_1_0
    photographEnable = qs->value("PhotographEnable",1).toInt(&ok);
    if(!ok)
    {
        photographEnable = 1;
    }
    pp = (unsigned char *)malloc(640 * 480/*QWidget::width()*QWidget::height()*/* 3 * sizeof(char));
    frame = new QImage(pp,640,480,QImage::Format_RGB888);
    videoDevice = new VideoDevice(this);
 #endif

    if(photographEnable)
    {
        camerRunFlag = 1;
        videoTimer->start(30);
    }
    else
    {
        camerRunFlag = 0;
        videoTimer->start(300);

//        free(pp);//如果photographEnable=0
//        delete frame;
//        delete videoDevice;
    }

    P28_ImageDisGapTime = qs->value("P28_ImageDisGapTime",1).toInt(&ok);
    if(!ok)
    {
        P28_ImageDisGapTime = 10;
    }
    picDisTimer = new QTimer(this);
    connect(picDisTimer,SIGNAL(timeout()),this,SLOT(PicDisTimerOut()));
}
void Form::prepare_ipdata_downpic(quint8 times)
{
    QByteArray ipdata;
    quint8 cmdtype = 0;
#if PROTOCOLVER == NEWPROTOCOL
    ipdata = PackTLVEntity(RIDN, ticketId);//记录识别号

    if(ticketStyle == 0x02)//barcode
    {
        cmdtype = 0x00;
        ipdata += PackTLVEntity(BC, barCodeData);//条码号
    }
    else if(ticketStyle == 0x03 || ticketStyle == 0xb1)//iccard
    {
        cmdtype = 0x01;
        ipdata += PackTLVEntity(SN, serialNumber);//序列号
    }
    else if(ticketStyle == 0x04)//idcard
    {
        cmdtype = 0x02;
        ipdata += PackTLVEntity(CHID, idCard);//二代证号
    }

    ipdata += PackTLVEntity(PFRP, IntToByte(times));//图片帧位置
    ipdata += PackTLVEntity(EXD, ticketExtend);//扩展位
#else
    if(ticketStyle == 0x02)//barcode
    {
        cmdtype = 0x00;
        ipdata += ticketId;
        ipdata += barCodeData;
    }
    else if(ticketStyle == 0x03 || ticketStyle == 0xb1)//iccard
    {
        cmdtype = 0x01;
        ipdata += serialNumber;
        ipdata += userNumber;
    }
    else if(ticketStyle == 0x04)//idcard
    {
        cmdtype = 0x02;
        ipdata += idCard;//二代证号
    }

    ipdata[ipdata.length()] = times;
    ipdata += ticketIcType;
    ipdata += ticketExtend.mid(2,14);
    ipdata[ipdata.length()-1] = ticketStyle;
#endif
    TcpSendCmd(0xf1,cmdtype,ipdata);
}
#if PROTOCOLVER == NEWPROTOCOL
void Form::TicketPicDisplay(quint8 total, quint8 curr, QByteArray pic)
{
    qint32 piclength;

    if(curr == 0x01)//pic down begin
    {
        picDownData.resize(0);
    }
    piclength = picDownData.length();
    picDownData += pic;
    if((total == curr) || (piclength == picDownData.length()) || (total < curr))//pic down end
    {
        picApplyingMode = 0;

        QImage picImage;
        picImage.loadFromData(picDownData);
        pixPic = QPixmap::fromImage(picImage);
        pixPic = pixPic.scaled(320,240,Qt::KeepAspectRatio);
        UiPicDisplay(picdis);



        switch(fingerApplyingMode)
        {
            case 0x01:
            {
                UiTicketstatusDisplay(inputfingerprint);
                break;
            }
            case 0x02:
            {
                UiTicketstatusDisplay(matchfingerprint);
                break;
            }
            default:
            {
                switch(idApplyingMode)
                {
                    case 0x01:
                    {
                        qDebug()<<"luruerdaizheng";
                        break;
                    }
                    case 0x02:
                    {
                        qDebug()<<"biduierdaizheng";
                        break;
                    }
                    default:
                    {
                        UiTicketstatusDisplay(swipesuccessful);
                        break;
                    }
                }
                break;
            }
        }
    }
    else
    {
        picDownTimes++;
        prepare_ipdata_downpic(picDownTimes);
    }
}
#else
void Form::TicketPicDisplay(QByteArray pic)
{
    qint32 piclength;

    pic = pic.mid(4,pic.length()-4-1);
    if((quint8)pic.data()[1] == 0x01)//pic down begin
    {
        picDownData.resize(0);
    }
    piclength = picDownData.length();
    picDownData += pic.mid(2,pic.length()-2);
    if(((quint8)pic.data()[0] == (quint8)pic.data()[1]) || piclength == picDownData.length())//pic down end
    {
        picApplyingMode = 0;

        QImage picImage;
        picImage.loadFromData(picDownData);
        pixPic = QPixmap::fromImage(picImage);
        pixPic = pixPic.scaled(320,240,Qt::KeepAspectRatio);
        //ui->label_pic->setPixmap(pixPic);
        UiPicDisplay(picdis);

        switch(fingerApplyingMode)
        {
            case 0x01:
            {
                UiTicketstatusDisplay(inputfingerprint);
                break;
            }
            case 0x02:
            {
                UiTicketstatusDisplay(matchfingerprint);
                break;
            }
            default:
            {
                switch(idApplyingMode)
                {
                    case 0x01:
                    {
                        qDebug()<<"luruerdaizheng";
                        break;
                    }
                    case 0x02:
                    {
                        qDebug()<<"biduierdaizheng";
                        break;
                    }
                    default:
                    {
                        UiTicketstatusDisplay(swipesuccessful);
                        break;
                    }
                }
                break;
            }
        }
    }
    else
    {
        picDownTimes++;
        prepare_ipdata_downpic(picDownTimes);
    }
}
#endif
void Form::getPic()
{  
#if HARDWAREVER != SDE_GA502_1_3 && HARDWAREVER != SDE_GA503_1_0
    if(photographEnable == 2)
    {
        detectFlag = 1;
        videoTimer->stop();
        videoTimer->start(30);
    }
    else
    {
        for(quint8 i=0; i<3; i++)
            videoDevice->getframe(pp);
        frame->loadFromData((uchar *)pp,/*len*/640 * 480 * 3 * sizeof(char));

        pixPic = QPixmap::fromImage(*frame,Qt::AutoColor);
        pixPic = pixPic.scaled(380,285,Qt::KeepAspectRatio);
        UiPicDisplay(picdis);

        frame->save(PGPIX_JPG_FILEPATH);
        prepare_ipdata_sendjpg();
    }
#else
    UiTicketstatusDisplay(pleasebindthephoto);
#endif

}
void Form::prepare_ipdata_sendjpg()
{
    gateTimer->stop();

    ///*
    QString s;
    s = "cp ";
    s += PGPIX_JPG_FILEPATH;
    s += " ";
    s += PUTPIX_JPG_FILEPATH;
    s += ticketData;
//    s += "_";
//    s += QDateTime::currentDateTime().toString("yyyyMMddhhmmss");
//    s +="_";
//    s +=QString::number(P23_GateNo);
//    s += "_";
//    s += QString::number(PassPerNum);
    s += ".jpg";
    QProcess::execute(s);
    QProcess::execute("sync");
    //*/
    ///*
    if(fingerApplyingMode) //finger
    {
        if(fingerApplyingMode == 0x01)
        {
            UiTicketstatusDisplay(inputfingerprint);
        }
        else if(fingerApplyingMode == 0x02)
        {
            UiTicketstatusDisplay(matchfingerprint);
        }
    }
    else
    {
        UiTicketstatusDisplay(swipesuccessful);
    }
    //*/
}
void Form::PicDisTimerOut()
{
    picDisTimer->stop();
    if(checkTicketState)
    {
        picDisTimer->start(P28_ImageDisGapTime*1000);
    }
    else
    {
        if(picDisFlag)
        {
            picDisFlag = 0;
            UiChange(standby);
        }
    }
}
//sound------------------------------------------------------------------------------------
void Form::SoundInit()
{
#if ARM_LINUX
//    soundDevice = new SoundDevice;
//    soundDevice->start();
    process = new QProcess(this);
    //connect(process, SIGNAL(started()), this, SLOT(start_process()));
    connect(process, SIGNAL(readyReadStandardOutput()), this,    SLOT(redFromStdOut()));
    connect(process, SIGNAL(readyReadStandardError()), this,    SLOT(redFromStdErr()));
    connect(process, SIGNAL(stateChanged(QProcess::ProcessState)), this, SLOT(processStateChanged(QProcess::ProcessState)));
    connect(process, SIGNAL(error(QProcess::ProcessError)), this, SLOT(processError(QProcess::ProcessError)));
    connect(process, SIGNAL(finished(int,QProcess::ExitStatus)), this, SLOT(processFinished(int,QProcess::ExitStatus)));

    playingFlag = 0;
    soundNameList.clear();
#endif
    bool ok;
    soundValue = qs->value("P00_ValueLeft",1).toInt(&ok);
    if(!ok)
    {
        soundValue = 1;
    }
    if(soundValue > 100)
    {
        soundValue = 100;
        qs->setValue("P00_ValueLeft","100");
    }

    soundValue = soundValue*(0.7)-40;

    soundType = 0;
    soundTimer = new QTimer(this);
    connect(soundTimer,SIGNAL(timeout()),this,SLOT(SoundTimerOut()));
    ticketSoundAddr=0;
}
void Form::redFromStdOut()
{
    //TicketDebug(QString::fromLocal8Bit(process->readAllStandardOutput()));
}
void Form::redFromStdErr()
{
    //TicketDebug(QString("redFromStdErr:") + process->readAllStandardError());
}
void Form::processStateChanged(QProcess::ProcessState state)
{
//    switch(state) {
//    case QProcess::NotRunning:
//    {
//        qDebug()<<"NotRunning";
//        break;
//    }
//    case QProcess::Starting:
//    {
//        qDebug()<<"Starting";
//        break;
//    }
//    case QProcess::Running:
//    {
//        qDebug()<<"Running";
//        break;
//    }
//    }
}
void Form::processError(QProcess::ProcessError error)
{
    switch(error) {
    case QProcess::FailedToStart:
    {
        TicketDebug(QString("Sound start err！"));
        break;
    }
    case QProcess::Crashed:
    {
        TicketDebug(QString("Crashed！"));
        break;
    }
    case QProcess::Timedout:
    {
        TicketDebug(QString("Timedout！"));
        break;
    }
    case QProcess::ReadError:
    {
        TicketDebug(QString("ReadError！"));
        break;
    }
    case QProcess::WriteError:
    {
        TicketDebug(QString("WriteError！"));
        break;
    }
    case QProcess::UnknownError:
    {
        TicketDebug(QString("UnknownError！"));
        break;
    }
    }
}
void Form::processFinished(int exitCode, QProcess::ExitStatus exitStatus)
{
    if(exitStatus == QProcess::CrashExit)
    {
        //TicketDebug(QString("err stop"));
    }
    else
    {

        if(playingFlag > 1)
        {
            soundNameList.removeAt(0);
            playingFlag--;
            QStringList arguments;
            arguments << QString("-af");
            arguments << QString("volume=%1").arg(soundValue);
            arguments << QString("-srate");
            arguments << QString("44100");
            arguments << soundNameList.at(0);
            //qDebug()<<arguments;
            process->start(QString("/usr/share/arm-alsa/bin/mplayer"), arguments);
        }
        else
        {
            soundNameList.clear();
            playingFlag = 0;
        }
       // TicketDebug(QString("soundNameList length---=%1").arg(soundNameList.length()));
    }
}
void Form::PlayWav(quint16 addr, quint16 time)
{
    soundTimer->stop();
    QString cmdstr = SOUND_FILEPATH;
    switch(language)
    {
        case 1:
        {
            QDir putDir;
            QString strTemp = SOUND_FILEPATH;
            strTemp.append("Cn/");
            putDir.setPath(strTemp);
            if(putDir.exists())
            {
                cmdstr.append("Cn/");
            }
            break;
        }
        case 2:
            cmdstr.append("En/");
            break;
        case 3:
            cmdstr.append("Fr/");
            break;
        default:
            language = 1;
            cmdstr.append("Cn/");
            break;
    }

    cmdstr.append("%1.wav");
    QString wavname = QString(cmdstr).arg(addr);
    TicketDebug(QString("play sound: ") + wavname);

    //QSound::play(wavname);
#if ARM_LINUX
//    soundprocess->playSound(wavname);
    soundName = wavname;

    if(playingFlag == 0)
    {
        soundNameList.clear();
        soundNameList.append(soundName);
        playingFlag = 1;
        QStringList arguments;
        arguments << QString("-af");
        arguments << QString("volume=%1").arg(soundValue);
        arguments << QString("-srate");
        arguments << QString("44100");
        arguments << soundName;
        //qDebug()<<arguments;
        process->start(QString("/usr/share/arm-alsa/bin/mplayer"), arguments);
    }
    else
    {
        if(playingFlag >= MAXCACHE )
        {
            playingFlag = MAXCACHE;
            soundNameList.replace(soundNameList.length()-1, soundName);
        }
        else
        {
            soundNameList.append(soundName);

            playingFlag++;
        }
        //TicketDebug(QString("soundNameList length+++=%1").arg(soundNameList.length()));
    }
#endif
    soundTimer->stop();
    soundTimer->start(time);
}
void Form::SoundTimerOut()
{
    soundTimer->stop();
    switch(soundType)
    {
        case 0xD0:
        {
#if FINGEROPENMODE
        if(Pb1_FingerDevType == 0x01)
        {
            fingerStep = 0x03;
            USBFingerTemplate_direct();
        }
        else
            FingerTemplate(fingerchangkai);
#endif
            UiTicketstatusDisplay(matchfingerprint);
            break;
        }
        case 0xE0:
        {
#if FINGEROPENMODE
        if(Pb1_FingerDevType == 0x01)
        {
            if(fingerApplyingMode == 0x01)
            {
                if(Pb2_FingerInTimes == 2)
                {
                    fingerStep = 0x01;
                    USBFingerFeature();//录入两次
                }
                else
                {
                    fingerStep = 0x02;
                    USBFingerTemplate_direct();//录入一次
                }
            }
            else
            {
                fingerStep = 0x03;
                USBFingerTemplate_direct();
            }

        }
        else
            FingerTemplate(fingerchangkai);
#endif
            UiTicketstatusDisplay(inputfingerprint);
            break;
        }
        case 0xf0:
        {
            if(Pb1_FingerDevType == 0x01)
            {
                USBFingerTemplate();
            }
            else
                FingerFeature(1);
            break;
        }
        case 0xe1:
        {
            UiTicketstatusDisplay(pleaseinputface);
            break;
        }
        case 0xd1:
        {
            UiTicketstatusDisplay(pleasematchface);
            break;
        }
        case 0x55:
        {
#if FINGEROPENMODE
        if(Pb1_FingerDevType == 0x01)
        {
            fingerStep = 0x03;
            USBFingerTemplate_direct();
        }
        else
            FingerTemplate(fingerchangkai);
#endif
            break;
        }
        default:break;
    }
    soundType = 0x00;
}
//gate--------------------------------------------------------------------------------------
void Form::GateInit()
{
    bool ok;

    feedBack = new FeedBack(this);
    connect(feedBack,SIGNAL(TicketDebug(QString)),this,SLOT(TicketDebug(QString)));
    feedBack->start();

    P05_GateMode = qs->value("P05_GateMode",1).toInt(&ok);
    P06_GateType = qs->value("P06_GateType",1).toInt(&ok);
    P07_GateComType = qs->value("P07_GateComType",1).toInt(&ok);

    fileGpio = new FileGpio(this);
    connect(fileGpio,SIGNAL(TicketDebug(QString)),this,SLOT(TicketDebug(QString)));
    fileGpio->init();

    switch(P06_GateType)
    {
        case 0x01:
        {
            switch(P05_GateMode)
            {
                case 0x00:break;
                case 0x01:DoorControl(opendoor, door1);break;
                case 0x02:
                case 0x03:DoorControl(opendoor, door2);break;
                case 0x04:DoorControl(closedoor, doortwo);break;
                default:break;
            }
            break;
        }
        case 0x02:
        case 0x03:
        {
            swingGate = new SwingGate(this);
            connect(swingGate,SIGNAL(TicketDebug(QString)),this,SLOT(TicketDebug(QString)));
            swingGate->start();

            switch(P05_GateMode)
            {
//                case 0x00:SwingGateSetType(0xa1);break;//普通模式
//                case 0x01:SwingGateSetType(0xa2);break;//快速模式
//                case 0x02:SwingGateSetType(0xa1);break;//普通模式
//                case 0x03:SwingGateSetType(0xa4);break;//反向模式
//                case 0x04:SwingGateSetType(0xa3);break;//暂停模式
                default:break;
            }
            break;
        }
        default:
        {
            break;
        }
    }

    UiPeripheralState(gate, init);
}
void Form::SwingGateSetper(quint16 per,bool f)
{
    TicketDebug(QString("send swingGate per:%1").arg(per));
    if(P07_GateComType == 3)//canswingGate
    {
        UserEvent *ue = new UserEvent(CR::CanSwingGate,this);
        ue->num = per;
        if(P05_GateMode == 0x03)//有闸无闸应用模式：3、有闸反向模式
            ue->flag = 0;
        else
            ue->flag = 1;
        qApp->postEvent(canBusThread,ue);
    }
    else
    {
        UserEvent *ue = new UserEvent(CR::SwingGate,this);
        ue->num = per;
        ue->flag = f;
        qApp->postEvent(swingGate,ue);
    }
}
void Form::SwingGateBack(QByteArray d)
{
    quint16 per;

    if(((quint8)d.data()[0] == 0xfc)&&((quint8)d.data()[2] == 0xa5))
    {
        if((quint8)d.data()[3])
            UiPeripheralState(gate, linkok);
        else
            UiPeripheralState(gate, linkerr);
        return;
    }

    TicketDebug("swing gate receive :"+BgComm::ByteArrayToString(d, 16, true));

    if(((quint8)d.data()[0] == 0xfc)&&((quint8)d.data()[1] == 0x05)&&((quint8)d.data()[2] == 0xcc)&&((quint8)d.data()[3] == 0x01))
    {
        TicketDebug("swing gate warning");
        PlayWav(109,800);
    }
    else if(((quint8)d.data()[0] == 0xfc)&&((quint8)d.data()[1] == 0x05)&&((quint8)d.data()[2] == 0xc6))
    {
        if((perAddFlag == 0)&&(passPerNum == 0))
        {
            TicketDebug("swingGate peradd err!!!");
            return;
        }

        perAddFlag = 0;
        per = ((quint8)d.data()[3])*256 + (quint8)d.data()[4];
        passPerNum = per;

        if(P05_GateMode==0x03)
        {
            if(passPerNum > 0)
                DoorControl(opendoor, door1);
            else
                DoorControl(closedoor, door1);
        }
        else
        {
            if(passPerNum > 0)
                DoorControl(opendoor, doortwo);
            else
                DoorControl(closedoor, doortwo);
        }

        if(passPerNum)
        {
            if(P20_CheckTicketMode)//只要是特殊模式，不管插不插票都有上传功能
            {
                passtimer->start(P29_ShowTime*1000);
            }
            else
            {
                passtimer->stop();
            }
        }
        else
        {
            passtimer->stop();
        }
        UiChange(standby);//防止发送给机芯板，机芯响应慢，导致界面返回到待机界面

        UiPassPerNumUpdate(passPerNum);
        TicketDebug(QString("send PassPer :%1").arg(passPerNum));
        if(passPerNumOld != passPerNum)
        {
            passPerNumOld = passPerNum;
            HsSaveTicketNum(1,1);
        }
        HsSavePassNum(passPerNum, 1);
#if TICKETSOUND
            if(passPerNum)
            {
                PlayWav(229,800);
                hundred = passPerNum/100;
                decade = passPerNum%100/10;
                unit = passPerNum%10;

                if(hundred)
                {
                    PlayWav(218+hundred,800);
                    if(decade)
                    {
                        PlayWav(209+decade,800);
                        if(unit)
                        {
                            PlayWav(200+unit,800);
                            PlayWav(228,800);
                        }
                        else
                        {
                            PlayWav(228,800);
                        }
                    }
                    else
                    {
                        if(unit)
                        {
                            PlayWav(200+decade,800);
                            PlayWav(200+unit,800);
                            PlayWav(228,800);
                        }
                        else
                        {
                           PlayWav(228,800);
                        }
                    }
                }
                else if(decade)
                {
                    PlayWav(209+decade,800);
                    if(unit)
                    {
                        PlayWav(200+unit,800);
                        PlayWav(228,800);
                    }
                    else
                    {
                        PlayWav(228,800);
                    }
                }
                else if(unit)
                {
                    PlayWav(200+unit,800);
                    PlayWav(228,800);
                }
            }
#endif
    }
    else if(((quint8)d.data()[0] == 0xfc)&&((quint8)d.data()[1] == 0x05)&&((quint8)d.data()[2] == 0xc8))
    {
        per = d.data()[3]*256 + d.data()[4];
        HsSaveTicketNum(per,2);
    }
    else if(((quint8)d.data()[0] == 0xfc)&&((quint8)d.data()[1] == 0x05)&&((quint8)d.data()[2] == 0xe1))
    {
        //PCM发送:    0xfc  0x05	0xe1	 para1   para2     CheckSum
        swingGatePer = d.data()[3]*256 + d.data()[4];
        //UiTicketstatusDisplay(reversepassage);
        //prepare_ipdata_SwingGatePer(swingGatePer);
    }
    else if(((quint8)d.data()[0] == 0xfc)&&((quint8)d.data()[1] == 0x05)&&((quint8)d.data()[2] == 0xd8))
    {
        QByteArray sendbuf;
        QByteArray time;
        quint8 verify = 0;
        //上位机反馈: 0xfb  0x05	0xd8	 para1   para2	 CheckSum
        sendbuf[0] = 0xfb;
        verify += sendbuf[0];
        sendbuf[1] = 0x05;
        verify += sendbuf[1];
        sendbuf[2] = 0xd8;
        verify += sendbuf[2];
        sendbuf[3] = 0x20;
        verify += sendbuf[3];
        time = BgComm::StringToByteArray(QDateTime::currentDateTime().toString("s m h d M yy"), 16, QChar(' '));
        sendbuf[4] = time.data()[5];
        verify += sendbuf[4];
        sendbuf[5] = verify&0x7f;

        if(P07_GateComType == 3)//canSwingGateBuf
        {
            UserEvent *ue = new UserEvent(CR::CanSwingGateBuf,this);
            ue->byteArray = sendbuf;
            qApp->postEvent(canBusThread,ue);
        }
        else
        {
            UserEvent *ue = new UserEvent(CR::SwingGateBuf,this);
            ue->byteArray = sendbuf;
            qApp->postEvent(swingGate,ue);
        }
    }
    else if(((quint8)d.data()[0] == 0xfc)&&((quint8)d.data()[1] == 0x05)&&((quint8)d.data()[2] == 0xd9))
    {
        QByteArray sendbuf;
        QByteArray time;
        quint8 verify = 0;
        time = BgComm::StringToByteArray(QDateTime::currentDateTime().toString("s m h d M yy"), 16, QChar(' '));

        //上位机反馈: 0xfb  0x05	0xd8	 para1   para2	 CheckSum
        sendbuf[0] = 0xfb;
        verify += sendbuf[0];
        sendbuf[1] = 0x05;
        verify += sendbuf[1];
        sendbuf[2] = 0xd9;
        verify += sendbuf[2];
        sendbuf[3] = time.data()[4];
        verify += sendbuf[3];
        sendbuf[4] = time.data()[3];
        verify += sendbuf[4];
        sendbuf[5] = verify&0x7f;

        if(P07_GateComType == 3)//canSwingGateBuf
        {
            UserEvent *ue = new UserEvent(CR::CanSwingGateBuf,this);
            ue->byteArray = sendbuf;
            qApp->postEvent(canBusThread,ue);
        }
        else
        {
            UserEvent *ue = new UserEvent(CR::SwingGateBuf,this);
            ue->byteArray = sendbuf;
            qApp->postEvent(swingGate,ue);
        }
    }
    else if(((quint8)d.data()[0] == 0xfc)&&((quint8)d.data()[1] == 0x05)&&((quint8)d.data()[2] == 0xda))
    {
        QByteArray sendbuf;
        QByteArray time;
        quint8 verify = 0;
        time = BgComm::StringToByteArray(QDateTime::currentDateTime().toString("s m h d M yy"), 16, QChar(' '));

        //上位机反馈: 0xfb  0x05	0xd8	 para1   para2	 CheckSum
        sendbuf[0] = 0xfb;
        verify += sendbuf[0];
        sendbuf[1] = 0x05;
        verify += sendbuf[1];
        sendbuf[2] = 0xda;
        verify += sendbuf[2];
        sendbuf[3] = time.data()[2];
        verify += sendbuf[3];
        sendbuf[4] = time.data()[1];
        verify += sendbuf[4];
        sendbuf[5] = verify&0x7f;

        if(P07_GateComType == 3)//canSwingGateBuf
        {
            UserEvent *ue = new UserEvent(CR::CanSwingGateBuf,this);
            ue->byteArray = sendbuf;
            qApp->postEvent(canBusThread,ue);
        }
        else
        {
            UserEvent *ue = new UserEvent(CR::SwingGateBuf,this);
            ue->byteArray = sendbuf;
            qApp->postEvent(swingGate,ue);
        }
    }
    else if(((quint8)d.data()[0] == 0xfc)&&((quint8)d.data()[1] == 0x05)&&((quint8)d.data()[2] == 0xe2))
    {      
        HsSaveTicketNum(1,2);
        QByteArray sendbuf;
        quint8 verify = 0;

        sendbuf[0] = 0xfb;
        verify += sendbuf[0];
        sendbuf[1] = 0x05;
        verify += sendbuf[1];
        sendbuf[2] = 0xe2;
        verify += sendbuf[2];
        sendbuf[3] = 0x00;
        verify += sendbuf[3];
        sendbuf[4] = 0x00;
        verify += sendbuf[4];
        sendbuf[5] = verify&0x7f;

        if(P07_GateComType == 3)//canSwingGateBuf
        {
            UserEvent *ue = new UserEvent(CR::CanSwingGateBuf,this);
            ue->byteArray = sendbuf;
            qApp->postEvent(canBusThread,ue);
        }
        else
        {
            UserEvent *ue = new UserEvent(CR::SwingGateBuf,this);
            ue->byteArray = sendbuf;
            qApp->postEvent(swingGate,ue);
        }
    }
    else if(((quint8)d.data()[0] == 0xfc)&&((quint8)d.data()[1] == 0x05)&&((quint8)d.data()[2] == 0xbb))//反向过人
    {
        HsSaveTicketNum(1,2);
    }
}
void Form::SwingGateSetType(quint8 type)
{
    if(P07_GateComType == 3)//canswingGate
    {
        UserEvent *ue = new UserEvent(CR::CanSwingGateType,this);
        ue->type = type;
        qApp->postEvent(canBusThread,ue);
    }
    else
    {
        UserEvent *ue = new UserEvent(CR::SwingGateType,this);
        //ue->num = per;
        ue->type = type;
        qApp->postEvent(swingGate,ue);
    }
}
void Form::prepare_ipdata_SwingGatePer(quint16 swingGatePer, PRdirection prd)
{
    QByteArray ipdata;
#if PROTOCOLVER == NEWPROTOCOL
    ipdata = PackTLVEntity(SCN, P22_PartNoGuid);//景点号
    ipdata += PackTLVEntity(CHAN, IntToByte(P23_GateNo));//通道号
    ipdata += PackTLVEntity(TNUM, IntToByte(swingGatePer));//检票人数
#else
    ipdata[0] = P22_PartNo;
    ipdata[1] = P23_GateNo;
    ipdata[2] = swingGatePer/256;
    ipdata[3] = swingGatePer%256;
    ipdata += ticketExtend;
#endif
    if(prd == reverse)
        TcpSendCmd(0x10,0x01,ipdata);
    else
        TcpSendCmd(0x10,0x02,ipdata);
}
void Form::DoorControl(DoorCtrl dc, WhichDoor wd)
{
    switch(dc)
    {
        case opendoor:
        {
            switch(wd)
            {
                case door1:fileGpio->ctrl(OPEN_DOOR1,1);break;
                case door2:fileGpio->ctrl(OPEN_DOOR2,1);break;
                case doortwo:fileGpio->ctrl(OPEN_DOOR1,1);fileGpio->ctrl(OPEN_DOOR2,1);break;
                default:break;
            }
            break;
        }
        case closedoor:
        {
            switch(wd)
            {
                case door1:fileGpio->ctrl(OPEN_DOOR1,0);break;
                case door2:fileGpio->ctrl(OPEN_DOOR2,0);break;
                case doortwo:fileGpio->ctrl(OPEN_DOOR1,0);fileGpio->ctrl(OPEN_DOOR2,0);break;
                default:break;
            }
            break;
        }
    }
}
//ui----------------------------------------------------------------------------------------
void Form::GateLableInit()
{
    if(ipDisFlag == 0)
    {
        return;
    }

    if((!systemStartFlag) && tcpConnectFlag)
    {
        systemStartFlag = 1;
        UiChange(standby);
    }

    if(tcpConnectFlag)
    {
        if(0 == checkTicketState)
        {

            UiTicketstatusDisplay(checkticket);
        }
        else
        {
            TicketDebug("ticketLabel : zhengzaigengxinshuju");
        }

        switch(P05_GateMode)
        {
            //case 0x00:UiTicketstatusDisplay(checkticket);break;
            case 0x01:UiTicketstatusDisplay(positivepassage);break;
            case 0x02:UiTicketstatusDisplay(reversepassage);break;
            case 0x03:UiTicketstatusDisplay(reversepassage);break;
            case 0x04:UiTicketstatusDisplay(suspendmode);break;
            default:break;
        }
    }
    else
    {
        if(!netLinkState)
//            UiTicketstatusDisplay(checknetwork);
//        else
            UiTicketstatusDisplay(networkblocked);
    }
}

//led----------------------------------------------------
void Form::LedInit()
{
#if HARDWAREVER != SDE_GA503_1_0
    ledDis = new LedDis(this);
    connect(ledDis,SIGNAL(TicketDebug(QString)),this,SLOT(TicketDebug(QString)));
    LedDisplay(0x00,0x1e,0x01,passPerNum);
#endif
}
void Form::LedDisplay(quint8 ledCmd,quint8 length,quint8 identify, quint16 perNum)
{
#if 0
    ledDis = new LedDis(this);
    QByteArray sendbuf;
    QByteArray ledticketExtend;
    for(int i=0;i<16;i++)
        ledticketExtend[i] = 0;
    sendbuf[0] = 0x3c;
    sendbuf[1] = ledCmd;
    sendbuf[2] = length;
    sendbuf[3] = identify;
    sendbuf += ledticketExtend;
    sendbuf += BgComm::StringToByteArray(QDateTime::currentDateTime().toString("yy yy MM dd hh mm ss"), 16, QChar(' '));

    sendbuf[sendbuf.length()] = perNum/256;
    sendbuf[sendbuf.length()] = perNum%256;
    sendbuf += ledticketExtend.mid(0,3);
    sendbuf += BgComm::XORVerify(sendbuf.mid(1, sendbuf.length()-1));//加校验位的
    sendbuf[sendbuf.length()] = 0x3e;

    ledDis->Dis(sendbuf);
//#else
   QByteArray sendbuf;
   QByteArray ledticketExtend;
   for(int i=0; i<16; i++)
       ledticketExtend[i] = 0;
   if(ledCmd == 0x00)
   {
       sendbuf[0] = 0x3c;
       sendbuf[1] = ledCmd;
       sendbuf[2] = 0x00;
       sendbuf[3] = 0x00;
       sendbuf[4] = 0x3e;
#if HARDWAREVER != SDE_GA503_1_0
       ledDis->Dis(sendbuf);
#endif
       return;
   }
   else if(ledCmd == 0xd0)
   {
       sendbuf[0] = 0x3c;
       sendbuf[1] = ledCmd;
       sendbuf[2] = 0x00;
       sendbuf[3] = 0xd0;
       sendbuf[4] = 0x3e;
#if HARDWAREVER != SDE_GA503_1_0
       ledDis->Dis(sendbuf);
#endif

       return;
   }
   sendbuf[0] = 0x3c;
   sendbuf[1] = ledCmd;
   sendbuf[2] = length;
   sendbuf[3] = identify;
   sendbuf[4] = identify;
   sendbuf += ledticketExtend;
   sendbuf += ledticketExtend.mid(0,7);
   //sendbuf += BgComm::StringToByteArray(QDateTime::currentDateTime().toString("yy yy MM dd hh mm ss"), 16, QChar(' '));
   switch(ledCmd)
   {
       /*case 0xd1:
       case 0xd2:
       case 0xd3:
       case 0xd4:
       case 0xd5:
       case 0xf2:
       {
           sendbuf[sendbuf.length()]=perNum/256;
           sendbuf[sendbuf.length()]=perNum%256;
           break;
       }*/
       case 0xde:
       case 0xdf:
       {
           sendbuf[3] = 0x00;
           sendbuf[4] = 0x00;
           sendbuf[sendbuf.length()] = 0x00;
           sendbuf[sendbuf.length()] = 0x00;
           break;
       }
       default:
       {
           sendbuf[sendbuf.length()] = perNum/256;
           sendbuf[sendbuf.length()] = perNum%256;
           break;
       }
   }

   sendbuf += ledticketExtend.mid(0,3);
   sendbuf += BgComm::XORVerify(sendbuf.mid(1, sendbuf.length()-1));//加校验位的
   sendbuf[sendbuf.length()] = 0x3e;
#if HARDWAREVER != SDE_GA503_1_0
   ledDis->Dis(sendbuf);
#endif

#endif
}
//ticket-------------------------------------------------------------------------------------
void Form::TicketInit()
{
    swingGatePer = 0;
    checkTicketState = 0;
    passPerNum = 0;
    passPerNumOld = 0;
    ticketPerNum = 0;

    picApplyingMode = 0;
    idApplyingMode = 0;
    ticketGetIdNumFlag = 0;
    ticketAuthorizeFlag = 0;
    ticketAuthorizeType = 0x00;
    shengYuCiShu = 0;
    ticketTflag = 0;
    passtimeroutflag = 0;
    perAddFlag = 0;


#if HARDWAREVER != SDE_GA502_1_3 && HARDWAREVER != SDE_GA503_1_0
//    sdReboot = new SDReboot(this);
//    connect(sdReboot,SIGNAL(TicketDebug(QString)),this,SLOT(TicketDebug(QString)));
//    sdReboot->start();

    ledState = new LedState(this);
    connect(ledState,SIGNAL(TicketDebug(QString)),this,SLOT(TicketDebug(QString)));
    ledState->start();
#endif

    bool ok;
    P20_CheckTicketMode = qs->value("P20_CheckTicketMode",1).toInt(&ok);
    if(!ok)
    {
        P20_CheckTicketMode = 1;
    }
    P21_GroupInsertEnable = qs->value("P21_GroupInsertEnable",1).toInt(&ok);
    if(!ok)
    {
        P21_GroupInsertEnable = 1;
    }

    QString str;
    str = qs->value("P22_PartNoGuid","313233343536").toString();
    if(str.length() == 0)
    {
        str = "313233343536";
    }
    str.replace(QString("-"), QString(""));
    str = BgComm::FormatString(str, 2, QChar(' '));
    P22_PartNoGuid = BgComm::StringToByteArray(str, 16, QChar(' '));

    P22_PartNo = qs->value("P22_PartNo",1).toInt(&ok);
    if(!ok)
    {
        P22_PartNo = 1;
    }
    P23_GateNo = qs->value("P23_GateNo",1).toInt(&ok);
    if(!ok)
    {
        P23_GateNo = 1;
    }
    P24_CheckTicketType.resize(0);
    quint64 parameter;
    parameter = qs->value("P24_CheckTicketType",1).toInt(&ok);
    if(!ok)
    {
        parameter = 1;
    }
    P24_CheckTicketType[P24_CheckTicketType.length()] = (parameter>>16)&0x00FF;
    P24_CheckTicketType[P24_CheckTicketType.length()] = (parameter>>8)&0x0000FF;
    P24_CheckTicketType[P24_CheckTicketType.length()] = (parameter)&0x000000FF;
    P08_ClientNo.resize(0);
    parameter = qs->value("P08_ClientNo",1).toInt(&ok);
    if(!ok)
    {
        parameter = 1;
    }
    P08_ClientNo[P08_ClientNo.length()] = parameter>>8;
    P08_ClientNo[P08_ClientNo.length()] = parameter&0x00ff;

    P29_ShowTime = qs->value("P29_ShowTime",30).toInt(&ok);
    if(!ok)
    {
        P29_ShowTime = 30;
    }

    P2b_CheckTicketGapTime = qs->value("P2b_CheckTicketGapTime",20).toInt(&ok);
    if(!ok)
    {
        P2b_CheckTicketGapTime = 20;
    }

    standbyTime = 5000;//定值5s

    ticketExtend.resize(16);
    ticketExtend.fill(0);

    ticketTimer = new QTimer(this);
    connect(ticketTimer,SIGNAL(timeout()),this,SLOT(TicketTimerOut()));

    gateTimer = new QTimer(this);
    connect(gateTimer,SIGNAL(timeout()),this,SLOT(GateTimerOut()));

    ipDisTimer = new QTimer(this);
    connect(ipDisTimer,SIGNAL(timeout()),this,SLOT(IPdisTimerOut()));

    passtimer = new QTimer(this);
    connect(passtimer,SIGNAL(timeout()),this,SLOT(PASSTimerOut()));
}
void Form::TicketFlagValue(bool f)
{

    if(f)
    {
        gateTimer->stop();//防止误显示“正在更新数据”
        checkTicketState = 1;
        TicketDebug("check ticket begin");
#if FACEMODE
        ticketTimer->start(14000);
#else
        ticketTimer->start(10000);
#endif
        ticketSoundAddr = 0;
        ticketExtend.fill(0,16);
        peridmatchflag = 0;
        if(P05_GateMode == 0x05)//无闸
        {
            passPerNum = 0;
            HsSavePassNum(0,0);
        }
    }
    else
    {
        TicketDebug("check ticket over");
        ticketAuthorizeType = 0x00;
        ticketGetIdNumFlag = 0;
        ticketAuthorizeFlag = 0;
        ticketTimer->stop();
        checkTicketState = 0;
    }
}
void Form::TicketTimerRe()
{
    checkTicketState = 1;
    ticketTimer->stop();
    checkTicketState = 1;
#if FACEMODE
        ticketTimer->start(14000);
#else
        ticketTimer->start(10000);
#endif
    checkTicketState = 1;
    TicketDebug("check ticket timer restart");
}
void Form::TicketVerdictDisplay(quint8 v)
{
    switch(v)
    {
        case 0x00:
        {
            #if PROTOCOLVER == NEWPROTOCOL
            UiTicketTimeDisplay(GetTLVEntityValue(BTT),ttUnused);
            #endif
            ticketStateStr = "有效票(00)";
            break;
        }
        case 0x01:
        {
            #if PROTOCOLVER == NEWPROTOCOL
            UiTicketTimeDisplay(GetTLVEntityValue(UST),ttUsed);
            #else
            ui->label_tickettimefield->setText(tr("使用时间"));
            #endif
            UiTicketstatusDisplay(alreadyuse);
            ticketStateStr = "已使用(01)";
            break;
        }
        case 0x02:
        {
            #if PROTOCOLVER == NEWPROTOCOL
            UiTicketTimeDisplay(GetTLVEntityValue(UST),ttNowtime);
            #else
            ui->label_tickettimefield->setText(tr("时间"));
            #endif
            if((ticketStyle==0x03)||(ticketStyle==0xb1))
            {
                UiTicketstatusDisplay(invalidcard);
                ticketStateStr = "无效卡(02)";
            }
            else
            {
                UiTicketstatusDisplay(invalidticket);
                ticketStateStr = "无效票(02)";
            }
            break;
        }
        case 0x03:
        {
            #if PROTOCOLVER == NEWPROTOCOL
            UiTicketTimeDisplay(GetTLVEntityValue(EXPD),ttExpired);
            #else
            ui->label_tickettimefield->setText(tr("失效期"));
            #endif
            UiTicketstatusDisplay(expired);
            ticketStateStr = "已过期(03)";
            break;
        }
        case 0x04:
        {
            #if PROTOCOLVER == NEWPROTOCOL
            UiTicketTimeDisplay(GetTLVEntityValue(ACTD),ttNotactive);
            #else
            ui->label_tickettimefield->setText(tr("生效期"));
            #endif
            UiTicketstatusDisplay(noteffective);
            ticketStateStr = "未生效(04)";
            break;
        }
        case 0x05:
        {
            #if PROTOCOLVER == NEWPROTOCOL
            UiTicketTimeDisplay(GetTLVEntityValue(UST),ttNowtime);
            #else
            ui->label_tickettimefield->setText(tr("时间"));
            #endif
            UiTicketstatusDisplay(insufficientbalance);
            ticketStateStr = "余额不足(05)";
            break;
        }
        case 0x06:
        {
            #if PROTOCOLVER == NEWPROTOCOL
            UiTicketTimeDisplay(GetTLVEntityValue(UST),ttNowtime);
            #else
            ui->label_tickettimefield->setText(tr("时间"));
            #endif
            UiTicketstatusDisplay(blacklist);
            ticketStateStr = "黑名单(06)";
            break;
        }
        case 0x07:
        {
            #if PROTOCOLVER == NEWPROTOCOL
            UiTicketTimeDisplay(GetTLVEntityValue(RT),ttRefunded);
            #else
            ui->label_tickettimefield->setText(tr("退票时间"));
            #endif
            UiTicketstatusDisplay(refundticket);
            ticketStateStr = "已退票(07)";
            break;
        }
        case 0x08:
        {
            #if PROTOCOLVER == NEWPROTOCOL
            UiTicketTimeDisplay(GetTLVEntityValue(CTT),ttChangedticket);
            #else
            ui->label_tickettimefield->setText(tr("换票时间"));
            #endif
            UiTicketstatusDisplay(changedticket);
            ticketStateStr = "已换票(08)";
            break;
        }
        case 0x09:
        {
            #if PROTOCOLVER == NEWPROTOCOL
            UiTicketTimeDisplay(GetTLVEntityValue(RLT),ttReportedloss);
            #else
            ui->label_tickettimefield->setText(tr("挂失时间"));
            #endif
            UiTicketstatusDisplay(reportedloss);
            ticketStateStr = "已挂失(09)";
            break;
        }
        case 0x0a:
        {
            #if PROTOCOLVER == NEWPROTOCOL
            UiTicketTimeDisplay(GetTLVEntityValue(UST),ttNowtime);
            #else
            ui->label_tickettimefield->setText(tr("时间"));
            #endif
            UiTicketstatusDisplay(notimes);
            ticketStateStr = "次数已用完(0a)";
            break;
        }
        default:
        {
            #if PROTOCOLVER == NEWPROTOCOL
            UiTicketTimeDisplay(GetTLVEntityValue(UST),ttNowtime);
            #else
            ui->label_tickettimefield->setText(tr("时间"));
            #endif
            if((ticketStyle==0x03)||(ticketStyle==0xb1))
            {
                UiTicketstatusDisplay(invalidcard);
                ticketStateStr = QString("无效卡(%1)").arg(v);
            }
            else
            {
                UiTicketstatusDisplay(invalidticket);
                ticketStateStr = QString("无效票(%1)").arg(v);
            }
            break;
        }
    }
    if(v)
    {
        if(((ticketStyle==0x03)||(ticketStyle==0xb1)) && (P71_RfidDevType==0x05))
        {
            UserEvent *ue = new UserEvent(CR::RFIDIN,this);
            ue->type = 0x01;
            qApp->postEvent(rfidThread,ue);
        }
        UiPicDisplay(checkerr);
    }
}
void Form::GateTimerOut()
{
    gateTimer->stop();
    GateLableInit();
}
void Form::IPdisTimerOut()
{
    if(tcpConnectFlag)
    {
        systemStartFlag = 1;
        UiChange(standby);

        switch(P05_GateMode)
        {
            case 0x00:UiTicketstatusDisplay(checkticket);break;
            case 0x01:UiTicketstatusDisplay(positivepassage);break;
            case 0x02:UiTicketstatusDisplay(reversepassage);break;
            case 0x03:UiTicketstatusDisplay(reversepassage);break;
            case 0x04:UiTicketstatusDisplay(suspendmode);break;
            default:break;
        }
    }
    else
    {
        if(!netLinkState)
//            UiTicketstatusDisplay(checknetwork);
//        else
            UiTicketstatusDisplay(networkblocked);
    }
    ipDisFlag = 1;
    ipDisTimer->stop();
}
void Form::TicketTimerOut()
{
    if((FaceInNum > 0 && picApplyingMode == 0x03)||(FaceMatchNum > 0 && picApplyingMode == 0x04))
        FaceProcess();//处理人脸
    if(ticketAuthorizeFlag == 1)
    {
        UiTicketstatusDisplay(authorizationfailure);
        ticketAuthorizeFlag = 0;
        UiPicDisplay(checkerr);
    }
    if(ticketGetIdNumFlag == 1)
    {
        UiTicketstatusDisplay(idmatchfailure);
        ticketGetIdNumFlag = 0;
        UiPicDisplay(checkerr);
    }
    TicketFlagValue(0);
    tcpReadBackFlag = 1;
}
void Form::PASSTimerOut()
{
    passtimer->stop();
    if(ticketTflag && ticketStyle == 0x02 && barCodeData.data()[0] == 'E')
    {
        ticketTflag = 0;
        if(passPerNum)
        {
            passtimeroutflag = 1;
            prepare_ipdata_barconfirm_groupinsert();
        }
    }
}
void Form::PerBack()
{
#if SNR_ENABLE
    if(userTimeOutType < 0x09)
    {
        UiTicketstatusDisplay(errtype);
        DoorControl(closedoor, doortwo);
        return;
    }
#endif

    if(P05_GateMode == 0x01)
    {
        HsSaveTicketNum(1,3);
    }
    else if((P05_GateMode == 0x03) || (P05_GateMode == 0x02 && passPerNum == 0))
    {
        HsSaveTicketNum(1,2);
    }
    else
    {
        TicketPerDisplay(1,0);
        HsSaveTicketNum(1,1);

        FaceProcess();//过人触发人脸
    }
}
void Form::TicketPerDisplay(quint16 per, bool add)
{
    if(add)
    {
        perAddFlag = 1;
        if((P06_GateType == 0x02) || (P06_GateType == 0x03))
            SwingGateSetper(per);
        passPerNum += per;
        UiTicketPerNumUpdate(ticketPerNum);
        passPerNumOld = passPerNum;

        if(P05_GateMode == 0x05)//无闸
            HsSaveTicketNum(per,1);

    }
    else
    {
        perAddFlag = 0;
        if(passPerNum >= per)
            passPerNum -= per;
        else
            passPerNum = 0;
        LedDisplay(0xd2,0x1e,0x01,passPerNum);
        UiPassPerNumUpdate(passPerNum);
#if TICKETSOUND
            if(passPerNum%5 == 0 && passPerNum > 0)//防止语音重复
            {
                PlayWav(229,800);
                hundred = passPerNum/100;
                decade = passPerNum%100/10;
                unit = passPerNum%10;

                if(hundred)
                {
                    PlayWav(218+hundred,800);
                    if(decade)
                    {
                        PlayWav(209+decade,800);
                        if(unit)
                        {
                            PlayWav(200+unit,800);
                            PlayWav(228,800);
                        }
                        else
                        {
                            PlayWav(228,800);
                        }
                    }
                    else
                    {
                        if(unit)
                        {
                            PlayWav(200+decade,800);
                            PlayWav(200+unit,800);
                            PlayWav(228,800);
                        }
                        else
                        {
                           PlayWav(228,800);
                        }
                    }
                }
                else if(decade)
                {
                    PlayWav(209+decade,800);
                    if(unit)
                    {
                        PlayWav(200+unit,800);
                        PlayWav(228,800);
                    }
                    else
                    {
                        PlayWav(228,800);
                    }
                }
                else if(unit)
                {
                    PlayWav(200+unit,800);
                    PlayWav(228,800);
                }
            }
#endif
    }
    if(P05_GateMode==0x03)
    {
        if(passPerNum > 0)
            DoorControl(opendoor, door1);
        else
            DoorControl(closedoor, door1);
    }
    else
    {
        if(passPerNum > 0)
            DoorControl(opendoor, doortwo);
        else
            DoorControl(closedoor, doortwo);
    }

    TicketDebug(QString("ticketPer :%1,passPer:%2").arg(ticketPerNum).arg(passPerNum));

    if(passPerNum)
    {
        if(P20_CheckTicketMode)//只要是特殊模式，不管插不插票都有上传功能
        {
            passtimer->start(P29_ShowTime*1000);
        }
        else
        {
            passtimer->stop();
        }
    }
    else
    {
        passtimer->stop();
        UiChange(standby);
    }
    HsSavePassNum(passPerNum, 1);
}
//finger-------------------------------------------------------------------------------------
void Form::FingerInit()
{
    bool ok;
    if(qs->value("Pb0_FingerEnable",1).toInt(&ok) == 0)
    {
        fingerEnableFlag = false;
        UiPeripheralState(finger, notuse);
        return;
    }
    UiPeripheralState(finger, init);
    fingerEnableFlag = true;
    Pb1_FingerDevType = qs->value("Pb1_FingerDevType",1).toInt(&ok);
    switch(Pb1_FingerDevType)
    {
        case 0x00:
        {
            serialFinger = new SerialFinger(this);
            connect(serialFinger,SIGNAL(TicketDebug(QString)),this,SLOT(TicketDebug(QString)));
            break;
        }
        case 0x01:
        {
            usbFinger = new UsbFinger(this);
            connect(usbFinger,SIGNAL(TicketDebug(QString)),this,SLOT(TicketDebug(QString)));
            break;
        }
        default:
        {
            serialFinger = new SerialFinger(this);
            connect(serialFinger,SIGNAL(TicketDebug(QString)),this,SLOT(TicketDebug(QString)));
            break;
        }
    }

    Pb2_FingerInTimes = qs->value("Pb2_FingerInTimes",1).toInt(&ok);
    Pb3_FingerInTime = qs->value("Pb3_FingerInTime",1).toInt(&ok);
    Pb5_FingerMatchTime = qs->value("Pb5_FingerMatchTime",1).toInt(&ok);

    fingerStartTimer = new QTimer(this);
    connect(fingerStartTimer,SIGNAL(timeout()),this,SLOT(fingerStartTimerOut()));

    fingerApplyingMode = 0;
    FingerInNum = 0;
    FingerMatchNum = 0;
    fingerStep = 0x00; 
}
void Form::FingerFeature(quint8 cmd)
{
    if(!fingerEnableFlag)
    {
        UiTicketstatusDisplay(fingerprintnotenabled);
        return;
    }
    UiPicDisplay(fingercheck);

    if(Pb2_FingerInTimes == 1)
    {
        FingerTemplate(fingerluru);
        return;
    }

    fingetGetFeatureCmd = cmd;
    UserEvent *ue = new UserEvent(CR::FingerFeature,this);
    ue->times = fingetGetFeatureCmd;
    qApp->postEvent(serialFinger,ue);
}
void Form::FingerTemplate(Fingerstatus fs)
{
    if(!fingerEnableFlag)
    {
        UiTicketstatusDisplay(fingerprintnotenabled);
        return;
    }

    if(fs == fingerchangkai)
    {
        fingerStep = 0x03;

        if(!tcpConnectFlag)
        {
            fingerStartTimer->stop();
            return;
        }
        fingerStartTimer->start(20000);
    }
    UserEvent *ue = new UserEvent(CR::FingerTemplate,this);
    switch(fs)
    {
        case fingerluru:
        case fingerchangkai:
            ue->times = 1;
            break;
        case fingerbidui:
        default:
            UiPicDisplay(fingercheck);
            ue->times = fingerApplyingMode -1;
            break;
    }
    qApp->postEvent(serialFinger,ue);
}
void Form::FingerFeatureBack(bool flag)
{
    if(flag == 0)
    {
        UiTicketstatusDisplay(recordedtimeout);
    }
    else
    {
        if(fingetGetFeatureCmd == 0)
            UiTicketstatusDisplay(inputfingerprintagain);
        else
            FingerTemplate(fingerbidui);
    }
}
void Form::FingerTemplateBack(bool flag,QByteArray fdata)
{
    if(flag == 0)
    {
#if FINGEROPENMODE
        if(fingerStep==0x01)//检票指纹录入或验证，且还没有录入或验证
        {
            fingerStep = 0x02;
            if(fingerApplyingMode == 0x01)
            {
                FingerFeature(0);
            }
            else if(fingerApplyingMode == 0x02)
            {
                FingerTemplate(fingerbidui);
            }
        }
        else if(fingerStep==0x02)//检票指纹录入或验证，且已经录入或验证，并开始发送到后台
        {
            fingerStep = 0x00;
            if(fingerApplyingMode == 0x01)
            {
                if(Pb2_FingerInTimes == 1)
                    UiTicketstatusDisplay(recordedtimeout);
                else
                    UiTicketstatusDisplay(recordedfailure);
            }
            else
            {
                UiTicketstatusDisplay(matchtimeout);
            }
        }
        else//平时没有检票，则一直打开指纹设备扫描
        {
            FingerTemplate(fingerchangkai);
        }
#else
        if(fingerApplyingMode == 0x01)
        {
            if(Pb2_FingerInTimes == 1)
                UiTicketstatusDisplay(recordedtimeout);
            else
                UiTicketstatusDisplay(recordedfailure);
        }
        else
        {
            UiTicketstatusDisplay(matchtimeout);
        }
#endif
    }
    else
    {
        fingerData = fdata;
#if FINGEROPENMODE
        if(fingerStep==0x01)//检票指纹录入或验证，且还没有录入或验证
        {
            fingerStep = 0x02;
            if(fingerApplyingMode == 0x01)
            {
                if(Pb2_FingerInTimes == 1)
                {
                    fingerStep = 0x00;
                    switch(ticketStyle)
                    {
                    case 0x02:
                    {
                        prepare_ipdata_barfingersend();
                        break;
                    }
                    case 0xb1:
                    case 0x03:
                    {
                        prepare_ipdata_icfingersend();
                        break;
                    }
                    case 0x04:
                    {
                        prepare_ipdata_idfingersend();
                        break;
                    }
                    default:
                    {
                        prepare_ipdata_barfingersend();
                        break;
                    }
                    }
                }
                else
                {
                    FingerFeature(0);
                }
            }
            else if(fingerApplyingMode == 0x02)//直接将指纹数据发送到后台
            {
                fingerStep = 0x00;
                switch(ticketStyle)
                {
                case 0x02:
                {
                    prepare_ipdata_barfingersend();
                    break;
                }
                case 0xb1:
                case 0x03:
                {
                    prepare_ipdata_icfingersend();
                    break;
                }
                case 0x04:
                {
                    prepare_ipdata_idfingersend();
                    break;
                }
                default:
                {
                    prepare_ipdata_barfingersend();
                    break;
                }
                }
            }
        }
        else if(fingerStep==0x02)//检票指纹录入或验证，且已经录入或验证，并开始发送到后台
        {
            fingerStep = 0x00;
            switch(ticketStyle)
            {
            case 0x02:
            {
                prepare_ipdata_barfingersend();
                break;
            }
            case 0xb1:
            case 0x03:
            {
                prepare_ipdata_icfingersend();
                break;
            }
            case 0x04:
            {
                prepare_ipdata_idfingersend();
                break;
            }
            default:
            {
                prepare_ipdata_barfingersend();
                break;
            }
            }
        }
        else//平时没有检票，则一直打开指纹设备扫描，并发送到后台
        {
            TicketFlagValue(1);
            prepare_ipdata_fingersend();
        }
#else
        switch(ticketStyle)
        {
        case 0x02:
        {
            prepare_ipdata_barfingersend();
            break;
        }
        case 0xb1:
        case 0x03:
        {
            prepare_ipdata_icfingersend();
            break;
        }
        case 0x04:
        {
            prepare_ipdata_idfingersend();
            break;
        }
        default:
        {
            prepare_ipdata_barfingersend();
            break;
        }
        }
#endif
    }
}

void Form::USBFingerFeature()
{
    if(!fingerEnableFlag)
    {
        UiTicketstatusDisplay(fingerprintnotenabled);
        return;
    }
    UiPicDisplay(fingercheck);

    UserEvent *ue = new UserEvent(CR::USBFingerFeature,this);
    //ue->times = fingerGetTimes;
    ue->times = fingerApplyingMode -1;
    qApp->postEvent(usbFinger,ue);

}
void Form::USBFingerTemplate()
{
    if(!fingerEnableFlag)
    {
        UiTicketstatusDisplay(fingerprintnotenabled);
        return;
    }
    UiPicDisplay(fingercheck);
    UserEvent *ue = new UserEvent(CR::USBFingerTemplate,this);
    ue->times = fingerApplyingMode -1;
    qApp->postEvent(usbFinger,ue);
}
void Form::USBFingerTemplate_direct()
{
    if(!fingerEnableFlag)
    {
        UiTicketstatusDisplay(fingerprintnotenabled);
        return;
    }
#if FINGEROPENMODE == 0
    UiPicDisplay(fingercheck);
#endif
    UserEvent *ue = new UserEvent(CR::USBFingerTemplate_direct,this);
    qApp->postEvent(usbFinger,ue);

}
void Form::USBFingerFeatureBack(bool flag)
{
    if(flag == 0)
    {
        UiTicketstatusDisplay(recordedtimeout);
    }
    else
    {
        //显示指纹图片
        UiPicDisplay(fingerdis);

        if(fingerGetTimes == 0)
            UiTicketstatusDisplay(inputfingerprintagain);
        else
        {
            USBFingerTemplate();
        }
    }
}
void Form::USBFingerTemplateBack(bool flag,QByteArray fdata)
{
    //qDebug()<<"flag:"<<flag<<"fingerStep:"<<fingerStep<<"fingerApplyingMode:"<<fingerApplyingMode;
    if(flag == 0)
    {
#if FINGEROPENMODE
        if(fingerStep==0x01)//检票指纹录入或验证，且还没有录入或验证
        {
            fingerStep = 0x02;
            if(fingerApplyingMode == 0x01)
            {
                //USBFingerFeature();
                if( Pb2_FingerInTimes == 1)
                    USBFingerTemplate_direct();
                else if(Pb2_FingerInTimes == 2)
                    USBFingerFeature();
            }
            else if(fingerApplyingMode == 0x02)
            {
                USBFingerTemplate_direct();
                //USBFingerTemplate();
            }
        }
        else if(fingerStep==0x02)//检票指纹录入或验证，且已经录入或验证，并开始发送到后台
        {
            fingerStep = 0x00;
            if(fingerApplyingMode == 0x01)
            {
                if(Pb2_FingerInTimes == 1)
                {
                    UiTicketstatusDisplay(recordedtimeout);
                }
                else
                {
                    //显示指纹图片 前后两次录入不匹配
                    UiPicDisplay(fingerdis);

                    UiTicketstatusDisplay(recordedfailure);
                }
            }
            else
            {
                UiTicketstatusDisplay(matchtimeout);
            }
        }
        else//平时没有检票，则一直打开指纹设备扫描
        {
            //USBFingerTemplate_direct();
            if(fingerStep == 0x02 && Pb2_FingerInTimes == 1)
                USBFingerTemplate_direct();
            else if(fingerStep == 0x01 && Pb2_FingerInTimes == 2)
                USBFingerFeature();
            else
                USBFingerTemplate_direct();
        }
#else
        if(fingerApplyingMode == 0x01)
        {
            if(Pb2_FingerInTimes == 1)
                UiTicketstatusDisplay(recordedtimeout);
            else
            {
                //显示指纹图片
                UiPicDisplay(fingerdis);
                UiTicketstatusDisplay(recordedfailure);
            }
        }
        else if(fingerApplyingMode == 0x02)
        {
            UiTicketstatusDisplay(matchtimeout);
        }
#endif
    }
    else
    {
        //显示指纹图片
        UiPicDisplay(fingerdis);

        fingerData = fdata;
#if FINGEROPENMODE
        if(fingerStep==0x01)//检票指纹录入或验证，且还没有录入或验证
        {
            fingerStep = 0x02;
            if(fingerApplyingMode == 0x01)
            {

                if(Pb2_FingerInTimes == 1)
                {
                    fingerStep = 0x00;
                    switch(ticketStyle)
                    {
                    case 0x02:
                    {
                        prepare_ipdata_barfingersend();
                        break;
                    }
                    case 0xb1:
                    case 0x03:
                    {
                        prepare_ipdata_icfingersend();
                        break;
                    }
                    case 0x04:
                    {
                        prepare_ipdata_idfingersend();
                        break;
                    }
                    default:
                    {
                        prepare_ipdata_barfingersend();
                        break;
                    }
                    }
                }
                else
                {
                    //USBFingerFeature();
                    USBFingerTemplate();
                }

            }
            else if(fingerApplyingMode == 0x02)//直接将指纹数据发送到后台
            {
                fingerStep = 0x00;
                switch(ticketStyle)
                {
                case 0x02:
                {
                    prepare_ipdata_barfingersend();
                    break;
                }
                case 0xb1:
                case 0x03:
                {
                    prepare_ipdata_icfingersend();
                    break;
                }
                case 0x04:
                {
                    prepare_ipdata_idfingersend();
                    break;
                }
                default:
                {
                    prepare_ipdata_barfingersend();
                    break;
                }
                }
            }
        }
        else if(fingerStep==0x02)//检票指纹录入或验证，且已经录入或验证，并开始发送到后台
        {
            fingerStep = 0x00;
            switch(ticketStyle)
            {
            case 0x02:
            {
                prepare_ipdata_barfingersend();
                break;
            }
            case 0xb1:
            case 0x03:
            {
                prepare_ipdata_icfingersend();
                break;
            }
            case 0x04:
            {
                prepare_ipdata_idfingersend();
                break;
            }
            default:
            {
                prepare_ipdata_barfingersend();
                break;
            }
            }
        }
        else//平时没有检票，则一直打开指纹设备扫描，并发送到后台
        {
            TicketFlagValue(1);
            prepare_ipdata_fingersend();
        }
#else
        switch(ticketStyle)
        {
        case 0x02:
        {
            prepare_ipdata_barfingersend();
            break;
        }
        case 0xb1:
        case 0x03:
        {
            prepare_ipdata_icfingersend();
            break;
        }
        case 0x04:
        {
            prepare_ipdata_idfingersend();
            break;
        }
        default:
        {
            prepare_ipdata_barfingersend();
            break;
        }
        }
#endif
    }
}

void Form::prepare_ipdata_fingersend()
{
    UiChange(check);
    //UiPicDisplay(fingercheck);

    QByteArray ipdata;
#if PROTOCOLVER == NEWPROTOCOL
    ipdata = PackTLVEntity(SCN, P22_PartNoGuid);//景点号
    ipdata += PackTLVEntity(CHAN, IntToByte(P23_GateNo));//通道号
    ipdata += PackTLVEntity(BST, IntToByte(Pb1_FingerDevType));//生物识别业务类型
    ipdata += PackTLVEntity(FF, fingerData);//指纹特征
#else
    ipdata[0] = 0x00;
    ipdata[ipdata.length()] = P22_PartNo;
    ipdata[ipdata.length()] = P23_GateNo;

    ipdata += fingerData;
    ipdata += ticketExtend;
#endif
    TcpSendCmd(0xe0,0x00,ipdata);
}
void Form::fingerStartTimerOut()
{
    fingerStartTimer->stop();
#if FINGEROPENMODE
    FingerTemplate(fingerchangkai);
#endif
}
//websocketserver----------------------------------------------------------------------------
void Form::WebSocketServerInit()
{
    websocketserver = new WebSocketServer(this);
    connect(websocketserver,SIGNAL(TicketDebug(QString)),this,SLOT(TicketDebug(QString)));
    websocketserver->start();

    humH = 0xfe;
    humL = 0x00;
    tempH = 0xfe;
    tempL = 0x00;
    humThreshold = 0xfe;
    tempThreshold = 0xfe;
    relay1 = 0xfe;
    relay2 = 0xfe;
    setTempHumThreshold = 0;

    websocketTimer = new QTimer(this);
    connect(websocketTimer,SIGNAL(timeout()),this,SLOT(WebSocketTimerOut()));
    tempHumReadTimer = new QTimer(this);
    connect(tempHumReadTimer,SIGNAL(timeout()),this,SLOT(TempHumReadTimerOut()));
}
void Form::WebSocketTimerOut()
{
    websocketTimer->stop();

    humH = 0xfe;
    humL = 0x00;
    tempH = 0xfe;
    tempL = 0x00;
    humThreshold = 0xfe;
    tempThreshold = 0xfe;
    relay1 = 0xfe;
    relay2 = 0xfe;

    tempHumReadTimer->start(3000);
}
void Form::TempHumReadTimerOut()
{
    tempHumReadTimer->stop();

    QByteArray sendbuf;

    sendbuf[0] = 0xfb;
    sendbuf[1] = 0x00;
    if(setTempHumThreshold)
    {
        sendbuf[2] = 0xc2;
        sendbuf[3] = humThresholdBuf;
        sendbuf[4] = tempThresholdBuf;
    }
    else
    {
        sendbuf[2] = 0xc0;
        sendbuf[3] = 0x00;
        sendbuf[4] = 0x00;
    }
    sendbuf[1] = sendbuf.length(); //计算命令的长度
    sendbuf[5] = BgComm::SUMVerify(sendbuf)&0x7f;
    UserEvent *ue = new UserEvent(CR::CanWriteBuf,this);
    ue->canid = CAN_ID_TEMPHUM_CONTROLLER;
    ue->byteArray = sendbuf;
    qApp->postEvent(canBusThread,ue);

    websocketTimer->start(2000);
}
//sql----------------------------------------------------------------------------------------
void Form::SqlTableInit()
{
    sqlTable = new SqlTable(this);
    sqlReadStep = 0;

    sqlTable->UsrConfSqlInit();
    UserconfSqlSync();
    DebugInit();
    VersionCodeInit();
    sqlTable->SqlInit();
}
//snr----------------------------------------------------------------------------------------
QByteArray Form::Decrypt(QByteArray sdata,quint32 key)
{
    qint32 i;
    qint32 KEY;
    QByteArray odata;

    KEY = key;
    for(i=0;i<sdata.length();i++)
    {
        if((quint8)((sdata.data()[i])^(char)(KEY >> 8)) == 0)
        {
            odata[i] = sdata.data()[i];
            KEY = (0+KEY)* 11 + 12;
        }
        else
        {
            odata[i] = ((sdata.data()[i])^(char)(KEY >> 8));
            KEY = ((quint8)sdata.data()[i]+KEY)* 11 + 12;
        }
    }
    return odata;
}
quint8 Form::gettime(QByteArray sdata)
{
    QByteArray xlh;
    QByteArray odata;
    QString str;
    char aa[200];
    char timeflag = 0;
    char *alen;

    str = sdata.mid(0,6);
    odata = BgComm::StringToByteArray(BgComm::FormatString(str, 2, QChar(' ')), 16, QChar(' '));
    xlh = udpThread->xlh.mid(0,3);
    if(odata != xlh)
    {
        return 5;
    }

    strcpy(aa,sdata.data());
    alen = strstr(&aa[0],"|");
    if(alen != NULL)
    {
        aa[alen-&aa[0]] = 0x31;
    }
    else
    {
        return 3;
    }
    alen = strstr(&aa[0],"|");
    if(alen != NULL)
    {
        aa[alen-&aa[0]] = 0x31;
        if((quint8)aa[alen-&aa[0]+1] == 0x30)
        {
            timeflag = 1;
        }
    }
    else
    {
        return 3;
    }
    alen = strstr(&aa[0],"|");
    if(alen != NULL)
    {
        aa[alen-&aa[0]] = 0x31;
        char i;
        for(i=0; i<8; i++)
        {
            str[i] = aa[alen-&aa[0]+1+i];
        }

        endTime = QDate::fromString(str,"yyyyMMdd");
        //qDebug()<<endTime;
        str = qs->value("ctime","20120101").toString();
        beginTime = QDate::fromString(str,"yyyyMMdd");
        //qDebug()<<beginTime;
        if(timeflag)
        {
            //qDebug()<<"bu xian shi";
            return 10;
        }
        //qDebug()<<"xian shi";
        return 9;
    }
    else
    {
        return 3;
    }
}
//TLVProcess---------------------------------------------------------------------------------
void Form::TagMapInit()
{
    TagMap.insert(SYST, "系统时间(SYST)");
    TagMap.insert(CLIC, "客户代码(CLIC)");
    TagMap.insert(SCN, "景点号(SCN)");
    TagMap.insert(CHAN, "通道号(CHAN)");
    TagMap.insert(SCNAM, "景点名称(SCNAM)");
    TagMap.insert(CHT, "检票类型(CHT)");
    TagMap.insert(CID, "通信ID(CID)");
    TagMap.insert(DTN, "设备终端号(DTN)");
    TagMap.insert(MD5, "MD5加密数据(MD5)");
    TagMap.insert(SNENC, "序列号加密数据(SNENC)");
    TagMap.insert(HC, "心跳命令(HC)");
    TagMap.insert(MBSN, "主板序列号(MBSN)");
    TagMap.insert(ATS, "应用类型(ATS)");
    TagMap.insert(BSEC, "后台错误代码(BSEC)");
    TagMap.insert(MED, "介质(MED)");
    TagMap.insert(BC, "条码号(BC)");
    TagMap.insert(SN, "序列号(SN)");
    TagMap.insert(UN, "用户编号(UN)");
    TagMap.insert(CSN, "卡面编号(CSN)");
    TagMap.insert(CHN, "持卡人姓名(CHN)");
    TagMap.insert(CHS, "持卡人性别(CHS)");
    TagMap.insert(CHAG, "持卡人年龄(CHAG)");
    TagMap.insert(CHAD, "持卡人住址(CHAD)");
    TagMap.insert(CHPH, "持卡人电话(CHPH)");
    TagMap.insert(CHID, "持卡人证件号(CHID)");
    TagMap.insert(CHDT, "持卡人证件类型(CHDT)");
    TagMap.insert(SALD, "销售日期(SALD)");
    TagMap.insert(ACTD, "激活日期(ACTD)");
    TagMap.insert(EXPD, "失效日期(EXPD)");
    TagMap.insert(ICCCD, "IC卡自定义数据(ICCCD)");
    TagMap.insert(CPUCCD, "CPU卡自定义数据(CPUCCD)");
    TagMap.insert(BST, "生物识别业务类型(BST)");
    TagMap.insert(FF, "指纹特征(FF)");
    TagMap.insert(PF, "掌纹特征(PF)");
    TagMap.insert(TST, "票状态(TST)");
    TagMap.insert(RIDN, "记录识别号(RIDN)");
    TagMap.insert(TCL, "票类(TCL)");
    TagMap.insert(TTYP, "票型(TTYP)");
    TagMap.insert(TS, "票来源(TS)");
    TagMap.insert(PM, "打孔模式(PM)");
    TagMap.insert(CM, "卡标志(CM)");
    TagMap.insert(CCL, "卡类(CCL)");
    TagMap.insert(CTYP, "卡型(CTYP)");
    TagMap.insert(OCM, "出卡模式(OCM)");
    TagMap.insert(RNT, "次卡剩余次数(RNT)");
    TagMap.insert(RAE, "电子钱包剩余金额(RAE)");
    TagMap.insert(CAM, "本次消费金额(CAM)");
    TagMap.insert(CONT, "消费类型(CONT)");
    TagMap.insert(BTT, "购票时间(BTT)");
    TagMap.insert(UST, "使用时间(UST)");
    TagMap.insert(USC, "使用景点(USC)");
    TagMap.insert(UCH, "使用通道(UCH)");
    TagMap.insert(TNT, "票总人数(TNT)");
    TagMap.insert(TNUM, "检票人数(TNUM)");
    TagMap.insert(NTNUM, "未检票人数(NTNUM)");
    TagMap.insert(CUSVAD, "自定义语音地址(CUSVAD)");
    TagMap.insert(FAM, "指纹应用模式(FAM)");
    TagMap.insert(PAM, "照片应用模式(PAM)");
    TagMap.insert(IDAM, "二代证应用模式(IDAM)");
    TagMap.insert(PFR, "图片总帧数(PFR)");
    TagMap.insert(PFRP, "图片帧位置(PFRP)");
    TagMap.insert(PFRC, "图片帧内容(PFRC)");
    TagMap.insert(TCONST, "检票确认状态(TCONST)");
    TagMap.insert(AUTF, "授权标志(AUTF)");
    TagMap.insert(AUTC, "授权卡号(AUTC)");
    TagMap.insert(ACCNUM, "通行人数(ACCNUM)");
    TagMap.insert(CNO, "银行卡号(CNO)");
    TagMap.insert(CHAM, "扣款金额(CHAM)");
    TagMap.insert(TRTYP, "交易类型(TRTYP)");
    TagMap.insert(TRAM, "交易金额(TRAM)");
    TagMap.insert(TRT, "交易时间(TRT)");
    TagMap.insert(TRTN, "交易终端号(TRTN)");
    TagMap.insert(FST, "指纹状态(FST)");
    TagMap.insert(CUSBCYCH, "自定义条码年卡头(CUSBCYCH)");
    TagMap.insert(IFN, "录入指纹数(IFN)");
    TagMap.insert(CFN, "对比指纹数(CFN)");
    TagMap.insert(IIDN, "录入二代证数(IIDN)");
    TagMap.insert(CIDN, "比对二代证数(CIDN)");
    TagMap.insert(EXD, "扩展位(EXD)");
    TagMap.insert(RT, "退票时间(RT)");
    TagMap.insert(CTT, "换票时间(CTT)");
    TagMap.insert(RLT, "挂失时间(RLT)");
    TagMap.insert(FAST, "人脸状态(FAST)");
    TagMap.insert(TKIND, "票种(TKIND)");
    TagMap.insert(CKIND, "卡种(CKIND)");
    TagMap.insert(FATOR, "人脸订单号(FATOR)");
}
QByteArray Form::IntToByte(quint16 i)
{
    QByteArray abyte0;

    if(i < 0x100)
    {
        abyte0[0] = (uchar)(i&0xff);
    }
    else
    {
        abyte0[0] = (uchar)((i>>8)&0xff);
        abyte0[1] = (uchar)(i&0xff);
    }

    return abyte0;
}
quint16 Form::BytesToInt(QByteArray bytes, quint8 err)
{
    quint16 addr;

    switch((quint32)bytes.count())
    {
        case 0:addr = err;break;//读取状态时用0xff，读取数据时用0x00
        case 1:addr = bytes[0];break;
        case 2:
        default:
            addr = bytes[0]<<8;
            addr |= bytes[1];
            break;
    }

    return addr;
}
//判断是否单一结构
bool Form::IsSingleStruct(quint8 AValue)
{
    if((AValue & 0x20) != 0x20)
        return true;
    return false;
}
//判断是否多字节Tag
bool Form::IsMultiTag(quint8 AValue)
{
    if((AValue & 0x1F) == 0x1F)
        return true;
    return false;
}
//判断最高位是否为1
bool Form::HighBitIsOne(quint8 AValue)
{
    if((AValue & 0x80) == 0x80)
        return true;
    return false;
}
//清除TLV Array
void Form::ClearTLVEntityArray()
{
    qint32 i;
    for(i=0; i<ATLVEntityArray.count(); i++)
        ATLVEntityArray.clear();
}
//生成TLV Array
QString Form::GenerateTLVEntityArray(QByteArray buf, quint32 BeginIndex, quint32 Len)
{
    quint32 i;
    qint8 CurrType;
    quint32 CurrIndex,ValueSize,LenSize;
    PTLVEntity ATLVEntity;
    QString Result;

    ATLVEntity = new TTLVEntity;
    if(ATLVEntity == NULL)
    {
        TicketDebug("ATLVEntity is NULL!");
        return Result;
    }

    if((quint32)buf.count()<(Len - BeginIndex - 1))
    {
        Result = "Less Length";
        return Result;
    }
    Result = "TLVEntity Unpack Successfully";
    CurrIndex = BeginIndex;
    CurrType = 'T';
    while(CurrIndex < (quint32)buf.count())
    {
        switch(CurrType)
        {
            case 'T':
            {
                ATLVEntity->Tag.clear();
                ATLVEntity->Len.clear();
                ATLVEntity->Value.clear();
                if(IsSingleStruct((quint8)buf.at(CurrIndex)))
                {
                    if(IsMultiTag((quint8)buf.at(CurrIndex)))
                    {
                        ATLVEntity->Tag[0] = (quint8)buf.at(CurrIndex);
                        CurrIndex++;
                        ATLVEntity->Tag[1] = (quint8)buf.at(CurrIndex);
                        //qDebug("T--Single--Tag: %x%x",(quint8)ATLVEntity->Tag.at(0),(quint8)ATLVEntity->Tag.at(1));
                        CurrIndex++;
                        ATLVEntity->TagSize = 2;
                    }
                    else
                    {
                        ATLVEntity->Tag[0] = (quint8)buf.at(CurrIndex);
                        //qDebug("T--Single--Tag: %x",(quint8)ATLVEntity->Tag.at(0));
                        ATLVEntity->TagSize = 1;
                        CurrIndex++;
                    }
                }
                else
                {
                    if(IsMultiTag((quint8)buf.at(CurrIndex)))
                    {
                        ATLVEntity->Tag[0] = (quint8)buf.at(CurrIndex);
                        CurrIndex++;
                        ATLVEntity->Tag[1] = (quint8)buf.at(CurrIndex);
                        //qDebug("T--noSingle--Tag: %x%x",(quint8)ATLVEntity->Tag.at(0),(quint8)ATLVEntity->Tag.at(1));
                        CurrIndex++;
                        ATLVEntity->TagSize = 2;
                    }
                    else
                    {
                        ATLVEntity->Tag[0] = (quint8)buf.at(CurrIndex);
                        //qDebug("T--noSingle--Tag: %x",(quint8)ATLVEntity->Tag.at(0));
                        ATLVEntity->TagSize = 1;
                        CurrIndex++;
                    }
                    if(HighBitIsOne((quint8)buf.at(CurrIndex)))
                    {}
                }
                CurrType = 'L';
                break;
            }
            case 'L':
            {
                if(!HighBitIsOne((quint8)buf.at(CurrIndex)))
                {
                    ATLVEntity->Len[0] = (quint8)buf.at(CurrIndex);
                    ATLVEntity->LenSize = 1;
                    ValueSize = (quint8)buf.at(CurrIndex);
                    //qDebug("L1---ValueSize: %d",ValueSize);
                    CurrIndex++;
                }
                else
                {
                    //qDebug("L2---(quint8)buf.at(CurrIndex): %x",(quint8)buf.at(CurrIndex));
                    LenSize = (quint8)buf.at(CurrIndex) & 0x7f;
                    //qDebug("L2---LenSize: %d",LenSize);
                    if(LenSize > 3)
                    {
                        Result = "Length LenSize Greater than 3";
                        return Result;
                    }
                    CurrIndex++;
                    ValueSize = 0;
                    //qDebug("L2---ValueSize: %d",ValueSize);
                    //qDebug("L2---CurrIndex: %d",CurrIndex);
                    for(i=0; i<LenSize; i++)
                    {
                        ValueSize = ValueSize+((quint8)buf.at(CurrIndex+i)<<(i*8));
                        ATLVEntity->Len[i] = (quint8)buf.at(CurrIndex+i);
                    }
                    //qDebug("L2---ValueSize: %d",ValueSize);
                    if((ValueSize + CurrIndex) > (quint32)buf.count())
                    {
                        Result = "Length Value Err";
                        return Result;
                    }
                    ATLVEntity->LenSize = LenSize;
                    CurrIndex = CurrIndex + LenSize;
                }
                CurrType = 'V';
                break;
            }
            case 'V':
            {
                ATLVEntity->ValueSize = ValueSize;
                for(i=0;i<ValueSize;i++)
                {
                    //qDebug("CurrIndex+i: %d",CurrIndex+i);
                    ATLVEntity->Value[i] = (quint8)buf.at(CurrIndex+i);
                }
                CurrIndex = CurrIndex + ValueSize;
                ATLVEntityArray.push_back(*ATLVEntity);
                CurrType = 'T';
                break;
            }
            default:
                CurrIndex = (quint32)buf.count();
                break;
        }
        if((CurrIndex - BeginIndex) >= Len)
            break;
    }

    delete ATLVEntity;
    return Result;
}
//获取第一级TLV的值组合
void Form::GetFirstLevelTLVBuf()
{
    qint32 i;
    quint32 j;
    quint32 temp;

    for(i=0;i<ATLVEntityArray.count();i++)
    {
        if((ATLVEntityArray[i].Tag.count()==1)
                &&(((quint8)ATLVEntityArray[i].Tag.at(0)==0x77)
                   ||((quint8)ATLVEntityArray[i].Tag.at(0)==0x70)
                   ||((quint8)ATLVEntityArray[i].Tag.at(0)==0x6F)))
        {
            temp = FirstLevelTLVBuf.count();
            for(j=0;j<ATLVEntityArray[i].ValueSize;j++)
            {
                FirstLevelTLVBuf[temp + j] = (quint8)ATLVEntityArray[i].Value.data()[j];
            }
        }
    }
    ExportTLVEntity2File();
}
//获取TLVEntity数据值
QByteArray Form::GetTLVEntityValue(QString ATag)
{
    quint32 i,j;
    QByteArray Result;
    QByteArray ATagArray = BgComm::StringToByteArray(BgComm::FormatString(ATag, 2, QChar(' ')), 16, QChar(' '));

    for(i=0;i<(quint32)ATLVEntityArray.count();i++)
    {
        if(ATagArray.length() == 1)
        {
            if(ATLVEntityArray[i].TagSize == 1)
            {
                if((quint8)ATLVEntityArray[i].Tag.at(0) == (quint8)ATagArray.at(0))
                {
                    for(j=0;j<ATLVEntityArray[i].ValueSize;j++)
                        Result += ATLVEntityArray[i].Value.at(j);
                }
            }
        }
        else
        {
            if(ATLVEntityArray[i].TagSize == 2)
            {
                if(((quint8)ATLVEntityArray[i].Tag.at(0) == (quint8)ATagArray.at(0))&&((quint8)ATLVEntityArray[i].Tag.at(1) == (quint8)ATagArray.at(1)))
                {
                    for(j=0;j<ATLVEntityArray[i].ValueSize;j++)
                        Result += ATLVEntityArray[i].Value.at(j);
                }
            }
        }

    }
    return Result;
}
//组包TLVEntity
QByteArray Form::PackTLVEntity(QString ATag, QByteArray Value)
{
    QByteArray Result;
    int len;

    Result = BgComm::StringToByteArray(BgComm::FormatString(ATag, 2, QChar(' ')), 16, QChar(' '));
    len = Value.length();
    if(len < 0x80)
    {
        Result[Result.length()] = len;
    }
    else
    {
        if(len < 0x10000)
        {
            Result[Result.length()] = 0x82;
            Result[Result.length()] = len&0xff;
            Result[Result.length()] = (len>>8)&0xff;
        }
        else
        {
            if(len < 0x1000000)
            {
                Result[Result.length()] = 0x83;
                Result[Result.length()] = len&0xff;
                Result[Result.length()] = (len>>8)&0xff;
                Result[Result.length()] = (len>>16)&0xff;
            }
            else
            {
                Result.clear();
                return Result;
            }
        }
    }
    Result += Value;
    return Result;
}
//将生成的TLV输出到指定文件
void Form::ExportTLVEntity2File()
{
    if(P02_DebugEnable)
    {
        qint32 i,j;
        QString sTag,sValue;

        for(i=0; i<ATLVEntityArray.count(); i++)
        {
            sTag = BgComm::ByteArrayToString(ATLVEntityArray[i].Tag);
            sValue = BgComm::ByteArrayToString(ATLVEntityArray[i].Value);

            QMap<QString, QString>::iterator mi;
            mi = TagMap.find(sTag);
            if(mi != TagMap.end())
            {
                if(sValue.length()<600)
                    TicketDebug("ExportTLVEntity-->" + mi.key() + "-" + mi.value() +":" + sValue);
                else
                    TicketDebug("ExportTLVEntity-->" + mi.key() + "-" + mi.value() +":" + sValue.mid(0,40) + "......");
            }
            else
            {
                if(sValue.length()<600)
                    TicketDebug("ExportTLVEntity-->" + sTag + ":" + sValue);
                else
                    TicketDebug("ExportTLVEntity-->" + sTag + ":" + sValue.mid(0,40) + "......");
            }
        }
    }
}
//other--------------------------------------------------------------------------------------
void Form::uiTimeSet(QByteArray t)
{
    QString ret = "date -s";

    ret.append(QString("%1").arg((uchar)t.at(0), 2, 16, (QChar)'0'));//yy
    ret.append(QString("%1").arg((uchar)t.at(1), 2, 16, (QChar)'0'));//yy
    ret.append(QString("%1").arg((uchar)t.at(2), 2, 16, (QChar)'0'));//MM
    ret.append(QString("%1").arg((uchar)t.at(3), 2, 16, (QChar)'0'));//dd
    ret.append(QString("%1").arg((uchar)t.at(4), 2, 16, (QChar)'0'));//hh:
    ret.append(QString("%1.").arg((uchar)t.at(5), 2, 16, (QChar)'0'));//mm:
    ret.append(QString("%1").arg((uchar)t.at(6), 2, 16, (QChar)'0'));//ss

    TicketDebug(ret);
    QProcess::execute(ret);
    QProcess::execute("hwclock --systohc");
}
void Form::keyPressEvent(QKeyEvent *key)
{        
    TicketDebug(QString("key is ")+key->text());
    //TicketDebug(QString("key is %1").arg(key->key(),0,16, (QChar)'0') );
    if((key->key() >= 0) && (key->key() <= 255))
    {
        //keyInputStr[keyInputStr.length()] = key->key();
        //UiInputBarcodeFromKey(keyInputStr);

        keyInputStr2+=key->text();
        UiInputBarcodeFromKey(keyInputStr2);
    }
    else if((key->key() == 0x1000005)||(key->key() == 0x1000004))
    {

//        UiInputBarcodeFromKey(keyInputStr);
//        keyInputStr.insert(0,0xaa);
//        keyInputStr[keyInputStr.length()] = 0x0d;
//        keyInputStr[keyInputStr.length()] = 0x0a;
//        UserEvent *ue = new UserEvent(CR::BarCode,this);
//        ue->byteArray = keyInputStr;
//        qApp->postEvent(this,ue);
//        keyInputStr.resize(0);
//        UiInputBarcodeFromKey(keyInputStr);

        UiInputBarcodeFromKey(keyInputStr2);
        keyInputStr = keyInputStr2.toAscii();
        keyInputStr.insert(0,0xaa);
        keyInputStr[keyInputStr.length()] = 0x0d;
        keyInputStr[keyInputStr.length()] = 0x0a;
        UserEvent *ue = new UserEvent(CR::BarCode,this);
        ue->byteArray = keyInputStr;
        qApp->postEvent(this,ue);
        keyInputStr2.resize(0);
        UiInputBarcodeFromKey(keyInputStr2);

    }
    else if(key->key() == Qt::Key_Backspace)
    {
//        keyInputStr.remove(keyInputStr.length()-1,1);
//        UiInputBarcodeFromKey(keyInputStr);

        keyInputStr2.remove(keyInputStr2.length()-1,1);
        UiInputBarcodeFromKey(keyInputStr2);
    }

}

void customMessageHandler(QtMsgType type, const char *msg)
{
    QString txt;

    txt = QDateTime::currentDateTime().toString("yyyy-MM-dd hh:mm:ss:zzz ");
    switch (type) {
    //调试信息提示
    case QtDebugMsg:
            txt += QString("Debug: %1").arg(msg);
           break;
    //一般的warning提示
    case QtWarningMsg:
            txt += QString("Warning: %1").arg(msg);
            break;
    //严重错误提示
    case QtCriticalMsg:
            txt += QString("Critical: %1").arg(msg);
            break;
    //致命错误提示
    case QtFatalMsg:
            txt += QString("Fatal: %1").arg(msg);
            break;
    }
    QString path = PDEBUGLOG_FILEPATH;
    path += "app.run";
    QFile outFile(path) ;
    outFile.open(QIODevice::WriteOnly | QIODevice::Append);
    QTextStream ts(&outFile);
    ts << txt << "\r\n";
}
void Form::DebugInit()
{
    bool ok;
    //tcpServerDebugFlag = 0;
    P02_DebugEnable = qs->value("P02_DebugEnable",1).toInt(&ok);
    if(!ok)
    {
        P02_DebugEnable = 1;
    }

    if((P02_DebugEnable == 2) || (P02_DebugEnable == 4))
    {
        qInstallMsgHandler(customMessageHandler);
        QString path = PDEBUGLOG_FILEPATH;
        QDir logDir;
        logDir.setPath(path);
        if(!logDir.exists())
        {
            QString cmdstr = "mkdir -p ";
            cmdstr.append(path);
            TicketDebug(cmdstr);
            QProcess::execute(cmdstr);
            QProcess::execute("sync");
        }
    }
    else if(P02_DebugEnable == 3)
    {
        debugForm = new DebugForm(this);
        debugForm->setWindowFlags(Qt::FramelessWindowHint);
        debugForm->setGeometry(0,0,800,480);
        //debugForm->setAttribute(Qt::WA_NoSystemBackground);
        //debugForm->setAttribute(Qt::WA_TranslucentBackground,0);
        debugForm->setAttribute(Qt::WA_OpaquePaintEvent,true);
        debugForm->show();
        debugForm->setWindowOpacity(1);
        QPalette bglal=palette();
        bglal.setColor(QPalette::Background,QColor(0,0,0,255));
        bglal.setColor(QPalette::Foreground,QColor(255,255,255,255));
        setPalette(bglal);
        debugForm->setStyleSheet("background-color:rgba(100,100,100,175);color:rgb(255,255,255);");
        QWSServer::setCursorVisible(true);
    }
}

void Form::TicketDebug(QString str)
{
    if(P02_DebugEnable)
    {
        if((P02_DebugEnable == 2) || (P02_DebugEnable == 4))
            qDebug()<<str;
        else
            qDebug()<<QDateTime::currentDateTime().toString("yyyy-MM-dd hh:mm:ss:zzz :")+str;

        QString path = PDEBUGLOG_FILEPATH;
        path += "app.run";
        QFileInfo fi(path);
        if(fi.size() > 5*1024*1024)//5M
        {
            TicketDebugLogSend();
        }
        if(P02_DebugEnable == 3)
        {
            UserEvent *ue = new UserEvent(CR::DebugMsg,this);
            ue->msg = QDateTime::currentDateTime().toString("yyyy-MM-dd hh:mm:ss:zzz :")+str;
            qApp->postEvent(debugForm,ue);
        }

//        if(tcpServerDebugFlag)
//        {
//            TcpServerSendDebug(str);
//        }
    }
}
void Form::TicketDebugLogSend()
{
    QString s;
    QDir d;
    QString ipAddr;
    bool ok;

    QString appRunFile = PDEBUGLOG_FILEPATH;
    appRunFile += "app.run";
    QFile file(appRunFile);
    if (file.exists())
    {
        s = appRunFile;
        s.append(" exists");
        //qDebug()<<s;
    }
    else
    {
        return;
    }

    d.setPath(PUTPIX_JPG_FILEPATH);
    if(d.exists())
    {
        s = PUTPIX_JPG_FILEPATH;
        s.append(" exists");
        //qDebug()<<s;
    }
    else
    {
        s = "mkdir -p ";
        s.append(PUTPIX_JPG_FILEPATH);

        //qDebug()<<s;
        QProcess::execute(s);
        QProcess::execute("sync");
    }

    QFileInfo fileInfo(appRunFile);
    QString datePath;
    datePath = PDEBUGLOG_FILEPATH;
    datePath += fileInfo.lastModified().date().toString("yyyyMMdd/");
    d.setPath(datePath);
    if(d.exists())
    {
        s = datePath;
        s.append(" exists");
        //qDebug()<<s;
    }
    else
    {
        s = "mkdir -p ";
        s.append(datePath);

        //qDebug()<<s;
        QProcess::execute(s);
        QProcess::execute("sync");
    }

    P23_GateNo = qs->value("P23_GateNo",1).toInt(&ok);
    if(!ok)
    {
        P23_GateNo = 1;
    }
    ipAddr = qs->value("P40_HostIp","192.168.0.240").toString();
    if(ipAddr.length() == 0)
    {
        ipAddr = "192.168.0.240";
    }

    QString outputFile = "debuglog_";
    outputFile += ipAddr;
    outputFile += "_";
    outputFile += QString::number(P23_GateNo);
    outputFile += "_";
    outputFile += QDateTime::currentDateTime().toString("yyyyMMddhhmmss");
    outputFile += ".txt";

    if(Ftp_Enable && tcpConnectFlag)
    {
        s = "cp ";
        s += appRunFile;
        s += " ";
        s += PUTPIX_JPG_FILEPATH;
        s += outputFile;
        QProcess::execute(s);
        QProcess::execute("sync");
        //qDebug()<<"TicketDebugLogSend--ftp on: "+s;
    }

    s = "cp ";
    s += appRunFile;
    s += " ";
    s += datePath;
    s += outputFile;
    QProcess::execute(s);
    QProcess::execute("sync");

    s = "rm ";
    s += appRunFile;
    QProcess::execute(s);
    QProcess::execute("sync");
}

void Form::VersionCodeInit()
{
    bool ok;
    QString versionStr;
    QString HardwareVer;

    StandardVersion[0] = BgComm::GetSpecificStr(STANDARD_VERSION_CODE, ".", 0).toInt(&ok);
    StandardVersion[1] = BgComm::GetSpecificStr(STANDARD_VERSION_CODE, ".", 1).toInt(&ok);
    StandardVersion[2] = BgComm::GetSpecificStr(STANDARD_VERSION_CODE, ".", 2).toInt(&ok);

    StandardVersion[3] = BgComm::GetSpecificStr(STANDARD_VERSION_CODE, ".", 3).mid(0,2).toInt(&ok);
    StandardVersion[4] = BgComm::GetSpecificStr(STANDARD_VERSION_CODE, ".", 3).mid(2,2).toInt(&ok);
    StandardVersion[5] = BgComm::GetSpecificStr(STANDARD_VERSION_CODE, ".", 3).mid(4,2).toInt(&ok);

    versionStr = "A9_Standard";
    versionStr += "_";
    versionStr += STANDARD_VERSION_CODE;
    versionStr += "_";
    versionStr += APP_NAME;
    versionStr += "_";
    versionStr += APP_VERSION_CODE;
    versionStr += "_";
    versionStr += "HARDWAREVER";
    versionStr += "_";
    switch(HARDWAREVER)
    {
        case 1:versionStr += "GA501-1.1";HardwareVer = "GA501-1.1";break;
        case 2:versionStr += "GA501-1.2";HardwareVer = "GA501-1.2";break;
        case 3:versionStr += "GA501-1.3";HardwareVer = "GA501-1.3";break;
        case 4:versionStr += "GA501-1.4";HardwareVer = "GA501-1.4";break;
        case 5:versionStr += "GA502-1.3";HardwareVer = "GA502-1.3";break;
        case 6:versionStr += "GA503-1.0";HardwareVer = "GA503-1.0";break;
        defalut:break;
    }
    versionStr += "_";
    versionStr += QDateTime::currentDateTime().toString("yyyy-MM-dd hh:mm:ss");
    TicketDebug("--------------------------------------我只是日志分割线--------------------------------------");
    TicketDebug(versionStr);

    versionStr = "Ver:";
    versionStr += APP_VERSION_CODE;
    versionStr += "-";
    versionStr += APP_NAME;
    qs->setValue("P10_ProgramVer",versionStr);
    sqlTable->UserconfToSql("P10_ProgramVer", versionStr);
    qs->setValue("HardwareVer",HardwareVer);
    sqlTable->UserconfToSql("HardwareVer", HardwareVer);
    sqlTable->UserconfToSql("time", QDateTime::currentDateTime().toString("yyyy-MM-dd hh:mm:ss"));
}

void Form::HsSaveTicketNum(quint16 num, quint8 type)
{
    bool ok;
    quint16 PassNum;
    quint16 reverseNum;
    quint16 positiveNum;
    quint32 t;

    t = qguoren->value("CurrentDate",10203).toLongLong(&ok);
    if(!ok)
    {
       PassNum = 0;
       reverseNum = 0;
       positiveNum = 0;
    }

    QDate rdate((t/10000)+2000,(t%10000)/100,t%100);
    //qDebug()<< rdate;
    QDate cdate = QDate::currentDate();
    if(rdate == cdate)
    {
        PassNum = qguoren->value("Ticket_PassPer",0).toInt(&ok);
        if(!ok)
            PassNum = 0;
        reverseNum = qguoren->value("Ticket_ReversePer",0).toInt(&ok);
        if(!ok)
            reverseNum = 0;
        positiveNum = qguoren->value("Ticket_PositivePer",0).toInt(&ok);
        if(!ok)
            positiveNum = 0;
    }
    else
    {
        PassNum = 0;
        reverseNum = 0;
        positiveNum = 0;

        qguoren->setValue("CurrentDate",(cdate.year()-2000)*10000+cdate.month()*100+cdate.day());
        qguoren->setValue("Ticket_PassPer",PassNum);
        qguoren->setValue("Ticket_ReversePer",reverseNum);
        qguoren->setValue("Ticket_PositivePer",positiveNum);
    }

    switch(type)
    {
        case 0x01:
        {
            PassNum += num;
            //qDebug("PassNum write is %d",PassNum);
            qguoren->setValue("Ticket_PassPer",PassNum);
            break;
        }
        case 0x02:
        {
            reverseNum += num;
            qguoren->setValue("Ticket_ReversePer",reverseNum);
            if(!checkTicketState)
            {
                TicketFlagValue(1);
                prepare_ipdata_SwingGatePer(reverseNum, reverse);
            }
            break;
        }
        case 0x03:
        {
            positiveNum += num;
            qguoren->setValue("Ticket_PositivePer",positiveNum);
            if(!checkTicketState)
            {
                TicketFlagValue(1);
                prepare_ipdata_SwingGatePer(positiveNum, positive);
            }
            break;
        }
        case 0xff:
        {
            UiTodayPerNumUpdate(PassNum);
            return;
        }
        default:break;
    }

    UiTodayPerNumUpdate(PassNum);

#if SNR_ENABLE
    if(userTimeOutType < 0x09)
    {
        UiTicketstatusDisplay(errtype);
        DoorControl(closedoor, doortwo);
        return;
    }
#endif

    switch(P05_GateMode)
    {
        case 0x01:
            swingGatePer = positiveNum;
            UiTicketstatusDisplay(positivepassage);
            break;
        case 0x02:
        case 0x03:
            swingGatePer = reverseNum;
            UiTicketstatusDisplay(reversepassage);
            break;
        default:break;
    }
}
void Form::HsSavePassNum(quint16 num, quint8 type)
{
    bool ok;
    quint16 PassNum;
    quint32 t;

    t = qpassnum->value("CurrentDate",10203).toLongLong(&ok);
    if(!ok)
    {
       PassNum = 0;
    }

    QDate rdate((t/10000)+2000,(t%10000)/100,t%100);
    //qDebug()<< rdate;
    QDate cdate = QDate::currentDate();
    if(rdate == cdate)
    {
        PassNum = qpassnum->value("Ticket_PassPer",0).toInt(&ok);
        //qDebug("PassNum1 read is %d",PassNum);
        if(!ok)
            PassNum = 0;
    }
    else
    {
        PassNum = 0;
        TicketDebug(QString("HsSavePassNum PassNum read is:%1").arg(PassNum));

        qpassnum->setValue("CurrentDate",(cdate.year()-2000)*10000+cdate.month()*100+cdate.day());
        qpassnum->setValue("Ticket_PassPer",PassNum);
    }

    switch(type)
    {
        case 0x00:
        {
            passPerNum = PassNum;
            if(P05_GateMode==0x03)
            {
                if(passPerNum)
                    DoorControl(opendoor, door1);
                else
                    DoorControl(closedoor, door1);
            }
            else
            {
                if(passPerNum)
                    DoorControl(opendoor, doortwo);
                else
                    DoorControl(closedoor, doortwo);
            }
            TicketDebug(QString("HsSavePassNum passPer:%1").arg(passPerNum));
            break;
        }
        case 0x01:
        {
            TicketDebug(QString("HsSavePassNum PassNum write is %1").arg(num));
            qpassnum->setValue("Ticket_PassPer",num);
            break;
        }
        default:break;
    }

#if SNR_ENABLE
    if(userTimeOutType < 0x09)
    {
        UiTicketstatusDisplay(errtype);
        DoorControl(closedoor, doortwo);
        return;
    }
#endif
}
//other--------------------------------------------------------------------------------------
void Form::LogFileInit()
{
    logfile = new LogFile(this);
    connect(logfile,SIGNAL(TicketDebug(QString)),this,SLOT(TicketDebug(QString)));
    logfile->start();
}
void Form::ResetTtyusb()
{
    bool ok;
    TicketDebug("PowerOff recevie");
    if(qs->value("P90_BarcodeEnable",0).toInt(&ok) == 0x01)
    {
        barCode->QuitFlag();
        barCode->quit();
        barCode->CloseCom();
        delete barTimer;
    }
    if(qs->value("P70_RfidEnable",0).toInt(&ok) == 0x01)
    {
       rfidThread->QuitFlag();
       rfidThread->quit();
       rfidThread->CloseCom();
       delete cardTimer;
    }
    if(qs->value("Pb0_FingerEnable",1).toInt(&ok) == 0x01)
    {
        serialFinger->QuitFlag();
        serialFinger->quit();
        serialFinger->CloseCom();
        delete fingerStartTimer;
    }
    if(P06_GateType == 0x02 || P06_GateType == 0x03)
    {

        swingGate->QuitFlag();
        swingGate->quit();
        swingGate->CloseCom();
    }

#if HARDWAREVER != SDE_GA503_1_0
    ledDis->CloseCom();
#endif

#if FACEMODE
    faceDetect->QuitFlag();
    faceDetect->quit();
    faceDetect->CloseCom();
    delete faceTimer;
#endif

}
void Form::VDDTimerOut()
{

    TicketDebug("--------------VDD down time out-------------");
    fileGpio->vdddown();
    QString s;
    s = "rm /dev/ttyUSB*";
    QProcess::execute(s);
    QProcess::execute("sync");
    QProcess::execute("reboot");

}
