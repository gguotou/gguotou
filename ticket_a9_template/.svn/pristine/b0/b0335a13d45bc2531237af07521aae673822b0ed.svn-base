#include "udpthread.h"

UdpThread::UdpThread(QObject * parent)
    :QThread(parent)
{
    qs = new QSettings(QS_FILEPATH, QSettings::IniFormat);
    UdpInit();
    MessageMapInit();
}
void UdpThread::UdpInit()
{
    bool ok;
    quint64 parameter;
    QString str;

    parameter = qs->value("P00_ValueLeft",200).toInt(&ok);
    if(!ok)
    {
        parameter = 200;
    }
    qsdata[0x00] = (quint8)parameter;

    parameter = qs->value("P01_ValueRight",200).toInt(&ok);
    if(!ok)
    {
        parameter = 200;
    }
    qsdata[0x01] = (quint8)parameter;

    parameter = qs->value("P02_DebugEnable",1).toInt(&ok);
    if(!ok)
    {
        parameter = 1;
    }
    qsdata[0x02] = parameter;

    parameter = qs->value("P03_OnLineUse",1).toInt(&ok);
    if(!ok)
    {
        parameter = 1;
    }
    qsdata[0x03] = parameter;

    parameter = qs->value("P04_DisplayType",4).toInt(&ok);
    if(!ok)
    {
        parameter = 4;
    }
    qsdata[0x04] = parameter;

    parameter = qs->value("P05_GateMode",0).toInt(&ok);
    if(!ok)
    {
        parameter = 0;
    }
    qsdata[0x05] = parameter;

    parameter = qs->value("P06_GateType",1).toInt(&ok);
    if(!ok)
    {
        parameter = 1;
    }
    qsdata[0x06] = parameter;

    parameter = qs->value("P07_GateComType",1).toInt(&ok);
    if(!ok)
    {
        parameter = 1;
    }
    qsdata[0x07] = parameter;

    parameter = qs->value("P08_ClientNo",1).toInt(&ok);
    if(!ok)
    {
        parameter = 1;
    }
    qsdata[0x08] = parameter>>8;
    qsdata[0x09] = parameter&0x00ff;

    /*
    str = qs->value("P08_ClientNo","12 34").toString();
    if(str.length()==0)
    {
        str = "31 32";
    }
    str = BgComm::FormatString(str, 2, QChar(' '));
    qsdata += BgComm::StringToByteArray(str, 16, QChar(' '));
    */

    qsdata.resize(0x10);
    str = qs->value("P10_ProgramVer","31 32 33").toString();
    if(str.length()==0)
    {
        str = "31 32 33";
    }
    str = BgComm::FormatString(str, 2, QChar(' '));
    qsdata += BgComm::StringToByteArray(str, 16, QChar(' '));

    qsdata.resize(0x18);
    str = qs->value("P18_DevSnr","31 32 33 34 35 36 78 00").toString();
    if(str.length()==0)
    {
        str = "31 32 33 34 35 36 78 00";
    }
    str = BgComm::FormatString(str, 2, QChar(' '));
    qsdata += BgComm::StringToByteArray(str, 16, QChar(' '));
    xlh = BgComm::StringToByteArray(str, 16, QChar(' '));

    parameter = qs->value("P20_CheckTicketMode",0).toInt(&ok);
    if(!ok)
    {
        parameter = 0;
    }
    qsdata[0x20] = parameter;

    parameter = qs->value("P21_GroupInsertEnable",1).toInt(&ok);
    if(!ok)
    {
        parameter = 1;
    }
    qsdata[0x21] = parameter;

    parameter = qs->value("P22_PartNo",1).toInt(&ok);
    if(!ok)
    {
        parameter = 1;
    }
    qsdata[0x22] = parameter;
    parameter = qs->value("P23_GateNo",1).toInt(&ok);
    if(!ok)
    {
        parameter = 1;
    }
    qsdata[0x23] = parameter;

    parameter = qs->value("P24_CheckTicketType",1).toInt(&ok);
    if(!ok)
    {
        parameter = 1;
    }
    qsdata[0x24] = (parameter>>16)&0x00FF;
    qsdata[0x25] = (parameter>>8)&0x0000FF;
    qsdata[0x26] = (parameter)&0x000000FF;

    parameter = qs->value("P28_ImageDisGapTime",10).toInt(&ok);
    if(!ok)
    {
        parameter = 10;
    }
    qsdata[0x28] = parameter;

    parameter = qs->value("P29_ShowTime",3).toInt(&ok);
    if(!ok)
    {
        parameter = 3;
    }
    qsdata[0x29] = parameter;

    parameter = qs->value("P2a_CheckNetTime",3).toInt(&ok);
    if(!ok)
    {
        parameter = 3;
    }
    qsdata[0x2a] = parameter;

    parameter = qs->value("P2b_CheckTicketGapTime",1).toInt(&ok);
    if(!ok)
    {
        parameter = 1;
    }
    qsdata[0x2b] = parameter>>8;
    qsdata[0x2c] = parameter&0x00ff;

    //net
    qsdata.resize(0x30);
    str = qs->value("P30_Mac","20:11:08:23:00:01").toString();
    if(str.length()==0)
    {
        str = "20:11:08:23:00:01";
    }
    qsdata += BgComm::StringToByteArray(str, 16, QChar(':'));

    qsdata.resize(0x40);
    str = qs->value("P40_HostIp","192.168.0.240").toString();
    if(str.length()==0)
    {
        str = "192.168.0.240";
    }
    qsdata += BgComm::StringToByteArray(str, 10, QChar('.'));


    str = qs->value("P44_NetMask","255.255.255.0").toString();
    if(str.length()==0)
    {
        str = "255.255.255.0";
    }
    qsdata += BgComm::StringToByteArray(str, 10, QChar('.'));

    str = qs->value("P48_GetwayIp","192.168.0.1").toString();
    if(str.length()==0)
    {
        str = "192.168.0.1";
    }
    qsdata += BgComm::StringToByteArray(str, 10, QChar('.'));

    str = qs->value("P4C_DNS","202.101.172.35").toString();
    if(str.length()==0)
    {
        str = "202.101.172.35";
    }
    qsdata += BgComm::StringToByteArray(str, 10, QChar('.'));

    str = qs->value("P50_ServerIp","192.168.0.62").toString();
    if(str.length()==0)
    {
        str = "192.168.0.240";
    }
    qsdata += BgComm::StringToByteArray(str, 10, QChar('.'));

    parameter = qs->value("P54_ServerPort",3333).toInt(&ok);
    if(!ok)
    {
        parameter = 3333;
    }
    qsdata[0x54] = parameter>>8;
    qsdata[0x55] = parameter&0x00ff;


    parameter = qs->value("P56_ReServerEnable",0).toInt(&ok);
    if(!ok)
    {
        parameter = 0;
    }
    qsdata[0x56] = parameter;
    str = qs->value("P57_ReServerIp","192.168.0.44").toString();
    if(str.length()==0)
    {
        str = "192.168.0.240";
    }
    qsdata += BgComm::StringToByteArray(str, 10, QChar('.'));

    parameter = qs->value("P5b_ReServerPort",3333).toInt(&ok);
    if(!ok)
    {
        parameter = 3333;
    }
    qsdata[0x5b] = parameter>>8;
    qsdata[0x5c] = parameter&0x00ff;

    parameter = qs->value("P5d_HttpPort",3333).toInt(&ok);
    if(!ok)
    {
        parameter = 3333;
    }
    qsdata[0x5d] = parameter>>8;
    qsdata[0x5e] = parameter&0x00ff;

    //rfid
    parameter = qs->value("P70_RfidEnable",1).toInt(&ok);
    if(!ok)
    {
        parameter = 1;
    }
    qsdata[0x70] = parameter;

    parameter = qs->value("P71_RfidDevType",0).toInt(&ok);
    if(!ok)
    {
        parameter = 0;
    }
    qsdata[0x71] = parameter;

    parameter = qs->value("P72_RfidTicketType",0).toInt(&ok);
    if(!ok)
    {
        parameter = 0;
    }
    qsdata[0x72] = parameter;

    parameter = qs->value("P73_RfidMoneyEnable",0).toInt(&ok);
    if(!ok)
    {
        parameter = 0;
    }
    qsdata[0x73] = parameter;

    parameter = qs->value("P74_IdCardEnable",0).toInt(&ok);
    if(!ok)
    {
        parameter = 0;
    }
    qsdata[0x74] = parameter;

    parameter = qs->value("P75_IdCardType",0).toInt(&ok);
    if(!ok)
    {
        parameter = 0;
    }
    qsdata[0x75] = parameter;

    str = qs->value("P76_IcPassword","313233343536").toString();
    if(str.length()==0)
    {
        str = "313233343536";
    }
    str = BgComm::FormatString(str, 2, QChar(' '));
    qsdata += BgComm::StringToByteArray(str, 16, QChar(' '));

    //barcode
    parameter = qs->value("P90_BarcodeEnable",1).toInt(&ok);
    if(!ok)
    {
        parameter = 1;
    }
    qsdata[0x90] = parameter;

    parameter = qs->value("P91_BarcodeDevType",0).toInt(&ok);
    if(!ok)
    {
        parameter = 0;
    }
    qsdata[0x91] = parameter;

    parameter = qs->value("P92_BarcodeTicketType",0).toInt(&ok);
    if(!ok)
    {
        parameter = 0;
    }
    qsdata[0x92] = parameter;

    parameter = qs->value("P93_BarcodeBaud",1).toInt(&ok);
    if(!ok)
    {
        parameter = 1;
    }
    qsdata[0x93] = parameter;

    parameter = qs->value("P94_BarcodeHead",0x0a).toInt(&ok);
    if(!ok)
    {
        parameter = 0xaa;
    }
    qsdata[0x94] = parameter;

    parameter = qs->value("P95_BarcodeEndLen",0x02).toInt(&ok);
    if(!ok)
    {
        parameter = 0x02;
    }
    qsdata[0x95] = parameter;

    qsdata.resize(0x96);
    str = qs->value("P96_BarcodeEndData","0D0A").toString();
    if(str.length()==0)
    {
        str = "0D0A";
    }
    str = BgComm::FormatString(str, 2, QChar(' '));
    qsdata += BgComm::StringToByteArray(str, 16, QChar(' '));

    //finger
    parameter = qs->value("Pb0_FingerEnable",1).toInt(&ok);
    if(!ok)
    {
        parameter = 1;
    }
    qsdata[0xb0] = parameter;

    parameter = qs->value("Pb1_FingerDevType",0).toInt(&ok);
    if(!ok)
    {
        parameter = 0;
    }
    qsdata[0xb1] = parameter;

    parameter = qs->value("Pb2_FingerInTimes",2).toInt(&ok);
    if(!ok)
    {
        parameter = 2;
    }
    qsdata[0xb2] = parameter;

    parameter = qs->value("Pb3_FingerInTime",5).toInt(&ok);
    if(!ok)
    {
        parameter = 5;
    }
    qsdata[0xb3] = parameter;

    parameter = qs->value("Pb4_FingerInGrade",1).toInt(&ok);
    if(!ok)
    {
        parameter = 1;
    }
    qsdata[0xb4] = parameter;

    parameter = qs->value("Pb5_FingerMatchTime",5).toInt(&ok);
    if(!ok)
    {
        parameter = 5;
    }
    qsdata[0xb5] = parameter;

    parameter = qs->value("Pb6_FingerMatchGrade",1).toInt(&ok);
    if(!ok)
    {
        parameter = 0x1;
    }
    qsdata[0xb6] = parameter;

    parameter = qs->value("Language",1).toInt(&ok);
    if(!ok)
    {
        parameter = 0x1;
    }
    qsdata[0xc0] = parameter;

    qsdata.resize(0xd0);
    str = qs->value("Pd0_WifiSsid","31 32 33 34 35 36 37 38 39 30").toString();
    if(str.length()==0)
    {
        str = "31 32 33 34 35 36 37 38 39 30";
    }
    str = BgComm::FormatString(str, 2, QChar(' '));
    qsdata += BgComm::StringToByteArray(str, 16, QChar(' '));

    qsdata.resize(0xda);
    str = qs->value("Pda_WifiPassword","31 32 33 34 35 36 37 38 39 30").toString();
    if(str.length()==0)
    {
        str = "31 32 33 34 35 36 37 38 39 30";
    }
    str = BgComm::FormatString(str, 2, QChar(' '));
    qsdata += BgComm::StringToByteArray(str, 16, QChar(' '));

    qsdata.resize(0xe5);
    str = qs->value("Ftp_ServerIp","192.168.0.240").toString();
    if(str.length()==0)
    {
        str = "192.168.0.240";
    }
    qsdata += BgComm::StringToByteArray(str, 10, QChar('.'));

    parameter = qs->value("Ftp_Port",21).toInt(&ok);
    if(!ok)
    {
        parameter = 21;
    }
    qsdata[0xe9] = parameter>>8;
    qsdata[0xea] = parameter&0x00ff;

    str = qs->value("P22_PartNoGuid","313233343536").toString();
    if(str.length()==0)
    {
        str = "313233343536";
    }
    str = BgComm::FormatString(str, 2, QChar(' '));
    QByteArray temp = BgComm::StringToByteArray(str, 16, QChar(' '));
    qsdata += temp;
    p22PartNoGuidLen = temp.size();

    qsdata.resize(256);

    sendPort = 1027;
    revPort = 1025;
    PicFlag = 0;

    fm = this->parent();
    udpSocket = new QUdpSocket(this);
    udpSocket->bind(revPort,QUdpSocket::ShareAddress);
    connect(udpSocket,SIGNAL(readyRead()),this,SLOT(UdpRecv()));
}

void UdpThread::UdpRecv()
{
    QByteArray d;
    QString str;
    int i;
    while (udpSocket->hasPendingDatagrams())
    {
        QByteArray buf;

        buf.resize(udpSocket->pendingDatagramSize());
        udpSocket->readDatagram(buf.data(), buf.size(),&UdpRecvAddr,&UdpRecvPort);
        if(buf.length()<256)
        {
            emit TicketDebug("udp recv:"+BgComm::ByteArrayToString(buf, 16, true));
        }
        else
        {
            emit TicketDebug("udp recv:"+BgComm::ByteArrayToString(buf.mid(0,6), 16, true)+ "...:");
        }

#if UDPENCRYPT == ENCRYPT
        QString udpPassword;
        udpPassword = BgComm::ByteArrayToString(buf.mid(1,8));
        QString tmp_PassWord = qs->value("UDPPassWord","71412E2299B0EEA5").toString();
        //qDebug()<<"[local passwd] = "<<tmp_PassWord;
        //qDebug()<<"[server passwd] = "<<udpPassword;
        if(tmp_PassWord != udpPassword)
        {//密钥错误
            char mydata3[] = {0x3c,0xff,0xff,0xff,0xff,0x3e};
            QByteArray senddata3 = QByteArray::fromRawData(mydata3, sizeof(mydata3));
            UdpSend(senddata3);
            udpMessageHandler(0xa0, buf);
            return;
        }

        buf = buf.remove(1,8);
#endif

        Parameter_Verify = 0;
        Parameter_Length = ((quint8)buf.data()[2])*256 + (quint8)buf.data()[3];

        for (i=0; i<Parameter_Length+4;i++)
        {
            Parameter_Verify^=buf.data()[i+1];
        }
        if(!Parameter_Verify)
        {
            if(((quint8)buf.data()[0] == 0x3c)&&((quint8)buf.data()[buf.length()-1] == 0x3e))// 判断首部
            {
#if UDPENCRYPT == ENCRYPT
                quint8 usrNameLen = buf.length()-6-Parameter_Length;
                if(usrNameLen == 0)
                {
                    qDebug()<<"no usrname";
                    udpMessageHandler(0xa2, buf);
                    return;
                }
                usrNameArry = buf.mid(5+Parameter_Length, usrNameLen);
                buf = buf.remove(5+Parameter_Length, usrNameLen);

                if(buf.length()<256)
                {
                    emit TicketDebug("udp recv raw:"+BgComm::ByteArrayToString(buf, 16, true));
                }
                else
                {
                    emit TicketDebug("udp recv raw:"+BgComm::ByteArrayToString(buf.mid(0,6), 16, true)+ "...:");
                }
#endif
                quint16 cmdlen;
                cmdlen = (quint8)buf.data()[2]*256+(quint8)buf.data()[3];
                udpMessageHandler((quint8)buf.data()[1], buf);
                switch((quint8)buf.data()[1])
                {
                    case 0x54://通讯测试
                    {
                        char mydata3[] = {0x3c,0x54,0x00,0x00,0x54,0x3e};
                        QByteArray senddata3 = QByteArray::fromRawData(mydata3, sizeof(mydata3));
                        UdpSend(senddata3);
                        break;
                    }
                    case 0x56://write wav
                    {
                        QString wavname;
                        wavname = SOUND_FILEPATH;
                        wavname.append(QString("%1.wav").arg((quint8)buf.data()[4]));

                        if((quint8)buf.data()[7] == 0x00)//first
                        {
                            WavFile = new QFile(wavname);
                            if(WavFile == NULL)
                            {
                                qDebug()<<"WavFile is NULL!";
                                return ;
                            }
                            if(!WavFile->open(QFile::WriteOnly))
                            {
                                WavFile->close();
                                qDebug()<<"open wav file err";
                                return;
                            }
                        }
                        WavFile->write(buf.mid(8,256));
                        if((quint8)buf.data()[7] == 0x7f)//end
                        {
                            WavFile->close();
                        }
                        delete WavFile;
                        char mydata[] = {0x3c,0x56,0x00,0x00,0x56,0x3e};
                        QByteArray senddata = QByteArray::fromRawData(mydata, sizeof(mydata));
                        UdpSend(senddata);
                        break;
                    }
                    case 0x57://写参数
                    {
                        quint8 wlen = (quint8)buf.data()[4];
                        if(wlen==0x18)
                        {
                            str = qs->value("DevSnr_Flag","0").toString();
                            if(str.data()[0]=='0')
                            {
                                for(quint8 i=0;i<(cmdlen/2);i++)
                                {
                                    wlen = (quint8)buf.data()[4+2*i];
                                    qsdata.data()[wlen] = buf.data()[4+i*2+1];
                                }
                                mutex.lock();
                                qs->setValue("DevSnr_Flag","1");
                                mutex.unlock();
                            }
                        }
                        else
                        {
                            for(quint8 i=0;i<(cmdlen/2);i++)
                            {
                                wlen = (quint8)buf.data()[4+2*i];
                                qsdata.data()[wlen] = buf.data()[4+i*2+1];
                            }
                        }
                        if(wlen == 0xeb)
                            p22PartNoGuidLen = cmdlen/2;

                        char mydata2[] = {0x3c,0x57,0x00,0x00,0x57,0x3e};
                        QByteArray senddata2 = QByteArray::fromRawData(mydata2, sizeof(mydata2));
                        UdpSend(senddata2);
                        UserEvent *ue = new UserEvent(CR::UdpSave ,this);
                        ue->byteArray = qsdata;
                        ue->p22PartNoGuidLen = p22PartNoGuidLen;
                        qApp->postEvent(fm,ue);
                        //emit this->UdpSave(qsdata);
                        //wrqs();
                        break;
                    }
                    case 0x52://读参数
                    {
                         QByteArray udpdata;
                         udpdata[0] = 0x52;
                         udpdata[udpdata.length()] = 0x01;
                         udpdata[udpdata.length()] = 0x00;
                         udpdata += qsdata;
                         udpdata += BgComm::XORVerify(udpdata);
                         udpdata[udpdata.length()] = 0x3e;
                         udpdata.insert(0,0x3c);
                         UdpSend(udpdata);
                         break;
                    }
                    case 0x5A://read time
                    {
                        QByteArray time;
                        time[0] = 0x5a;
                        time[time.length()] = 0x00;
                        time[time.length()] = 0x07;                        
                        time += BgComm::StringToByteArray(QDateTime::currentDateTime().toString("s m h d M yy"), 16, QChar(' '));
                        time.insert(6,0x01);
                        time += BgComm::XORVerify(time);
                        time[time.length()] = 0x3e;
                        time.insert(0,0x3c);
                        UdpSend(time);
                        break;
                    }
                    case 0x59://write time
                    {
                        QProcess::execute("cp /opt/config/user.conf /opt/config/backupParameter.conf");
                        break;
                    }
                    case 0x50://restart
                    {
                        qDebug()<<"reboot";
                        char mydata[] = {0x3c,0x50,0x00,0x00,0x50,0x3e};
                        QByteArray senddata = QByteArray::fromRawData(mydata, sizeof(mydata));
                        UdpSend(senddata);
                        #if ARM_LINUX
                        QProcess::execute("reboot");
                        #endif
                        break;
                    }
                    case 0x60://备份参数
                    {
                        qDebug() << "backup parameter";
                        char mydata[]={0x3c,0x60,0x00,0x00,0x60,0x3e};
                        QByteArray senddata = QByteArray::fromRawData(mydata, sizeof(mydata));
                        UdpSend(senddata);
                        QProcess::execute("cp /opt/config/user.conf /opt/config/backupParameter.conf");
                        QProcess::execute("sync");
                        break;
                    }
                    case 0x70://write wave check
                    {
                        char mydata[] = {0x3c,0x70,0x00,0x01,0x01,0x70,0x3e};
                        QByteArray senddata = QByteArray::fromRawData(mydata, sizeof(mydata));
                        UdpSend(senddata);
                        break;
                    }
                    case 0x7a://write new wav 音频文件
                    {
                        QString wavname;
                        wavname = SOUND_FILEPATH;
                        bool ok;
                        quint64 language = qs->value("Language",1).toInt(&ok);
                        if(!ok)
                        {
                            language = 1;
                        }
                        switch(language)
                        {
                        case 1:
                        {
                            QDir wavnameDir;
                            QString strTemp = SOUND_FILEPATH;
                            strTemp.append("Cn/");
                            wavnameDir.setPath(strTemp);
                            if(wavnameDir.exists())
                            {
                                wavname.append("Cn/");
                            }
                            break;
                        }
                        case 2:
                            wavname.append("En/");
                            break;
                        case 3:
                            wavname.append("Fr/");
                            break;
                        default:
                            language = 1;
                            wavname.append("Cn/");
                            break;
                        }
                        QDir wavnameDir;
                        wavnameDir.setPath(wavname);
                        if(!wavnameDir.exists())
                        {
                            QString strTemp = "mkdir -p ";
                            strTemp.append(wavname);
                            emit TicketDebug(strTemp);
                            QProcess::execute(strTemp);
                            QProcess::execute("sync");
                        }

                        wavname.append(QString("%1.wav").arg((quint8)buf.data()[6]));

                        if((quint8)buf.data()[5] == 0x01)//first
                        {
                            qDebug()<<"write wavfile begin";
                            WavFile = new QFile(wavname);
                            if(WavFile == NULL)
                            {
                                qDebug()<<"WavFile is NULL!";
                                return ;
                            }
                            if(!WavFile->open(QFile::WriteOnly))
                            {
                                qDebug()<<"open wav file err";
                                return;
                            }
                        }
                        WavFile->write(buf.mid(7,buf.length()-9));
                        if((quint8)buf.data()[5] == (quint8)buf.data()[4])//end
                        {
                            qDebug()<<"write program file over";
                            WavFile->close();
                        }
                        delete WavFile;
                        char mydata[] = {0x3c,0x7a,0x00,0x01,0x01,0x7a,0x3e};
                        QByteArray senddata = QByteArray::fromRawData(mydata, sizeof(mydata));
                        UdpSend(senddata);
                        break;
                    }
                    case 0x71://write the background picture 图像文件
                    {
                        if((quint8)buf.data()[5] == 0x01)//first
                        {
                            qDebug()<<"write background picture begin";
                            PicFile = new QFile(BGPIX_FILEPATH);
                            if(PicFile == NULL)
                            {
                                qDebug()<<"PicFile is NULL!";
                                return ;
                            }
                            if(!PicFile->open(QFile::WriteOnly))
                            {
                                qDebug()<<"open pic file err";
                                return;
                            }
                        }
                        if(!PicFile->isOpen())
                        {
                            qDebug()<<"pic file not open";
                            return;
                        }

                        PicFile->write(buf.mid(6,buf.length()-8));
                        if((quint8)buf.data()[5] == (quint8)buf.data()[4])//end
                        {
                            qDebug()<<"write background picture over";
                            PicFile->close();
                        }
                        delete PicFile;
                        char mydata[] = {0x3c,0x71,0x00,0x01,0x01,0x71,0x3e};
                        QByteArray senddata = QByteArray::fromRawData(mydata, sizeof(mydata));
                        UdpSend(senddata);
                        break;
                    }
                    case 0x72://write the user program 程序文件
                    {
                        QString ufilename = QString("/usr/sendinfo/ticket-updata");

                        if((quint8)buf.data()[5] == 0x01)//first
                        {
                            qDebug()<<"updata program begin";
                            UserFile = new QFile(ufilename);
                            if(UserFile == NULL)
                            {
                                qDebug()<<"UserFile is NULL!";
                                return ;
                            }
                            if(!UserFile->open(QFile::WriteOnly))
                            {
                                qDebug()<<"open program file err";
                                return;
                            }
                        }
                        UserFile->write(buf.mid(6,buf.length()-8));
                        if((quint8)buf.data()[5] == (quint8)buf.data()[4])//end
                        {
                            char mydata[] = {0x3c,0x72,0x00,0x01,0x01,0x72,0x3e};
                            QByteArray senddata = QByteArray::fromRawData(mydata, sizeof(mydata));
                            UdpSend(senddata);
                            qDebug()<<"write program file over";
                            UserFile->close();
                            qDebug()<<"updata program end";
                            delete UserFile;
                            QProcess::execute("rm -f /usr/sendinfo/ticket");
                            QProcess::execute("cp /usr/sendinfo/ticket-updata /usr/sendinfo/ticket");
                            QProcess::execute("chmod 777 /usr/sendinfo/ticket");
                            QProcess::execute("reboot");
                        }
                        char mydata[] = {0x3c,0x72,0x00,0x01,0x01,0x72,0x3e};
                        QByteArray senddata = QByteArray::fromRawData(mydata, sizeof(mydata));
                        UdpSend(senddata);
                        break;
                    }

                    case 0xfc://读主板序列号
                    {
                         QByteArray udpdata;
                         udpdata.resize(0);
                         char i;
                         str = qs->value("P18_DevSnr","31 32 33 34 35 36 37 38").toString();
                         str = BgComm::FormatString(str, 2, QChar(' '));
                         udpdata = BgComm::StringToByteArray(str, 16, QChar(' '));
                         if(udpdata.length()<8)
                         {
                             for(i=udpdata.length();i<8;i++)
                             {
                                 udpdata[i]=0;
                             }
                         }
                         udpdata += BgComm::XORVerify(udpdata);
                         udpdata[udpdata.length()] = 0xfc;
                         udpdata[udpdata.length()] = 0x3e;
                         udpdata.insert(0,0xfc);
                         udpdata.insert(0,0x3c);
                         UdpSend(udpdata);
                         break;
                    }
                    case 0xfb://写主板序列号
                    {
                        mutex.lock();
                        qs->setValue("P18_DevSnr",BgComm::ByteArrayToString(buf.mid(4,8)));
                        qs->setValue("ctime",BgComm::ByteArrayToString(buf.mid(12,4)));
                        mutex.unlock();
                        char mydata[] = {0x3c,0xfb,0x00,0x00,0xfb,0x3e};
                        QByteArray senddata = QByteArray::fromRawData(mydata, sizeof(mydata));
                        UdpSend(senddata);
                        break;
                    }


                    case 0xee://check udppasswd
                    {

                        QString udpPassword;
                        udpPassword = BgComm::ByteArrayToString(buf.mid(4,8));
                        QString tmp_PassWord = qs->value("UDPPassWord","71412E2299B0EEA5").toString();
                        //qDebug()<<"[local passwd] = "<<tmp_PassWord;
                        //qDebug()<<"[server passwd] = "<<udpPassword;
                        if(tmp_PassWord != udpPassword)
                        {//密钥错误
                            char mydata3[] = {0x3c,0xff,0xff,0xff,0xff,0x3e};
                            QByteArray senddata3 = QByteArray::fromRawData(mydata3, sizeof(mydata3));
                            UdpSend(senddata3);
                            return;
                        }
                        char mydata3[] = {0x3c,0xee,0x00,0x00,0xee,0x3e};
                        QByteArray senddata3 = QByteArray::fromRawData(mydata3, sizeof(mydata3));
                        UdpSend(senddata3);
                        break;
                    }
                    case 0xff://write udppasswd
                    {
                        qs->setValue("UDPPassWord",BgComm::ByteArrayToString(buf.mid(4,8)));
                        char mydata3[] = {0x3c,0xff,0x00,0x00,0xff,0x3e};
                        QByteArray senddata3 = QByteArray::fromRawData(mydata3, sizeof(mydata3));
                        UdpSend(senddata3);
                        break;
                    }
                    default:
                        break;
                }
            }
            else
            {
                QString picname = BGPIX_FILEPATH;
                if(((quint8)buf.data()[0] == 0x3c)&&((quint8)buf.data()[1] == 0x71)&&(PicFlag == 0))
                {
                    PicBuf = buf;
                    PicFlag = 1;
                }
                else if(PicFlag)
                {
                    PicBuf += buf;
                    if(PicBuf.length() != ((quint8)PicBuf.data()[2]*256+(quint8)PicBuf.data()[3]))
                    {
                        return;
                    }
                    PicFlag = 0;
                    picname = BGPIX_FILEPATH;

                    if((quint8)PicBuf.data()[5] == 0x01)//first
                    {
                        PicFile = new QFile(picname);
                        if(PicFile == NULL)
                        {
                            qDebug()<<"PicFile is NULL!";
                            return ;
                        }
                        if(!PicFile->open(QFile::WriteOnly))
                        {
                            qDebug()<<"open pic file err";
                            return;
                        }
                    }
                    PicFile->write(PicBuf.mid(6,PicBuf.length()-7));
                    if((quint8)PicBuf.data()[5] == (quint8)PicBuf.data()[5])//end
                    {
                        PicFile->close();
                    }
                    delete PicFile;
                    char mydata[] = {0x3c,0x71,0x00,0x01,0x01,0x71,0x3e};
                    QByteArray senddata = QByteArray::fromRawData(mydata, sizeof(mydata));
                    UdpSend(senddata);
                    break;
                }
            }
        }
        else
        {
            char mydata[] = {0x3c,0x01,0x00,0x03,0x45,0x52,0x52,0x47,0x3e};
            QByteArray senddata = QByteArray::fromRawData(mydata, sizeof(mydata));
            UdpSend(senddata);
            udpMessageHandler(0xa1, buf);
        }
    }
}

void UdpThread::UdpSend(QByteArray buf)
{
    emit TicketDebug("udp send :"+BgComm::ByteArrayToString(buf, 16, true));
    udpSocket->writeDatagram(buf.data(),buf.size(),
                                 UdpRecvAddr,UdpRecvPort);
}
void UdpThread::saveUserBack()
{
    QProcess::execute("cp /opt/config/user.conf /opt/config/backupParameter.conf");
    QProcess::execute("sync");
}
bool UdpThread::event(QEvent *event)
{
    if(event->type() == QEvent::User)
    {
        UserEvent * ue = static_cast<UserEvent *>(event);
        switch(ue->userType)
        {
            case CR::backuppara:
                saveUserBack();
                break;
            default:
                return false;
        }
    }
    else
    {
        return QThread::event(event);
    }
    return true;
}

void UdpThread::MessageMapInit()
{
    MessageMap.insert(PE9FtpPort, "PE9_FtpPort");
    MessageMap.insert(PE5FtpServerIp, "PE5_FtpServerIp");
    MessageMap.insert(PC0Language, "PC0_Language");
    MessageMap.insert(P00ValueLeft, "P00_ValueLeft");
    MessageMap.insert(P01ValueRight, "P01_ValueRight");
    MessageMap.insert(P02DebugEnable, "P02_DebugEnable");
    MessageMap.insert(P03OnLineUse, "P03_OnLineUse");
    MessageMap.insert(P04DisplayType, "P04_DisplayType");
    MessageMap.insert(P05GateMode, "P05_GateMode");
    MessageMap.insert(P06GateType, "P06_GateType");
    MessageMap.insert(P07GateComType, "P07_GateComType");
    MessageMap.insert(P08ClientNo, "P08_ClientNo");
    MessageMap.insert(P10ProgramVer, "P10_ProgramVer");
    MessageMap.insert(P18DevSnr, "P18_DevSnr");
    MessageMap.insert(P20CheckTicketMode, "P20_CheckTicketMode");
    MessageMap.insert(P21GroupInsertEnable, "P21_GroupInsertEnable");
    MessageMap.insert(P22PartNoGuid, "P22_PartNoGuid");
    MessageMap.insert(P23GateNo, "P23_GateNo");
    MessageMap.insert(P24CheckTicketType, "P24_CheckTicketType");
    MessageMap.insert(P28ImageDisGapTime, "P28_ImageDisGapTime");
    MessageMap.insert(P29ShowTime, "P29_ShowTime");
    MessageMap.insert(P2aCheckNetTime, "P2a_CheckNetTime");
    MessageMap.insert(P2bCheckTicketGapTime, "P2b_CheckTicketGapTime");
    MessageMap.insert(P30Mac, "P30_Mac");
    MessageMap.insert(P40HostIp, "P40_HostIp");
    MessageMap.insert(P44NetMask, "P44_NetMask");
    MessageMap.insert(P48GetwayIp, "P48_GetwayIp");
    MessageMap.insert(P4CDNS, "P4C_DNS");
    MessageMap.insert(P50ServerIp, "P50_ServerIp");
    MessageMap.insert(P54ServerPort, "P54_ServerPort");
    MessageMap.insert(P56ReServerEnable, "P56_ReServerEnable");
    MessageMap.insert(P57ReServerIp, "P57_ReServerIp");
    MessageMap.insert(P5bReServerPort, "P5b_ReServerPort");
    MessageMap.insert(P5dHttpPort, "P5d_HttpPort");
    MessageMap.insert(P70RfidEnable, "P70_RfidEnable");
    MessageMap.insert(P71RfidDevType, "P71_RfidDevType");
    MessageMap.insert(P72RfidTicketType, "P72_RfidTicketType");
    MessageMap.insert(P73RfidMoneyEnable, "P73_RfidMoneyEnable");
    MessageMap.insert(P74IdCardEnable, "P74_IdCardEnable");
    MessageMap.insert(P75IdCardType, "P75_IdCardType");
    MessageMap.insert(P76IcPassword, "P76_IcPassword");
    MessageMap.insert(P90BarcodeEnable, "P90_BarcodeEnable");
    MessageMap.insert(P91BarcodeDevType, "P91_BarcodeDevType");
    MessageMap.insert(P92BarcodeTicketType, "P92_BarcodeTicketType");
    MessageMap.insert(P93BarcodeBaud, "P93_BarcodeBaud");
    MessageMap.insert(P94BarcodeHead, "P94_BarcodeHead");
    MessageMap.insert(P95BarcodeEndLen, "P95_BarcodeEndLen");
    MessageMap.insert(P96BarcodeEndData, "P96_BarcodeEndData");
    MessageMap.insert(Pb0FingerEnable, "Pb0_FingerEnable");
    MessageMap.insert(Pb1FingerDevType, "Pb1_FingerDevType");
    MessageMap.insert(Pb2FingerInTimes, "Pb2_FingerInTimes");
    MessageMap.insert(Pb3FingerInTime, "Pb3_FingerInTime");
    MessageMap.insert(Pb4FingerInGrade, "Pb4_FingerInGrade");
    MessageMap.insert(Pb5FingerMatchTime, "Pb5_FingerMatchTime");
    MessageMap.insert(Pb6FingerMatchGrade, "Pb6FingerMatchGrade");
    MessageMap.insert(Pd0WifiSsid, "Pd0_WifiSsid");
    MessageMap.insert(PdaWifiPassword, "Pda_WifiPassword");
}
void UdpThread::udpMessageHandler(quint8 type, QByteArray msg)
{
    QString txt;
    QString msgstr;

    txt = QDateTime::currentDateTime().toString("yyyy-MM-dd hh:mm:ss:zzz ");
#if UDPENCRYPT == ENCRYPT
    quint8 i;
    QTextCodec *codec;
    codec = QTextCodec::codecForName("UTF-8");
    for(i=0;i<usrNameArry.size();i++)
    {
        if((quint8)usrNameArry.data()[i] != 0x00)
        {
            txt += codec->toUnicode(usrNameArry.mid(i, usrNameArry.size()-i)) +" ";
            break;
        }
    }
#endif

    msgstr = BgComm::ByteArrayToString(msg, 16, true);
    switch (type) {
        //Communication test
    case 0x54:
        txt += QString("Communication test");
        break;
        //Write wav
    case 0x56:
    {
        QString wavname;
        wavname = SOUND_FILEPATH;
        wavname.append(QString("%1.wav").arg((quint8)msg.data()[4]));
        txt += QString("Write old ") + wavname;
        break;
    }
        //Write parameter
    case 0x57:
    {
        quint16 len = ((quint8)msg.data()[2])*256 + (quint8)msg.data()[3];
        QByteArray reg;
        QByteArray dat;

        for(quint8 i=0;i<(len/2);i++)
        {
            reg[i] = (quint8)msg.data()[4+i*2];
            dat[i] = (quint8)msg.data()[4+i*2+1];
        }

        QMap<quint8, QString>::iterator mi;
        mi = MessageMap.find((quint8)reg.at(0));
        if(mi != MessageMap.end())
        {
            txt += QString("Write parameter: ") + QString::number(mi.key(), 16) + "-" + mi.value() +"=";
            switch(mi.key())
            {
                case P00ValueLeft:
                    txt += QString::number((quint8)dat.at(0));
                    txt += ", " + QString::number(P01ValueRight, 16) + "-P01ValueRight=" +QString::number((quint8)dat.at(1));
                    break;
                case P08ClientNo:
                case P2bCheckTicketGapTime:
                case P54ServerPort:
                case P5bReServerPort:
                case P5dHttpPort:
                case PE9FtpPort:
                    txt += QString::number(((quint8)dat.at(0)<<8) + (quint8)dat.at(1));
                    break;
                case P10ProgramVer:
                case P18DevSnr:
                case Pd0WifiSsid:
                case PdaWifiPassword:
                    txt += BgComm::ByteArrayToString(dat, 16, true);
                    break;
                case P22PartNoGuid:
                case P76IcPassword:
                case P96BarcodeEndData:
                    txt += BgComm::ByteArrayToString(dat, 16, true);
                    break;
                case P24CheckTicketType:
                    txt += QString::number(((quint8)dat.at(0)<<16) + ((quint8)dat.at(1)<<8) + (quint8)dat.at(2));
                    break;
                case P30Mac:
                    txt += BgComm::ByteArrayToString(dat, 16, true, QChar(':'));
                    break;
                case P40HostIp:
                case P44NetMask:
                case P48GetwayIp:
                case P4CDNS:
                case P50ServerIp:
                case P57ReServerIp:
                case PE5FtpServerIp:
                    txt += BgComm::ByteArrayToString(dat, 10, true, QChar('.'));
                    break;
                default:
                    txt += QString::number((quint8)dat.at(0));
                    break;
            }
        }
        else
        {
            txt += QString("Write parameter: ") + BgComm::ByteArrayToString(reg) + QString("=") + BgComm::ByteArrayToString(dat);
        }
        qDebug()<<txt;
        break;
    }
        //Read parameter
    case 0x52:
        txt += QString("Read parameter");
        break;
        //Read time
    case 0x5A:
        txt += QString("Read time");
        break;
        //Write time
    case 0x59:
        txt += QString("Write time: ") + msgstr;
        break;
        //Restart
    case 0x50:
        txt += QString("Restart");
        break;
        //Backup parameters
    case 0x60:
        txt += QString("Backup parameters");
        break;
        //Write new wav check
    case 0x70:
    {
        txt += QString("Write new wav check ok");
        break;
    }
        //Write new wav
    case 0x7a:
    {
        QString wavname;
        wavname = SOUND_FILEPATH;
        bool ok;
        quint64 language = qs->value("Language",1).toInt(&ok);
        if(!ok)
        {
            language = 1;
        }
        switch(language)
        {
        case 1:
        {
            QDir putDir;
            QString strTemp = SOUND_FILEPATH;
            strTemp.append("Cn/");
            putDir.setPath(strTemp);
            if(putDir.exists())
            {
                wavname.append("Cn/");
            }
            break;
        }
        case 2:
            wavname.append("En/");
            break;
        case 3:
            wavname.append("Fr/");
            break;
        default:
            language = 1;
            wavname.append("Cn/");
            break;
        }
        wavname.append(QString("%1.wav").arg((quint8)msg.data()[6]));
        txt += QString("Write ") + wavname;
        txt += QString(" Total frame:%1 ").arg((quint8)msg.data()[4]) + QString("Current frame:%1 ").arg((quint8)msg.data()[5]);
        break;
    }
        //Write picture
    case 0x71:
        txt += QString("Write the background picture");
        break;
        //Write program
    case 0x72:
        txt += QString("Write the user program");
        break;
        //Read serial number
    case 0xfc:
        txt += QString("Read serial number: ") + msgstr;
        break;
        //Write serial number
    case 0xfb:
        txt += QString("Write serial number: ") + msgstr;
        break;
        //Check udppasswd
    case 0xee:
        txt += QString("Check udppasswd: ") + msgstr;
        break;
        //Write udppasswd
    case 0xff:
        txt += QString("Write udppasswd: ") + msgstr;
        break;
        //udppasswd err
    case 0xa0:
        txt += QString("udppasswd err: ") + msgstr;
        break;
        //crc err
    case 0xa1:
        txt += QString("crc err: ") + msgstr;
        break;
        //no usrname
    case 0xa2:
        txt += QString("no usrname: ") + msgstr;
        break;
    default:
        txt += QString("Unknown command --> command: ") + msgstr;
        break;
    }

    QString path = PUDPLOG_FILEPATH;
    QDir logDir;
    logDir.setPath(path);
    if(!logDir.exists())
    {
        QString cmdstr = "mkdir -p ";
        cmdstr.append(path);
        emit TicketDebug(cmdstr);
        QProcess::execute(cmdstr);
        QProcess::execute("sync");
    }

    logDir.setFilter(QDir::Files);
    logDir.setSorting(QDir::Name);

    QFileInfoList flieInfoList = logDir.entryInfoList();
    quint16 cnt = flieInfoList.size();

    if(cnt > UDPLOGMAXCNT)
    {
        QFileInfo fileInfo = flieInfoList.at(0);
        QString cmdstr = "rm ";
        cmdstr.append(PUDPLOG_FILEPATH);
        cmdstr.append(fileInfo.fileName());
        emit TicketDebug(cmdstr);
        QProcess::execute(cmdstr);
        QProcess::execute("sync");
    }

    path += "udp.set.";
    path += QDate::currentDate().toString("yyyyMMdd");
    QFile outFile(path);
    outFile.open(QIODevice::WriteOnly | QIODevice::Append);
    QTextStream ts(&outFile);
    ts << txt << endl;
}
