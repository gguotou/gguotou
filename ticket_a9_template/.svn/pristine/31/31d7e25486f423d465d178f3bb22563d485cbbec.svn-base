#include "SoundDevice.h"

SoundDevice::SoundDevice(QObject *parent)
{
    moveToThread(this);
    m_bStop = true;

    /*
    //sample_formats[]={SND_PCM_FORMAT_U8, SND_PCM_FORMAT_S16_LE, SND_PCM_FORMAT_S24_LE};
    sample_formats[0]= SND_PCM_FORMAT_U8;
    sample_formats[1]= SND_PCM_FORMAT_S16_LE;
    sample_formats[2]= SND_PCM_FORMAT_S24_LE;
    */
    stream = SND_PCM_STREAM_PLAYBACK;
    read_length = 0;

    NewPlayFlag = 0;
    playingFlag = 0;
    emit soundplayFlag(0);

    device = "default";
    if ((err = snd_pcm_open (&playback_handle, device, stream, 0)) < 0) {
        fprintf (stderr, "cannot open audio device (%s)(%d)\n",
                 snd_strerror (err),err);
        //QProcess::execute("reboot");
    }
    snd_pcm_drain(playback_handle);
    snd_pcm_close (playback_handle);
}

SoundDevice::~SoundDevice()
{
    // TODO Auto-generated destructor stub
}
void SoundDevice::run()
{
    while(1)
    {
        //while((read_length)||(NewPlayFlag == 1))
        while(read_length)
        {
            memset(buffer, 0, dataSizeIn20ms);
            read_length = fread(buffer, 1, dataSizeIn20ms, fp_wav);

            if(read_length) {
                /* Write some junk data to produce sound. */
                err = snd_pcm_writei (playback_handle, buffer, read_length/wav_header.wBlockAlign);
                //qDebug()<<QDateTime::currentDateTime().toString("hh:mm:ss.zzz ")+"read_length = "+QString::number(read_length)+", snd_pcm_writei = "+QString::number(err);
                if (err < 0) {
                    usleep(1000);
                    if(err == -EPIPE) {
                        if ((err = snd_pcm_prepare (playback_handle)) < 0) {
                            fprintf (stderr, "cannot prepare audio interface for use (%s)(%d)\n",
                                     snd_strerror (err),err);
                            // exit (1);
                            read_length = 0;
                            snd_pcm_drain(playback_handle);
                            snd_pcm_close (playback_handle);
                            free (buffer);
                            fclose(fp_wav);
                            playingFlag = 0;
                            emit soundplayFlag(0);
                            break;
                        }
                    }
                    else {
                        fprintf (stderr, "write to audio interface failed (%s)(%d)\n",
                                 snd_strerror (err),err);
                        // exit (1);
                        read_length = 0;
                        snd_pcm_drain(playback_handle);
                        snd_pcm_close (playback_handle);
                        free (buffer);
                        fclose(fp_wav);
                        playingFlag = 0;
                        emit soundplayFlag(0);
                        break;
                    }
                }
                if(err != (read_length/wav_header.wBlockAlign))
                {
                    fprintf(stderr, "write to audio date not same!!!\n");
                    // exit (1);
                    read_length = 0;
                    snd_pcm_drain(playback_handle);
                    snd_pcm_close (playback_handle);
                    free (buffer);
                    fclose(fp_wav);
                    playingFlag = 0;
                    emit soundplayFlag(0);
                    break;
                }
            }
            else
            {
                read_length = 0;
                snd_pcm_drain(playback_handle);
                snd_pcm_close (playback_handle);
                free (buffer);
                fclose(fp_wav);
                playingFlag = 0;
                emit soundplayFlag(0);
            }
        }

        while(NewPlayFlag == 1)
        {
            if(playingFlag)
            {
                qDebug()<<"------------------------Sound Playing---------------------------";
                break;
            }
            NewPlayFlag = 0;

            playingFlag = 1;
            emit soundplayFlag(1);

            device = "default";

            char *s_file = (char *) m_strFileName.toStdString().c_str(); /*file hold sound data */
            fp_wav = fopen(s_file,"rb");
            if(fp_wav == NULL) {
                fprintf (stderr, "cannot open wav file \n");
                playingFlag = 0;
                emit soundplayFlag(0);
                read_length = 0;
                exit(0);
                break;
            }
            else
            {
                errTime = 0;
                while(errTime < 3)
                {
                    //read_length = fread(&wav_header, 1, sizeof(wav_header), fp_wav);
                    /* Open PCM. The last parameter of this function is the mode. */
                    if ((err = snd_pcm_open (&playback_handle, device, stream, 0)) < 0) {
                        fprintf (stderr, "cannot open audio device (%s)(%d)\n",
                                 snd_strerror (err),err);
                        // exit (1);
                        read_length = 0;
                        if(err != -16)
                        {
                            snd_pcm_drain(playback_handle);
                            snd_pcm_close(playback_handle);
                        }
                        //free (buffer);
                        //fclose(fp_wav);
//                        playingFlag = 0;
//                        emit soundplayFlag(0);
//                        break;
                        errTime++;
                        msleep(10);
                    }
                    else
                    {
                        errTime = 5;
                    }
                }
                if(errTime < 5)
                {
                    errTime = 0;
                    playingFlag = 0;
                    emit soundplayFlag(0);
                    break;
                }

                read_length = fread(&wav_header, 1, sizeof(wav_header), fp_wav);

                /* Allocate the snd_pcm_hw_params_t structure on the stack. */
                if ((err = snd_pcm_hw_params_malloc (&hw_params)) < 0) {
                    fprintf (stderr, "cannot allocate hardware parameter structure (%s)\n",
                             snd_strerror (err));
                    //exit (1);
                    read_length = 0;
                    snd_pcm_drain(playback_handle);
                    snd_pcm_close (playback_handle);
                    free (buffer);
                    fclose(fp_wav);
                    playingFlag = 0;
                    emit soundplayFlag(0);
                    break;
                }

                /* Init hwparams with full configuration space */
                if ((err = snd_pcm_hw_params_any (playback_handle, hw_params)) < 0) {
                    fprintf (stderr, "cannot initialize hardware parameter structure (%s)\n",
                             snd_strerror (err));
                    //exit (1);
                    read_length = 0;
                    snd_pcm_drain(playback_handle);
                    snd_pcm_close (playback_handle);
                    free (buffer);
                    fclose(fp_wav);
                    playingFlag = 0;
                    emit soundplayFlag(0);
                    break;

                }

                /* Set access type. */
                if ((err = snd_pcm_hw_params_set_access (playback_handle, hw_params, SND_PCM_ACCESS_RW_INTERLEAVED)) < 0) {
                    fprintf (stderr, "cannot set access type (%s)\n",
                             snd_strerror (err));
                    //exit (1);
                    read_length = 0;
                    snd_pcm_drain(playback_handle);
                    snd_pcm_close (playback_handle);
                    free (buffer);
                    fclose(fp_wav);
                    playingFlag = 0;
                    emit soundplayFlag(0);
                    break;
                }

                /* Set sample format */
                switch(wav_header.wBitsPerSample/8-1)
                {
                case 0:
                {
                    if ((err = snd_pcm_hw_params_set_format (playback_handle, hw_params, SND_PCM_FORMAT_U8)) < 0) {
                        fprintf (stderr, "cannot set sample format (%s)\n",
                                 snd_strerror (err));
                        //exit (1);
                        read_length = 0;
                        snd_pcm_drain(playback_handle);
                        snd_pcm_close (playback_handle);
                        free (buffer);
                        fclose(fp_wav);
                        playingFlag = 0;
                        emit soundplayFlag(0);
                        break;
                    }
                    break;
                }
                case 1:
                {
                    if ((err = snd_pcm_hw_params_set_format (playback_handle, hw_params, SND_PCM_FORMAT_S16_LE)) < 0) {
                        fprintf (stderr, "cannot set sample format (%s)\n",
                                 snd_strerror (err));
                        //exit (1);
                        read_length = 0;
                        snd_pcm_drain(playback_handle);
                        snd_pcm_close (playback_handle);
                        free (buffer);
                        fclose(fp_wav);
                        playingFlag = 0;
                        emit soundplayFlag(0);
                        break;
                    }
                    break;
                }
                case 2:
                {
                    if ((err = snd_pcm_hw_params_set_format (playback_handle, hw_params, SND_PCM_FORMAT_S24_LE)) < 0) {
                        fprintf (stderr, "cannot set sample format (%s)\n",
                                 snd_strerror (err));
                        //exit (1);
                        read_length = 0;
                        snd_pcm_drain(playback_handle);
                        snd_pcm_close (playback_handle);
                        free (buffer);
                        fclose(fp_wav);
                        playingFlag = 0;
                        emit soundplayFlag(0);
                        break;
                    }
                    break;
                }
                }
                /* Set sample rate. If the exact rate is not supported */
                /* by the hardware, use nearest possible rate.         */
                exact_rate = wav_header.nSamplesPersec;
                if ((err = snd_pcm_hw_params_set_rate_near (playback_handle, hw_params, &exact_rate, 0)) < 0) {
                    fprintf (stderr, "cannot set sample rate (%s)\n",
                             snd_strerror (err));
                    //exit (1);
                    read_length = 0;
                    snd_pcm_drain(playback_handle);
                    snd_pcm_close (playback_handle);
                    free (buffer);
                    fclose(fp_wav);
                    playingFlag = 0;
                    emit soundplayFlag(0);
                    break;
                }
                if (wav_header.nSamplesPersec != exact_rate) {
                    fprintf(stderr, "The rate %d Hz is not supported by your hardware.\n"
                            "==> Using %d Hz instead.\n", wav_header.nSamplesPersec, exact_rate);
                }

                /* Set number of channels */
                if ((err = snd_pcm_hw_params_set_channels (playback_handle, hw_params, wav_header.wChannels)) < 0) {
                    fprintf (stderr, "cannot set channel count (%s)\n",
                             snd_strerror (err));
                    //exit (1);
                    snd_pcm_drain(playback_handle);
                    snd_pcm_close (playback_handle);
                    free (buffer);
                    fclose(fp_wav);
                    playingFlag = 0;
                    emit soundplayFlag(0);
                    break;
                }

                /* Apply HW parameter settings to PCM device and prepare device  */
                if ((err = snd_pcm_hw_params (playback_handle, hw_params)) < 0) {
                    fprintf (stderr, "cannot set parameters (%s)\n",
                             snd_strerror (err));
                    //exit (1);
                    snd_pcm_drain(playback_handle);
                    snd_pcm_close (playback_handle);
                    free (buffer);
                    fclose(fp_wav);
                    playingFlag = 0;
                    emit soundplayFlag(0);
                    break;
                }

                snd_pcm_hw_params_free (hw_params);

                if ((err = snd_pcm_prepare (playback_handle)) < 0) {
                    fprintf (stderr, "cannot prepare audio interface for use (%s)\n",
                             snd_strerror (err));
                    //exit (1);
                    read_length = 0;
                    snd_pcm_drain(playback_handle);
                    snd_pcm_close (playback_handle);
                    free (buffer);
                    fclose(fp_wav);
                    playingFlag = 0;
                    emit soundplayFlag(0);
                    break;
                }

                dataSizeIn20ms = exact_rate * wav_header.wBlockAlign / 50;
                // printf("dataSizeIn20ms = %d\n",dataSizeIn20ms);

                buffer =(char*)malloc(dataSizeIn20ms);

                /* seek to the sound data position */
                fseek(fp_wav, sizeof(wav_header), SEEK_SET);
            }
        }
        msleep(1);
    }
    exit (0);
}

void SoundDevice::playSound(QString name)
{
    m_strFileName = name;
    NewPlayFlag = 1;
}
void SoundDevice::SetVol(quint8 vol)
{
}

int OpenDevice(const char *dev_name, unsigned int flag)
{
}

int CloseDevice(unsigned int dev_fd)
{
    return (close(dev_fd));
}

int OpenFile(const char *file_name, unsigned int flag)
{
}

int CloseFile(unsigned int file_fd)
{
}

int SoundDevice::SetFormat(unsigned int bits, unsigned int chn,
                           unsigned int hz)
{
}
//结束播放或录音
void SoundDevice::stop()
{
    m_bStop = true;
}
