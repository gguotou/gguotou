#include "facedetect.h"

FaceDetect::FaceDetect(QObject *parent) :
    QThread(parent)
{

    QString comStr = FACEDETECTCOM;
    if(comStr.indexOf("ttymxc")>=0)
        IsComOnboardFlag = 1;
    else
        IsComOnboardFlag = 0;
    if(IsComOnboardFlag)
    {
        fp = open(FACEDETECTCOM,O_RDWR|O_NOCTTY|O_NDELAY); //打开串口0读写 //以非阻塞模式打开串口//O_NDELAY 等价于 O_NOBLOCK
        if(fp == -1)
        {
            qDebug()<<QString("open %1 err").arg(FACEDETECTCOM);
            comOpenErr = 1;
            return;
        }
    }
    else
    {
        myCom = new Posix_QextSerialPort(FACEDETECTCOM,QextSerialBase::Polling);
        myCom->open(QIODevice::ReadWrite);
    }
    comOpenErr = 0;
    fm = this->parent();

    FaceHeartTimer = new QTimer(this);
    connect(FaceHeartTimer,SIGNAL(timeout()),this,SLOT(FaceHeartTimerOut()));

    facedeverrtimes=0;
    facedeverrflag=1;

}
void FaceDetect::CloseCom()
{
    if(IsComOnboardFlag)
        close(fp);
    else
        myCom->close();
}
void FaceDetect::QuitFlag()
{
    quit_flag =1;
}
void FaceDetect::SendBuf(QByteArray buf)
{

    if(comOpenErr)return;
    if(IsComOnboardFlag)
    {
        char *message;
        message = buf.data();
        write(fp, message, buf.size());
    }
    else
    {
        myCom->write(buf);
    }

}

QByteArray FaceDetect::ReadMyCom()
{
    if(comOpenErr)return 0;
    if(IsComOnboardFlag)
    {
        QByteArray temp;
        timeval tv;
        int nread;
        fd_set rfds;
        char buff[512];

        int i=0;

        int readFlag = 0;
        bool dataFlag = 0;
        temp.resize(0);

        while(1)
        {
            tv.tv_sec=0;
            tv.tv_usec=500;
            FD_ZERO(&rfds);
            FD_SET(fp, &rfds);

            readFlag = select(1+fp, &rfds, NULL, NULL, &tv);
            if (readFlag > 0)
            {
                dataFlag = 1;
                if (FD_ISSET(fp, &rfds))
                {
                    nread = read(fp, buff, 512);

                    for(i=0;i<nread;i++)
                    {
                        temp[temp.length()] = buff[i];
                    }
                }
            }
            if((readFlag == 0)&&dataFlag)
            {
                dataFlag = 0;
                return temp;
            }
            msleep(5);
        }
        return temp;
    }
    else
    {
        QByteArray temp;
        QByteArray buf;
        bool readflag = 0;
        while(1)
        {
            buf = myCom->readAll();
            if(buf.isEmpty() && (readflag == 0))
            {
            }
            else if((!buf.isEmpty()) && (readflag))
            {
                temp += buf;
                readflag = 1;
            }
            else if((!buf.isEmpty()) && (readflag == 0))
            {
                temp = buf;
                readflag = 1;
            }
            else if(buf.isEmpty() && readflag)
            {
                return temp;
            }
            msleep(5);
        }
        return temp;
    }
}
void FaceDetect::run()
{
    quit_flag =0;
    QByteArray temp;
    if(comOpenErr)return;
    if(IsComOnboardFlag)
    {
        struct termios options;

        tcgetattr(fp,&options);
        //设置波特率
        switch(0x04)
        {
            case 0x00://BAUD4800
                cfsetispeed(&options,B4800);
                cfsetospeed(&options,B4800);
                break;
            case 0x01://BAUD9600
                cfsetispeed(&options,B9600);
                cfsetospeed(&options,B9600);
                break;
            case 0x02://BAUD38400
                cfsetispeed(&options,B38400);
                cfsetospeed(&options,B38400);
                break;
            case 0x03://BAUD57600
                cfsetispeed(&options,B57600);
                cfsetospeed(&options,B57600);
                break;
            case 0x04://BAUD115200
                cfsetispeed(&options,B115200);
                cfsetospeed(&options,B115200);
                break;
            default://BAUD9600
                cfsetispeed(&options,B9600);
                cfsetospeed(&options,B9600);
                break;
        }
        options.c_cflag |= (CLOCAL|CREAD);

        options.c_lflag  &= ~(ICANON | ECHO | ECHOE | ISIG);  /*Input*/
        options.c_oflag  &= ~OPOST;   /*Output*/
        options.c_iflag  &= ~(ICRNL|IXON);

        tcsetattr(fp,TCSANOW,&options);
    }
    else
    {
        //设置波特率
        switch(0x04)
        {
            case 0x00://BAUD4800
                myCom->setBaudRate(BAUD4800);
                break;
            case 0x01://BAUD9600
                myCom->setBaudRate(BAUD9600);
                break;
            case 0x02://BAUD38400
                myCom->setBaudRate(BAUD38400);
                break;
            case 0x03://BAUD57600
                myCom->setBaudRate(BAUD57600);
                break;
            case 0x04://BAUD115200
                myCom->setBaudRate(BAUD115200);
                break;
            default://BAUD9600
                myCom->setBaudRate(BAUD9600);
                break;
        }

        myCom->setDataBits(DATA_8);
        myCom->setParity(PAR_NONE);
        myCom->setStopBits(STOP_1);

        //设置数据流控制
        myCom->setFlowControl(FLOW_OFF);
        //设置延时
        myCom->setTimeout(5);
    }
    emit TicketDebug("FaceDetect Run");
    FaceHeartTimer->start(FACEHEARTTIME*1000);//
    while(1)
    {
        if(quit_flag)
        {
            //qDebug("BREAK WHILE IN BORAD-----------------------------");
            break;
        }
        temp = ReadMyCom();
        if((quint8)temp.data()[1]==0x05 && (quint8)temp.data()[5]==0xA8 && temp.length() > 6)
           temp = temp.remove(0,6);
        if((quint8)temp.data()[0]==0xEB && (quint8)temp.data()[temp.length()-1]!=0xA8)
        {
            TicketDebug("read again");
            temp += ReadMyCom();
        }
        Prepare_fd(temp);
        msleep(25);
    }


/*
    quint8 ik;
    quint8 timecnt = 0;



    QByteArray temp;
    timeval tv;
    int nread;
    fd_set rfds;
    char buff[512];

    int i=0;

    int readFlag = 0;
    bool dataFlag = 0;
    temp.resize(0);

    while(1)
    {
        tv.tv_sec=0;
        tv.tv_usec=500;
        FD_ZERO(&rfds);
        FD_SET(fp, &rfds);

        readFlag = select(1+fp, &rfds, NULL, NULL, &tv);
        if (readFlag > 0)
        {
            dataFlag = 1;
            if (FD_ISSET(fp, &rfds))
            {
                nread = read(fp, buff, 512);

                for(i=0;i<nread;i++)
                {
                    temp[temp.length()] = buff[i];
                }
            }
        }
        if((readFlag == 0)&&dataFlag)
        {
            dataFlag = 0;
            Prepare_fd(temp);
//            switch(Prepare_fd(temp))
//            {
//                case 1:
//                {
//                qDebug("+++++++++++++++++++++++1");
//                    UserEvent *uebar = new UserEvent(CR::BarCode,this);
//                    uebar->byteArray = temp;
//                    qApp->postEvent(fm,uebar);
//                    break;
//                }
//                case 2:
//                {
//                qDebug("+++++++++++++++++++++++2");
//                    UserEvent *ueic = new UserEvent(CR::RfidTicket,this);
//                    ueic->byteArray = temp;
//                    ueic->flag = 1;
//                    ueic->type = 0xc0;
//                    qApp->postEvent(fm,ueic);
//                    break;
//                }
//                case 3:
//                {
//                qDebug("+++++++++++++++++++++++3");
//                    UserEvent *ueid = new UserEvent(CR::RfidTicket,this);
//                    ueid->byteArray = temp;
//                    ueid->flag = 1;
//                    ueid->type = 0x02;
//                    qApp->postEvent(fm,ueid);
//                    break;
//                }
//                default:break;
//            }
        temp.resize(0);
        }

        msleep(25);
    }
    */
}

quint8 FaceDetect::Prepare_fd(QByteArray data)
{
    QByteArray ticketBuf;
    QString str,name;
    quint16 IsSucess;
    if(data.length()>=6)
    {
        if((quint8)data.data()[1]!=0x05)//心跳不打印
            emit TicketDebug(QString("receive from face:")+BgComm::ByteArrayToString(data, 16, true));
        if(((quint8)data.data()[0]==0xEB)&&((quint8)data.data()[data.length()-1]==0xA8))
        {
            if(((quint8)data.data()[1]==0x01))//识别端返回识别结果
            {
                IsSucess = (quint8)data.data()[2];
//                switch((quint8)data.data()[2])
//                {
//                    case 0x00:IsSucess=0;break;//比对成功
//                    case 0x01:IsSucess=1;break;//保留
//                    case 0x02:IsSucess=2;break;//失败（连续识别次数<3次）//baidu会比对三次
//                    case 0x03:IsSucess=3;break;//失败（连续识别次数>3次）
//                    case 0x10:IsSucess=10;break;//等待结果反馈
//                    case 0x30:IsSucess=30;break;//非活体
//                    case 0x40:IsSucess=40;break;//采集人脸太小
//                    case 0x42:IsSucess=42;break;//人脸角度过大（未正视）
//                    case 0x43:IsSucess=43;break;//人脸模糊
//                    case 0x50:IsSucess=50;break;//通讯超时
//                    default:IsSucess=1;break;
//                }
                ticketNoLen = (quint8)data.data()[3];
                ticketNoNum = (quint8)data.data()[4];
                quint8 ticketStyle;
                ticketNo = data.mid(5,100);
                QByteArray ticketNoRe = data.mid(5,ticketNoLen);
                str = ticketNoRe;
                emit TicketDebug(str);
                if(str.indexOf("_BC")>=0)
                {
                    ticketNoRe = ticketNoRe.mid(str.lastIndexOf("_")+1,ticketNoLen-str.lastIndexOf("_")-1);
                    ticketStyle=0x02;
                    emit  TicketDebug(QString("BC:")+(QString)ticketNoRe);
                }
                else if(str.indexOf("_IC")>=0)
                {
                    ticketNoRe = ticketNoRe.mid(str.lastIndexOf("_")+1,ticketNoLen-str.lastIndexOf("_")-1);
                    ticketStyle=0x03;
                    emit TicketDebug(QString("IC:")+(QString)ticketNoRe);
                }
                else if(str.indexOf("_ID")>=0)
                {
                    ticketNoRe = ticketNoRe.mid(str.lastIndexOf("_")+1,ticketNoLen-str.lastIndexOf("_")-1);
                    ticketStyle=0x04;
                    emit TicketDebug(QString("ID:")+(QString)ticketNoRe);
                }
                else
                {
                    ticketStyle=0x02;
                    emit TicketDebug(QString("ID:")+(QString)ticketNoRe);
                }
                ticketBuf = data.mid(105, 128);//交互提示语20->128
                str = ticketBuf;
                emit TicketDebug(QString("Compare Result：%1  ").arg(IsSucess)+(QString)QByteArray::fromBase64(str.toAscii()));
                name = (QString)QByteArray::fromBase64(str.toAscii());
                name = name.mid(0,name.indexOf("，"));
                emit TicketDebug("name:"+name);
                if(IsSucess!=2)
                {
                    UserEvent *ue = new UserEvent(CR::FACE,this);
                    ue->result = IsSucess;
                    ue->type = 0x01;
//                    ue->name = name;
//                    ue->ticketlen = ticketNoLen;
//                    ue->ticketnum = ticketNoNum;
//                    ue->ticketno = ticketNo;
                    ue->ticketnore = ticketNoRe;
                    ue->ticketstyle = ticketStyle;
                    ue->ticketInfoBase64 = str;
                    qApp->postEvent(fm,ue);
                }
                return 0;
            }
            else if((quint8)data.data()[1]==0x07)//识别端返回注册结果
            {
                IsSucess=(quint8)data.data()[2]*256*256*256+(quint8)data.data()[3]*256*256+(quint8)data.data()[4]*256+(quint8)data.data()[5];
                ticketBuf = data.mid(6, 128);//结果描述--UTF8编码后再BASE64编码
                str = ticketBuf;
                emit TicketDebug(QString("Register Result:%1  ").arg(IsSucess)+(QString)QByteArray::fromBase64(str.toAscii()));

                UserEvent *ue = new UserEvent(CR::FACE,this);
                ue->result = IsSucess;
                ue->type = 0x07;
                ue->ticketInfoBase64 = str;
                qApp->postEvent(fm,ue);
                return 0;
            }
            else if((quint8)data.data()[1]==0x05)//心跳
            {
                FaceHeartTimer->stop();
                FaceHeartTimer->start(FACEHEARTTIME*1000);
                if((quint8)data.data()[2]!=0x00)
                {
                    facedeverrtimes++;
                    emit TicketDebug(QString("facedeverrtimes=%1").arg(facedeverrtimes));
                    if(facedeverrtimes >= 3)
                    {
                        facedeverrflag=1;
                        UserEvent *ue = new UserEvent(CR::FACE,this);
                        ue->type = 0xFF;
                        qApp->postEvent(fm,ue);
                        emit TicketDebug("facedevice  err");
                    }
                }
                else
                {
                    if(facedeverrflag)
                    {
                        UserEvent *ue = new UserEvent(CR::FACE,this);
                        ue->type = 0xFE;
                        qApp->postEvent(fm,ue);
                        emit TicketDebug("facedevice  ok");
                    }

                    facedeverrflag=0;
                    facedeverrtimes=0;
                }
                return 0;
            }
            else if((quint8)data.data()[1]==0x04)//读取当前闸机和园门（闸机组）ID
            {
                 return 0;
            }
            else if((quint8)data.data()[1]==0x03)//读取当前闸机检票数量和当前园门（闸机组）的检票数量
            {
                 return 0;
            }
            else
               return 0;
        }
        else
          return 0;
    }
    else
        return 0;
}


void FaceDetect::face(quint8 type,quint8 rusult,QString ticketOrderBase64)
{
    QByteArray buf;
    quint8 lenH,lenL;
    lenH=ticketOrderBase64.length()/256;
    lenL=ticketOrderBase64.length()%256;
    buf[0] = 0xEB;
    buf[1] = type;
    buf[2] = rusult;
    buf[3] = 0x00;//保留字段
    buf[4] = 0x00;//保留字段
    buf[5] = 0x00;//保留字段
    buf[6] = 0x00;//保留字段
    buf[7] = lenH;//长度H
    buf[8] = lenL;//长度L
    buf   += ticketOrderBase64;
    buf[buf.length()] = 0x00;//备用
    buf[buf.length()] = 0x00;//备用
    buf[buf.length()] = 0x00;//备用
    buf[buf.length()] = 0x00;//备用
    buf[buf.length()] = 0xA8;
    SendBuf(buf);
    emit TicketDebug(QString("send to face:")+BgComm::ByteArrayToString(buf, 16, true));
}
//以下比对确认
void FaceDetect::faceconfirm(quint8 type,quint8 result)
{
    QByteArray buf;
    buf[0] = 0xEB;
    buf[1] = type;
    buf[2] = result;
    buf[3] = 0x00;//检票表示符
    buf[4] = 0x00;//检票表示符
    buf[5] = 0x00;//检票表示符
    buf[6] = 0x00;//检票表示符
    buf[buf.length()] = ticketNoLen ;//
    buf[buf.length()] = ticketNoNum;//
    buf += ticketNo;//
    buf[buf.length()] = 0xA8;
    SendBuf(buf);
    emit TicketDebug(QString("send to face confirm:")+BgComm::ByteArrayToString(buf, 16, true));
}
//以下录入确认
void FaceDetect::faceconfirm2(quint8 type,quint8 result,quint8 len,quint8 num,QByteArray ticketno)
{
    QByteArray buf;
    buf[0] = 0xEB;
    buf[1] = type;
    buf[2] = result;
    buf[3] = 0x00;//检票表示符
    buf[4] = 0x00;//检票表示符
    buf[5] = 0x00;//检票表示符
    buf[6] = 0x00;//检票表示符
    buf[buf.length()] = len;//
    buf[buf.length()] = num;//
    buf+=ticketno;
    buf[buf.length()] = 0xA8;
    SendBuf(buf);
    emit TicketDebug(QString("send to face confirm2:")+BgComm::ByteArrayToString(buf, 16, true));
}
void FaceDetect::ToFormTicket(QByteArray d, bool flag,quint8 type)
{
    UserEvent *ue = new UserEvent(CR::RfidTicket,this);
    ue->byteArray = d;
    ue->flag = flag;
    ue->type = type;
    qApp->postEvent(fm,ue);
}

bool FaceDetect::event(QEvent *event)
{
    if(event->type() == QEvent::User)
    {
        UserEvent * ue = static_cast<UserEvent *>(event);
        switch(ue->userType)
        {
            case CR::FACE:
                face(ue->type,ue->result,ue->ticketOrderBase64);
                break;
            case CR::FACECONFIRM:
                faceconfirm(ue->type,ue->result);
                break;
            case CR::FACECONFIRM2:
                faceconfirm2(ue->type,ue->result,ue->ticketlen,ue->ticketnum,ue->ticketno);
                break;

            default:
                return false;
        }
    }
    else
    {
        return QThread::event(event);
    }
    return true;
}
void FaceDetect::FaceHeartTimerOut()
{
    facedeverrflag=1;
    UserEvent *ue = new UserEvent(CR::FACE,this);
    ue->type = 0xFF;
    qApp->postEvent(fm,ue);
    emit TicketDebug("FaceHeartTimerOut && facedevice  err");

    FaceHeartTimer->stop();
    FaceHeartTimer->start(FACEHEARTTIME*1000);
}
