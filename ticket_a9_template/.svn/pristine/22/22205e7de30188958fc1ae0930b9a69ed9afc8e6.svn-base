#include "netlinkstatus.h"

NetlinkStatus::NetlinkStatus(QObject *parent) :
    QThread(parent)
{
    fm = this->parent();
}
void NetlinkStatus::run()
{
    emit TicketDebug("NetlinkStatus run");
    quint8 flag = 0;
    while(1)
    {
        //if(GetNetLink())
        {
            if((GetNetStat()==0)&&((flag==1)||(flag==0)))
            {
                flag = 2;
                UserEvent *te = new UserEvent(CR::NetlinkDown,this);
                qApp->postEvent(fm,te);
            }
            else if(GetNetStat()&&((flag==2)||(flag==0)))
            {
                flag = 1;
                UserEvent *te = new UserEvent(CR::Netlinkup,this);
                qApp->postEvent(fm,te);
            }
        }
        msleep(200);
    }
}

int NetlinkStatus::GetNetStat()
{
    char buffer[BUFSIZ];
    FILE *read_fp;
    int chars_read;
    int ret;

    memset( buffer, 0, BUFSIZ );
    read_fp = popen("ifconfig eth0 | grep RUNNING", "r");
    if(read_fp != NULL)
    {
        chars_read = fread(buffer, sizeof(char), BUFSIZ-1, read_fp);
        if(chars_read > 0)
        {
            ret = 1;
        }
        else
        {
            ret = 0;
        }
        pclose(read_fp);
    }
    else
    {
        ret = 0;
    }
    return ret;
}
int NetlinkStatus::GetNetLink()
{
    char buffer[BUFSIZ];
    FILE *read_fp;
    int chars_read;
    int ret;

    memset( buffer, 0, BUFSIZ );
    read_fp = popen("ifconfig eth0 | grep Scope:Link", "r");
    if(read_fp != NULL)
    {
        chars_read = fread(buffer, sizeof(char), BUFSIZ-1, read_fp);
        if(chars_read > 0)
        {
            ret = 1;
        }
        else
        {
            ret = 0;
        }
        pclose(read_fp);
    }
    else
    {
        ret = 0;
    }
    return ret;
}
//int get_netlink_status(const char *if_name)
//{
//    int skfd;
//    struct ifreq ifr;
//    struct ethtool_value edata;

//    edata.cmd = ETHTOOL_GLINK;
//    edata.data = 0;

//    memset(&ifr, 0,sizeof(ifr));
//    strncpy(ifr.ifr_name, if_name,sizeof(ifr.ifr_name)- 1);
//    ifr.ifr_data =(char *) &edata;

//    if (( skfd= socket(AF_INET, SOCK_DGRAM, 0 )) < 0)
//        return -1;

//    if(ioctl( skfd, SIOCETHTOOL,&ifr ) == -1)
//    {
//        close(skfd);
//        return -1;
//    }

//    close(skfd);
//    return edata.data;

//}
