#include "usbfinger.h"

UsbFinger::UsbFinger(QObject * parent)
    :QThread(parent)
{
    //指纹常开2s  5s
#if FINGEROPENMODE
    iTimeOut=2;
#else
    iTimeOut=5;
#endif
    qDebug()<<"iTimeOut:"<<iTimeOut;
    //usbfinger
    iRet = FPIGetVersion(cpVersion, &len);
    if (iRet == 0)
    {
        qDebug("FPIGetVersion:%s", cpVersion);
    }
    else
    {
        qDebug("FPIGetVersion failed:iret=%d", iRet);
    }
    fm = this->parent();
}
void UsbFinger::run()
{
    qDebug()<<"usbfinger run";
    while(runFlag)//runFlag
    {
        //qDebug()<<"runFlag22222:"<<runFlag<<"runStyle222222："<<runStyle;
        if(runStyle == 1)
        {
            runStyle=0;
            runFlag=0;
            FPIFeature(fingerGetTimes);
        }
        else if(runStyle == 2)
        {
            runStyle=0;
            runFlag=0;
            FPITemplate(fingerGetTimes);
        }
        else if(runStyle == 3)
        {
            //qDebug("44444444444");
            runStyle=0;
            runFlag=0;
            //qDebug()<<"runFlag33333:"<<runFlag<<"runrunStyle333："<<runStyle;
            FPITemplate_direct();
            //qDebug("5555555555");
        }
        else
        {
            runStyle=0;
            runFlag=0;
            msleep(50);
            qDebug("wrong runStyle");
        }
    }
}
void UsbFinger::ToForm(QByteArray fingerd,int flag)
{
    emit TicketDebug("finger usb recv:"+BgComm::ByteArrayToString(fingerd, 16, true)+" runType:0x"+QString::number(runType,16)+" flag:"+QString::number(flag));
//    if(!flag)
//    {
//        UserEvent *ue = new UserEvent(CR::FingerTimerout,this);
//        ue->type = runType;
//        qApp->postEvent(fm,ue);
//        return;
//    }
    switch(runType)
    {
    case 0x40:
    {
        UserEvent *ue = new UserEvent(CR::USBFingerFeature,this);
        if(flag == 1)
            ue->flag = 1;
        else
            ue->flag = 0;
        qApp->postEvent(fm,ue);
        break;
    }
    case 0x41:
    case 0x50:
    case 0x51:
    {
        UserEvent *ue = new UserEvent(CR::USBFingerTemplate,this);
        if(flag == 1)
            ue->flag = 1;
        else
            ue->flag = 0;
        ue->byteArray = fingerd;
        qApp->postEvent(fm,ue);
        break;
    }
    //二次录入时，前后不匹配
    case 0x60:
    {
        UserEvent *ue = new UserEvent(CR::USBFingerTemplate,this);
        ue->flag = 0;
        ue->byteArray = fingerd;
        qApp->postEvent(fm,ue);
        break;
    }
    default:break;
    }
}
void UsbFinger::FPIFeature(quint8 t)
{
    qDebug("FPIFeature  %d",t);
    QByteArray usbfingerdata;
    usbfingerdata.resize(0);
    runType = 0x40 + t;

    iBmpLen = 1078 + 152 * 200;
    memset(cpBmpData, 0, sizeof(cpBmpData));
    iRet =  GetFeatureEx(0x00, cFeature, NULL, cpBmpData);
    if(iRet != 0)
    {
        ToForm(usbfingerdata,iRet);
        return;
    }
    //msleep(50);
    iRet = Sys_fileWrite("/tmp/finger.bmp",0, (char*)cpBmpData, iBmpLen);

    if (iRet == 0)
    {
        qDebug("FPIGetFeature successful!");
        for (int i = 0; i < 256; i++)
        {
            //qDebug("0x%02x ", cFeature[i]);
            usbfingerdata[i] = cFeature[i];
        }
        ToForm(usbfingerdata,1);
        return;
    }
    else
    {
        qDebug("FPIGetFeature failed:iret=%d",iRet);
        ToForm(usbfingerdata,0);
        return ;
    }
}
void UsbFinger::FPITemplate(quint8 t)
{
    qDebug("FPITemplate  %d",t);
    QByteArray usbfingerdata;
    usbfingerdata.resize(0);
    runType = 0x50 + t;

    qDebug(">> step 1 \n");
    memset(cpBmpData, 0, sizeof(cpBmpData));
    iRet =  GetFeatureEx(0x01, cTempFeature, NULL, cpBmpData);
    if(iRet != 0)
    {
        ToForm(usbfingerdata,0);
        return;
    }
    //msleep(50);
    Sys_fileWrite("/tmp/finger.bmp",0, (char*)cpBmpData, iBmpLen);

    qDebug(">> step 2 \n");
    iRet = FPIDownloadFeature(0x02, cTempFeature, 256);
    if(iRet != 0)
    {
        ToForm(usbfingerdata,0);
        return;
    }

    qDebug(">> step 4 \n");
    iRet = FPIFeatureToTemplate(cTemplate, NULL, &iScore);

    if (iRet == 0)
    {
        qDebug("FPIGetTemplate successful! iScore=%d",iScore);
        for (int i = 0; i < 256; i++)
        {
            //qDebug("0x%02x ", cTemplate[i]);
            usbfingerdata[i]=cTemplate[i];
        }
        ToForm(usbfingerdata,1);
    }
    else
    {
        qDebug("FPIGetTemplate failed:iret=%d", iRet);
        runType = 0x60;
        ToForm(usbfingerdata,1);
    }
}
void UsbFinger::FPITemplate_direct()
{
    //emit TicketDebug("FPITemplate_direct");
    qDebug("FPITemplate_direct");
    QByteArray usbfingerdata;
    usbfingerdata.resize(0);
    runType = 0x50;

    iBmpLen = 1078 + 152 * 200;
    memset(cpBmpData, 0, sizeof(cpBmpData));
    msleep(150);//
    iRet =  GetFeatureEx(0x00, cFeature, NULL, cpBmpData);
    if(iRet != 0)
    {
        qDebug("no finger");
        ToForm(usbfingerdata,0);
        return;
    }
    // msleep(50);
    iRet = Sys_fileWrite("/tmp/finger.bmp",0, (char*)cpBmpData, iBmpLen);

    if (iRet == 0)
    {
        qDebug("FPIGetFeature successful!");
        for (int i = 0; i < 256; i++)
        {
            //qDebug("0x%02x ", cFeature[i]);
            usbfingerdata[i] = cFeature[i];
        }
        ToForm(usbfingerdata,1);
        return ;
    }
    else
    {
        qDebug("FPIGetFeature failed:iret=%d",iRet);
        ToForm(usbfingerdata,0);
        return ;
    }
}
int UsbFinger::FPIGetFingerPic()
{
    iImageWidth = 0;
    iImageHeight = 0;
    iRet = FPIEnrollImage(&iImageWidth, &iImageHeight, 5);
    if (iRet == 0)
    {
        qDebug( "FPIEnrollImage successful, image width=%d, image height=%d !",iImageWidth, iImageHeight);

        iImageLen = 152 * 200;
        iBmpLen = 1078 + 152 * 200;
        memset(cImage, 0, sizeof(cImage));
        msleep(50);
        iRet = FPIUploadImage(cImage, &iImageLen);
        if (iRet == 0)
        {
            qDebug("FPIUploadImage successful, image data len=%d!",iImageLen);
            memset(cpBmpData, 0, sizeof(cpBmpData));
            msleep(50);
            FpImageToBMP(152, 200, cImage, cpBmpData);
            iRet = Sys_fileWrite("/tmp/finger.bmp",0, (char*)cpBmpData, iBmpLen);
            qDebug("Sys_fileWrite:iret=%d", iRet);
            return 0;
        }
        else
        {
            qDebug("FPIUploadImage failed:iret=%d", iRet);
            return 1;
        }
    }
    else
    {
        qDebug("FPIEnrollImage failed:iret=%d", iRet);
        return 2;
    }
}
bool UsbFinger::event(QEvent *event)
{
    if(event->type() == QEvent::User)
    {
        UserEvent * ue = static_cast<UserEvent *>(event);
        switch(ue->userType)
        {
        case CR::USBFingerFeature:
            //qDebug()<<"FPIGetFeature";
            runFlag=1;
            runStyle=1;
            fingerGetTimes = ue->times;
            //msleep(20);
            this->start();
            break;
        case CR::USBFingerTemplate:
            //qDebug()<<"FPIGetTemplate";
            runFlag=1;
            runStyle=2;
            fingerGetTimes = ue->times;
            //msleep(20);
            this->start();
            break;
        case CR::USBFingerTemplate_direct:
            //qDebug()<<"USBFingerTemplate_direct";
            // emit TicketDebug("USBFingerTemplate_direct");
            runFlag=1;
            runStyle=3;
            //qDebug()<<"runFlag1111："<<runFlag<<"runrunStyle1111："<<runStyle;
            //msleep(20);
            this->start();
            break;
        default:
            return false;
        }
    }
    else
    {
        return QThread::event(event);
    }
    return true;
}

//usbfinger
void UsbFinger::FpImageToBMP(int width, int height, unsigned char *cpImagesrc,unsigned char *cpBmpdst)
{
    //在数据前加入bmp头
    int i = 0;
    unsigned char head[1078] = {
        //file header
        0x42, 0x4d, //file type
        0x0, 0x0, 0x0, 0x00, //file size***
        0x00, 0x00, //reserved
        0x00, 0x00, //reserved
        0x36, 0x4, 0x00, 0x00, //head byte***
        //infoheader
        0x28, 0x00, 0x00, 0x00, //struct size
        0x00, 0x00, 0x00, 0x00, //map width***
        0x00, 0x00, 0x00, 0x00, //map height***

        0x01, 0x00, //must be 1
        0x08, 0x00, //color count***
        0x00, 0x00, 0x00, 0x00, //compression
        0x00, 0x00, 0x00, 0x00, //data size***
        0x00, 0x00, 0x00, 0x00, //dpix
        0x00, 0x00, 0x00, 0x00, //dpiy
        0x00, 0x00, 0x00, 0x00, //color used
        0x00, 0x00, 0x00, 0x00, //color important
    };
    int num, j = 0, WIDTH = width, HEIGHT = height;
    //确定图象宽度数值
    num = WIDTH;
    head[18] = num & 0xFF;
    num = num >> 8;
    head[19] = num & 0xFF;
    num = num >> 8;
    head[20] = num & 0xFF;
    num = num >> 8;
    head[21] = num & 0xFF;
    //确定图象高度数值
    num = HEIGHT;
    head[22] = num & 0xFF;
    num = num >> 8;
    head[23] = num & 0xFF;
    num = num >> 8;
    head[24] = num & 0xFF;
    num = num >> 8;
    head[25] = num & 0xFF;
    //确定调色板数值
    j = 0;
    for (i = 54; i < 1078; i = i + 4)
    {
        head[i] = head[i + 1] = head[i + 2] = j;
        head[i + 3] = 0;
        j++;
    }
    memcpy(cpBmpdst, head, 1078);

    //写入图象数据
    for (i = 0; i < HEIGHT; i++) {
        memcpy(cpBmpdst + 1078 * sizeof(char) + (HEIGHT - 1 - i) * WIDTH,
               cpImagesrc + i * WIDTH, WIDTH * sizeof(char));
    }
}

/*****************************************************************
// 函数名称: Sys_fileWrite
// 函数说明：Dat文件写,不存在则创建
// 参    数: char * cpname
// 参    数: int ioffset
// 参    数: char * cpbuf
// 参    数: int ilen
// 作    者：zhangys
// 作成日期：2014/02/25
// 返 回 值: int
*****************************************************************/
int UsbFinger::Sys_fileWrite(char *cpname,int ioffset,char *cpbuf,int ilen)
{
    int fd, ret;
    if(cpname==NULL || cpbuf==NULL)
        return -1;

    fd = open(cpname, O_RDWR|O_CREAT, 0777);
    if(fd<0)
    {
        perror(cpname);
        close(fd);
        return -1;
    }
    lseek(fd, ioffset, SEEK_SET);
    ret = write(fd, cpbuf, ilen);
    if(ret  != ilen )
    {
        close(fd);
        return -1;
    }
    close(fd);
    QProcess::execute("sync");
    return 0;
}
int UsbFinger::GetFeatureEx(int bufferId, unsigned char *pucFeature, int *piFeatureLen, unsigned char *pucBmpData)
{
    iImageWidth = 0;
    iImageHeight = 0;
    //qDebug("FPIEnrollImage99999999999999999999999999");
    iRet = FPIEnrollImage(&iImageWidth, &iImageHeight, iTimeOut);
    if (iRet == 0)
    {
        qDebug("FPIEnrollImage successful, image width=%d, image height=%d !",iImageWidth, iImageHeight);
    }
    else
    {
        qDebug("FPIEnrollImage failed:iret=%d", iRet);
        return iRet;
    }
    msleep(50);
    if(pucBmpData != NULL)
    {
        iImageLen = 152 * 200;
        memset(cImage, 0, sizeof(cImage));
        iRet = FPIUploadImage(cImage, &iImageLen);
        if (iRet == 0)
        {
            qDebug("FPIUploadImage successful, image data len=%d!",iImageLen);
            FpImageToBMP(152, 200, cImage, pucBmpData);
        }
        else
        {
            qDebug("FPIUploadImage failed:iret=%d!", iRet);
            return iRet;
        }
    }
    msleep(50);
    iRet = FPIImageToFeature(bufferId);
    if(iRet == 0)
    {
        qDebug("FPIImageToFeature successed!");
    }
    else
    {
        qDebug("FPIImageToFeature failed:iret=%d", iRet);
        return iRet;
    }
    msleep(50);
    if(pucFeature != NULL)
    {
        iRet = FPIUploadFeature(bufferId, pucFeature, piFeatureLen);
        if(iRet == 0)
        {
            qDebug("FPIUploadFeature successed");
        }
        else
        {
            qDebug("FPIUploadFeature failed:iret=%d", iRet);
            return iRet;
        }
    }
    return iRet;
}
